|
| **********************************************************************
| DO NOT EDIT THIS FILE UNTIL YOU HAVE COMPLETED THE ENTIRE STARTER KIT!
|
| (Otherwise your changes will get over-written the next time you save.)
| **********************************************************************
|
|PC-PATR Grammar file for PAWS Starter Kit
| C Black    July 2012
|
|------------------------------------------------------------------------------
|-Phrase structure rules


Let ablative                             be    <head case>                     = ablative
Let absolutive                           be    <head case>                     = absolutive
Let -absolutive                          be    <head case>                     = {ergative genitive dative}
Let absolutive.or.dative                 be    <head case>                     = {absolutive dative}
Let absolutive.or.ergative               be    <head case>                     = {absolutive ergative}
Let absolutive.or.genitive               be    <head case>                     = {absolutive genitive}
Let absolutive_prefix                    be    <head type prefix case>         = absolutive
                                                   [absolutive]
Let absolutive_suffix                    be    <head type suffix case>         = absolutive
                                                    [absolutive]
Let accusative                           be    <head case>                     = accusative
Let -accusative                          be    <head case>                     = {nominative genitive dative}
Let accusative.or.dative                 be    <head case>                     = {accusative dative} 
Let accusative.or.genitive               be    <head case>                     = {accusative genitive} 
Let accusative.or.nominative             be    <head case>                     = {accusative nominative} 
Let actorVoice                           be    <head infl voice>               = actor
Let AdjP-final                           be    <head type AdjP-final>          = +
                                               <head type AdjP-initial>        = -
Let AdjP-initial                         be    <head type AdjP-initial>        = +
                                               <head type AdjP-final>          = -
Let AdvP-final                           be    <head type AdvP-final>          = +
                                               <head type AdvP-initial>        = -
Let AdvP-initial                         be    <head type AdvP-initial>        = +
                                               <head type AdvP-final>          = -
Let -alone                               be    <head type particle>            = -
Let animate                              be    <head agr animacy>              = animate
Let animate_absolutive                   be  { [head:[object:[head:[agr:[animacy:animate]]]
                                                      type:[transitive:+]]]
                                               [head:[subject:[head:[agr:[animacy:animate]]]
                                                      type:[transitive:-]]] }
Let animate_ergative                     be    <head subject head agr animacy> = animate
                                               <head type transitive>          = +
Let animate_object                       be    <head object head agr animacy>  = animate
Let animate_subject                      be    <head subject head agr animacy> = animate
Let -animate                             be    <head agr animacy>              = inanimate
Let -animate_absolutive                  be  { [head:[object:[head:[agr:[animacy:inanimate]]]
                                                      type:[transitive:+]]]
                                               [head:[subject:[head:[agr:[animacy:inanimate]]]
                                                      type:[transitive:-]]] }
Let -animate_ergative                    be    <head subject head agr animacy> = inanimate
                                               <head type transitive>          = +
Let -animate_object                      be    <head object head agr animacy>  = inanimate
Let -animate_subject                     be    <head subject head agr animacy> = inanimate
Let antipassive                          be    <head infl valence>             = antipassive
Let applicative                          be    <head infl valence>             = applicative
Let assumed                              be    <head infl evidentiality>       = assumed
Let auditory                             be    <head infl evidentiality>       = auditory
Let case_prefix_ablative                 be    <head type prefix case>         = ablative
Let case_prefix_absolutive               be    <head type prefix case>         = absolutive
Let case_prefix_absolutive.or.dative     be    <head type prefix case>         = {absolutive dative}
Let case_prefix_accusative               be    <head type prefix case>         = accusative
Let case_prefix_accusative.or.dative     be    <head type prefix case>         = {accusative dative}
Let case_prefix_dative                   be    <head type prefix case>         = dative
Let case_prefix_ergative                 be    <head type prefix case>         = ergative
Let case_prefix_genitive                 be    <head type prefix case>         = genitive
Let case_prefix_instrumental             be    <head type prefix case>         = instrumental
Let case_prefix_locative                 be    <head type prefix case>         = locative
Let case_prefix_nominative               be    <head type prefix case>         = nominative
Let case_prefix_oblique                  be    <head type prefix case>         = oblique
Let case_prefix_vocative                 be    <head type prefix case>         = vocative
Let case_suffix_ablative                 be    <head type suffix case>         = ablative
Let case_suffix_absolutive               be    <head type suffix case>         = absolutive
Let case_suffix_absolutive.or.dative     be    <head type suffix case>         = {absolutive dative}
Let case_suffix_accusative               be    <head type suffix case>         = accusative
Let case_suffix_accusative.or.dative     be    <head type suffix case>         = {accusative dative}
Let case_suffix_dative                   be    <head type suffix case>         = dative
Let case_suffix_ergative                 be    <head type suffix case>         = ergative
Let case_suffix_genitive                 be    <head type suffix case>         = genitive
Let case_suffix_instrumental             be    <head type suffix case>         = instrumental
Let case_suffix_locative                 be    <head type suffix case>         = locative
Let case_suffix_nominative               be    <head type suffix case>         = nominative
Let case_suffix_oblique                  be    <head type suffix case>         = oblique
Let case_suffix_vocative                 be    <head type suffix case>         = vocative
Let causative                            be    <head infl valence>             = causative
Let causative_syntax                     be   { [head:[infl:[valence:causative]
                                                       type:[causative_syntax:+]
                                                       embedded:[cat:IP]]]
                                                 [head:[type:[causative_syntax:+
                                                              transitive:+]
                                                        embedded:[cat:none]]] }
Let class_animal                         be    <head agr class>                = animal
Let class_bird                           be    <head agr class>                = bird
Let class_boat                           be    <head agr class>                = boat
Let class_clothing                       be    <head agr class>                = clothing
Let class_cylindrical                    be    <head agr class>                = cylindrical
Let class_flat                           be    <head agr class>                = flat
Let class_generic                        be    <head agr class>                = generic
Let class_human                          be    <head agr class>                = human
Let class_insect                         be    <head agr class>                = insect
Let class_liquid                         be    <head agr class>                = liquid
Let class_mechanical                     be    <head agr class>                = mechanical
Let class_other                          be    <head agr class>                = other
Let class_round                          be    <head agr class>                = round
Let class_spherical                      be    <head agr class>                = spherical
Let class_thin                           be    <head agr class>                = thin
Let class_tree                           be    <head agr class>                = tree
Let class_wavy                           be    <head agr class>                = wavy
Let class_wood                           be    <head agr class>                = wood
Let class_1                              be    <head agr class>                = 1
Let class_2                              be    <head agr class>                = 2
Let class_3                              be    <head agr class>                = 3
Let class_4                              be    <head agr class>                = 4
Let class_5                              be    <head agr class>                = 5
Let class_6                              be    <head agr class>                = 6
Let class_7                              be    <head agr class>                = 7
Let class_8                              be    <head agr class>                = 8
Let class_9                              be    <head agr class>                = 9
Let class_10                             be    <head agr class>                = 10
Let class_11                             be    <head agr class>                = 11
Let class_12                             be    <head agr class>                = 12
Let class_13                             be    <head agr class>                = 13
Let class_14                             be    <head agr class>                = 14
Let class_15                             be    <head agr class>                = 15
Let class_16                             be    <head agr class>                = 16
Let class_17                             be    <head agr class>                = 17
Let class_18                             be    <head agr class>                = 18
Let class_19                             be    <head agr class>                = 19
Let class_20                             be    <head agr class>                = 20
Let class_21                             be    <head agr class>                = 21
Let class_22                             be    <head agr class>                = 22
Let class_23                             be    <head agr class>                = 23
Let class_24                             be    <head agr class>                = 24
Let class_25                             be    <head agr class>                = 25
Let class_animal_absolutive              be   { [head:[object:[head:[agr:[class:animal]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:animal]]]
                                                       type:[transitive:-]]] }
Let class_cylindrical_absolutive         be   { [head:[object:[head:[agr:[class:cylindrical]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:cylindrical]]]
                                                       type:[transitive:-]]] }
Let class_insect_absolutive              be   { [head:[object:[head:[agr:[class:insect]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:insect]]]
                                                       type:[transitive:-]]] }
Let class_liquid_absolutive              be   { [head:[object:[head:[agr:[class:liquid]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:liquid]]]
                                                       type:[transitive:-]]] }
Let class_round_absolutive               be   { [head:[object:[head:[agr:[class:round]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:round]]]
                                                       type:[transitive:-]]] }
Let class_spherical_absolutive           be   { [head:[object:[head:[agr:[class:spherical]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:spherical]]]
                                                       type:[transitive:-]]] }
Let class_tree_absolutive                be   { [head:[object:[head:[agr:[class:tree]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:tree]]]
                                                       type:[transitive:-]]] }
Let class_wood_absolutive                be   { [head:[object:[head:[agr:[class:wood]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:wood]]]
                                                       type:[transitive:-]]] }
Let class_other_absolutive               be   { [head:[object:[head:[agr:[class:other]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:other]]]
                                                       type:[transitive:-]]] }
Let class_1_absolutive                   be   { [head:[object:[head:[agr:[class:1]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:1]]]
                                                       type:[transitive:-]]] }
Let class_2_absolutive                   be   { [head:[object:[head:[agr:[class:2]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:2]]]
                                                       type:[transitive:-]]] }
Let class_3_absolutive                   be   { [head:[object:[head:[agr:[class:3]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:3]]]
                                                       type:[transitive:-]]] }
Let class_4_absolutive                   be   { [head:[object:[head:[agr:[class:4]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:4]]]
                                                       type:[transitive:-]]] }
Let class_5_absolutive                   be   { [head:[object:[head:[agr:[class:5]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:5]]]
                                                       type:[transitive:-]]] }
Let class_6_absolutive                   be   { [head:[object:[head:[agr:[class:6]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:6]]]
                                                       type:[transitive:-]]] }
Let class_7_absolutive                   be   { [head:[object:[head:[agr:[class:7]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:7]]]
                                                       type:[transitive:-]]] }
Let class_8_absolutive                   be   { [head:[object:[head:[agr:[class:8]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:8]]]
                                                       type:[transitive:-]]] }
Let class_9_absolutive                   be   { [head:[object:[head:[agr:[class:9]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:9]]]
                                                       type:[transitive:-]]] }
Let class_10_absolutive                  be   { [head:[object:[head:[agr:[class:10]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:10]]]
                                                       type:[transitive:-]]] }
Let class_11_absolutive                  be   { [head:[object:[head:[agr:[class:11]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:11]]]
                                                       type:[transitive:-]]] }
Let class_12_absolutive                  be   { [head:[object:[head:[agr:[class:12]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:12]]]
                                                       type:[transitive:-]]] }
Let class_13_absolutive                  be   { [head:[object:[head:[agr:[class:13]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:13]]]
                                                       type:[transitive:-]]] }
Let class_14_absolutive                  be   { [head:[object:[head:[agr:[class:14]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:14]]]
                                                       type:[transitive:-]]] }
Let class_15_absolutive                  be   { [head:[object:[head:[agr:[class:15]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:15]]]
                                                       type:[transitive:-]]] }
Let class_16_absolutive                  be   { [head:[object:[head:[agr:[class:16]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:16]]]
                                                       type:[transitive:-]]] }
Let class_17_absolutive                  be   { [head:[object:[head:[agr:[class:17]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:17]]]
                                                       type:[transitive:-]]] }
Let class_18_absolutive                  be   { [head:[object:[head:[agr:[class:18]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:18]]]
                                                       type:[transitive:-]]] }
Let class_19_absolutive                  be   { [head:[object:[head:[agr:[class:19]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:19]]]
                                                       type:[transitive:-]]] }
Let class_20_absolutive                  be   { [head:[object:[head:[agr:[class:20]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:20]]]
                                                       type:[transitive:-]]] }
Let class_21_absolutive                  be   { [head:[object:[head:[agr:[class:21]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:21]]]
                                                       type:[transitive:-]]] }
Let class_22_absolutive                  be   { [head:[object:[head:[agr:[class:22]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:22]]]
                                                       type:[transitive:-]]] }
Let class_23_absolutive                  be   { [head:[object:[head:[agr:[class:23]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:23]]]
                                                       type:[transitive:-]]] }
Let class_24_absolutive                  be   { [head:[object:[head:[agr:[class:24]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:24]]]
                                                       type:[transitive:-]]] }
Let class_25_absolutive                  be   { [head:[object:[head:[agr:[class:25]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[class:25]]]
                                                       type:[transitive:-]]] }
Let class_animal_ergative                be    <head subject head agr class>   = animal
                                               <head type transitive>          = +
Let class_cylindrical_ergative           be    <head subject head agr class>   = cylindrical
                                               <head type transitive>          = +
Let class_insect_ergative                be    <head subject head agr class>   = insect
                                               <head type transitive>          = +
Let class_liquid_ergative                be    <head subject head agr class>   = liquid
                                               <head type transitive>          = +
Let class_other_ergative                 be    <head subject head agr class>   = other
                                               <head type transitive>          = +
Let class_round_ergative                 be    <head subject head agr class>   = round
                                               <head type transitive>          = +
Let class_spherical_ergative             be    <head subject head agr class>   = spherical
                                               <head type transitive>          = +
Let class_tree_ergative                  be    <head subject head agr class>   = tree
                                               <head type transitive>          = +
Let class_wood_ergative                  be    <head subject head agr class>   = wood
                                               <head type transitive>          = +
Let class_1_ergative                     be    <head subject head agr class>   = 1
                                               <head type transitive>          = +
Let class_2_ergative                     be    <head subject head agr class>   = 2
                                               <head type transitive>          = +
Let class_3_ergative                     be    <head subject head agr class>   = 3
                                               <head type transitive>          = +
Let class_4_ergative                     be    <head subject head agr class>   = 4
                                               <head type transitive>          = +
Let class_5_ergative                     be    <head subject head agr class>   = 5
                                               <head type transitive>          = +
Let class_6_ergative                     be    <head subject head agr class>   = 6
                                               <head type transitive>          = +
Let class_7_ergative                     be    <head subject head agr class>   = 7
                                               <head type transitive>          = +
Let class_8_ergative                     be    <head subject head agr class>   = 8
                                               <head type transitive>          = +
Let class_9_ergative                     be    <head subject head agr class>   = 9
                                               <head type transitive>          = +
Let class_10_ergative                    be    <head subject head agr class>   = 10
                                               <head type transitive>          = +
Let class_11_ergative                    be    <head subject head agr class>   = 11
                                               <head type transitive>          = +
Let class_12_ergative                    be    <head subject head agr class>   = 12
                                               <head type transitive>          = +
Let class_13_ergative                    be    <head subject head agr class>   = 13
                                               <head type transitive>          = +
Let class_14_ergative                    be    <head subject head agr class>   = 14
                                               <head type transitive>          = +
Let class_15_ergative                    be    <head subject head agr class>   = 15
                                               <head type transitive>          = +
Let class_16_ergative                    be    <head subject head agr class>   = 16
                                               <head type transitive>          = +
Let class_17_ergative                    be    <head subject head agr class>   = 17
                                               <head type transitive>          = +
Let class_18_ergative                    be    <head subject head agr class>   = 18
                                               <head type transitive>          = +
Let class_19_ergative                    be    <head subject head agr class>   = 19
                                               <head type transitive>          = +
Let class_20_ergative                    be    <head subject head agr class>   = 20
                                               <head type transitive>          = +
Let class_21_ergative                    be    <head subject head agr class>   = 21
                                               <head type transitive>          = +
Let class_22_ergative                    be    <head subject head agr class>   = 22
                                               <head type transitive>          = +
Let class_23_ergative                    be    <head subject head agr class>   = 23
                                               <head type transitive>          = +
Let class_24_ergative                    be    <head subject head agr class>   = 24
                                               <head type transitive>          = +
Let class_25_ergative                    be    <head subject head agr class>   = 25
                                               <head type transitive>          = +
Let class_animal_object                  be    <head object head agr class>    = animal
Let class_cylindrical_object             be    <head object head agr class>    = cylindrical
Let class_insect_object                  be    <head object head agr class>    = insect
Let class_liquid_object                  be    <head object head agr class>    = liquid
Let class_other_object                   be    <head object head agr class>    = other
Let class_round_object                   be    <head object head agr class>    = round
Let class_spherical_object               be    <head object head agr class>    = spherical
Let class_tree_object                    be    <head object head agr class>    = tree
Let class_wood_object                    be    <head object head agr class>    = wood
Let class_1_object                       be    <head object head agr class>    = 1
Let class_2_object                       be    <head object head agr class>    = 2
Let class_3_object                       be    <head object head agr class>    = 3
Let class_4_object                       be    <head object head agr class>    = 4
Let class_5_object                       be    <head object head agr class>    = 5
Let class_6_object                       be    <head object head agr class>    = 6
Let class_7_object                       be    <head object head agr class>    = 7
Let class_8_object                       be    <head object head agr class>    = 8
Let class_9_object                       be    <head object head agr class>    = 9
Let class_10_object                      be    <head object head agr class>    = 10
Let class_11_object                      be    <head object head agr class>    = 11
Let class_12_object                      be    <head object head agr class>    = 12
Let class_13_object                      be    <head object head agr class>    = 13
Let class_14_object                      be    <head object head agr class>    = 14
Let class_15_object                      be    <head object head agr class>    = 15
Let class_16_object                      be    <head object head agr class>    = 16
Let class_17_object                      be    <head object head agr class>    = 17
Let class_18_object                      be    <head object head agr class>    = 18
Let class_19_object                      be    <head object head agr class>    = 19
Let class_20_object                      be    <head object head agr class>    = 20
Let class_21_object                      be    <head object head agr class>    = 21
Let class_22_object                      be    <head object head agr class>    = 22
Let class_23_object                      be    <head object head agr class>    = 23
Let class_24_object                      be    <head object head agr class>    = 24
Let class_25_object                      be    <head object head agr class>    = 25
Let class_animal_subject                 be    <head subject head agr class>   = animal
Let class_cylindrical_subject            be    <head subject head agr class>   = cylindrical
Let class_insect_subject                 be    <head subject head agr class>   = insect
Let class_liquid_subject                 be    <head subject head agr class>   = liquid
Let class_other_subject                  be    <head subject head agr class>   = other
Let class_round_subject                  be    <head subject head agr class>   = round
Let class_spherical_subject              be    <head subject head agr class>   = spherical
Let class_tree_subject                   be    <head subject head agr class>   = tree
Let class_wood_subject                   be    <head subject head agr class>   = wood
Let class_1_subject                      be    <head subject head agr class>   = 1
Let class_2_subject                      be    <head subject head agr class>   = 2
Let class_3_subject                      be    <head subject head agr class>   = 3
Let class_4_subject                      be    <head subject head agr class>   = 4
Let class_5_subject                      be    <head subject head agr class>   = 5
Let class_6_subject                      be    <head subject head agr class>   = 6
Let class_7_subject                      be    <head subject head agr class>   = 7
Let class_8_subject                      be    <head subject head agr class>   = 8
Let class_9_subject                      be    <head subject head agr class>   = 9
Let class_10_subject                     be    <head subject head agr class>   = 10
Let class_11_subject                     be    <head subject head agr class>   = 11
Let class_12_subject                     be    <head subject head agr class>   = 12
Let class_13_subject                     be    <head subject head agr class>   = 13
Let class_14_subject                     be    <head subject head agr class>   = 14
Let class_15_subject                     be    <head subject head agr class>   = 15
Let class_16_subject                     be    <head subject head agr class>   = 16
Let class_17_subject                     be    <head subject head agr class>   = 17
Let class_18_subject                     be    <head subject head agr class>   = 18
Let class_19_subject                     be    <head subject head agr class>   = 19
Let class_20_subject                     be    <head subject head agr class>   = 20
Let class_21_subject                     be    <head subject head agr class>   = 21
Let class_22_subject                     be    <head subject head agr class>   = 22
Let class_23_subject                     be    <head subject head agr class>   = 23
Let class_24_subject                     be    <head subject head agr class>   = 24
Let class_25_subject                     be    <head subject head agr class>   = 25
Let comma                                be    <head type comma>               = +
Let comp                                 be    <head type comp>                = +
Let comp_prefix                          be    <head type prefix comp>         = +
Let comp_suffix                          be    <head type suffix comp>         = +
Let comparative                          be    <head type comparative>         = +
Let comparative_prefix                   be    <head type prefix comparative>  = +
Let comparative_suffix                   be    <head type suffix comparative>  = +
Let compareAdj                           be    <head type compareAdj>          = +
Let compareN                             be    <head type compareN>            = +
Let completive                           be    <head infl aspect>              = completive
Let compound                             be    <head type compound>            = +
Let -compound                            be    <head type compound>            = -
Let conditional                          be    <head infl mood>                = conditional
Let conditional_prefix                   be    <head type prefix conditional>  = +
Let conditional_suffix                   be    <head type suffix conditional>  = +
Let conj_prefix                          be    <head type prefix conj>         = +
Let conj_prefix_neg                      be    <head conj head infl polarity>  = negative
Let conj_prefix_pl                       be    <head conj head agr number>     = plural
Let conj_suffix                          be    <head type suffix conj>         = +
Let conj_suffix_neg                      be    <head conj head infl polarity>  = negative
Let conj_suffix_pl                       be    <head conj head agr number>     = plural
Let conjoins_DP                          be    <head type conjoins_DP>         = +
Let conjoins_IP                          be    <head type conjoins_IP>         = +
Let -conjoins_DP                         be    <head type conjoins_DP>         = -
Let -conjoins_IP                         be    <head type conjoins_IP>         = -
Let contemplative                        be    <head infl aspect>              = contemplative
Let continuative                         be    <head infl aspect>              = continuative
Let contrafactual                        be    <head infl aspect>              = contrafactual
Let copular                              be    <head type copular>             = +
Let copular_prefix                       be    <head type prefix copular>      = +
                                                   [copular]
Let copular_suffix                       be    <head type suffix copular>      = +
                                                   [copular]
Let CP-final                             be    <head type CP-final>            = +
                                               <head type CP-initial>          = -
Let -CP-final                            be    <head type CP-final>            = -
Let CP-initial                           be    <head type CP-initial>          = +
                                               <head type CP-final>            = -
Let -CP-initial                          be    <head type CP-initial>          = -
Let CP-specifier-initial                 be    <head type CP-specifier-initial> = +
Let dative                               be    <head case>                     = dative
Let -dative                              be    <head case>                     = {nominative accusative genitive}
Let -dativeErg                           be    <head case>                     = {ergative absolutive genitive}
Let dative.or.absolutive                 be    <head case>                     = {dative absolutive}
Let dative.or.ergative                   be    <head case>                     = {dative ergative}
Let dative.or.accusative                 be    <head case>                     = {dative accusative}
Let dative.or.genitive                   be    <head case>                     = {dative genitive}
Let dative.or.nominative                 be    <head case>                     = {dative nominative}
Let dativeVoice                          be    <head infl voice>               = dative
Let declarative                          be    <head infl mood>                = declarative
Let definite                             be    <head type definite>            = +
Let ditransitive                         be    <head type ditransitive>        = +
                                               <head type transitive>          = +
Let ditransitive.opt                     be   { [head:[type:[ditransitive:+]]]
                                                [head:[type:[ditransitive:-
                                                             transitive:+]]] }
Let DP-final                             be    <head type DP-final>            = +
                                               <head type DP-initial>          = -
Let -DP-final                            be    <head type DP-final>            = -
Let DP-initial                           be    <head type DP-initial>          = +
                                               <head type DP-final>            = -
Let -DP-initial                          be    <head type DP-initial>          = -
Let dual                                 be    <head agr number>               = dual
Let dual_absolutive                      be   { [head:[object:[head:[agr:[number:dual]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[number:dual]]]
                                                       type:[transitive:-]]] }
Let dual_ergative                        be    <head subject head agr number>  = dual
                                               <head type transitive>          = +
Let dual_object                          be    <head object head agr number>   = dual
Let dual_subject                         be    <head subject head agr number>  = dual
Let emphatic                             be    <head type emphatic>            = +
Let equalAdj                             be    <head type equalAdj>            = +
Let equalN                               be    <head type equalN>              = +
Let ergative                             be    <head case>                     = ergative
Let -ergative                            be    <head case>                     = {absolutive genitive dative}
Let ergative.or.absolutive               be    <head case>                     = {ergative absolutive}
Let ergative.or.dative                   be    <head case>                     = {ergative dative}
Let ergative.or.genitive                 be    <head case>                     = {ergative genitive}
Let ergative_prefix                      be    <head type prefix case>         = ergative
                                                   [ergative]
Let ergative_suffix                      be    <head type suffix case>         = ergative
                                                   [ergative]
Let exclusive                            be    <head agr person>               = first_exclusive
Let excl-initial                         be    <head type excl-initial>        = +
Let excl-final                           be    <head type excl-final>          = +
Let exist                                be    <head type existential>         = +
Let experiencer                          be    <head subject head case>        = dative
Let feminine                             be    <head agr gender>               = feminine
Let feminine_absolutive                  be   { [head:[object:[head:[agr:[gender:feminine]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[gender:feminine]]]
                                                       type:[transitive:-]]] }
Let feminine_ergative                    be    <head subject head agr gender>   = feminine
                                               <head type transitive>           = +
Let feminine_object                      be    <head object head agr gender>    = feminine
Let feminine_subject                     be    <head subject head agr gender>   = feminine
Let finite                               be    <head infl finite>               = +
Let -finite                              be    <head infl finite>               = -
Let first                                be    <head agr person>                = first
Let first_exclusive                      be    <head agr person>                = first_exclusive
Let first_exclusive_absolutive           be   { [head:[object:[head:[agr:[person:first_exclusive]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[person:first_exclusive]]]
                                                       type:[transitive:-]]] }
Let first_exclusive_ergative             be    <head subject head agr person>    = first_exclusive
                                               <head type transitive>            = +
Let first_exclusive_subject              be    <head subject head agr person>    = first_exclusive
Let first_exclusive_object               be    <head object head agr person>     = first_exclusive
Let first_inclusive                      be    <head agr person>                 = first_inclusive
Let first_inclusive_absolutive           be   { [head:[object:[head:[agr:[person:first_inclusive]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[person:first_inclusive]]]
                                                       type:[transitive:-]]] }
Let first_inclusive_ergative             be    <head subject head agr person>    = first_inclusive
                                               <head type transitive>            = +
Let first_inclusive_subject              be    <head subject head agr person>    = first_inclusive
Let first_inclusive_object               be    <head object head agr person>     = first_inclusive
Let first_absolutive                     be   { [head:[object:[head:[agr:[person:first]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[person:first]]]
                                                       type:[transitive:-]]] }
Let first_ergative                       be    <head subject head agr person>    = first
                                               <head type transitive>            = +
Let first_object                         be    <head object head agr person>     = first
Let first_subject                        be    <head subject head agr person>    = first
Let firsthand                            be    <head infl evidentiality>         = firsthand
Let focus                                be    <head type focusmarked>           = +
Let focus-initial                        be    <head type focus-initial>         = +
Let focus-final                          be    <head type focus-final>           = +
Let focus_prefix                         be    <head type prefix focusmarked>    = +
Let focus_suffix                         be    <head type suffix focusmarked>    = +
Let future                               be    <head infl tense>                 = future
Let -future                              be    <head infl tense>                 = nonfuture
Let generic                              be    <head type generic>               = +
Let genitive                             be    <head case>                       = genitive
Let -genitive                            be    <head case>                       = {nominative accusative}
Let genitive.or.accusative               be    <head case>                       = {genitive accusative}
Let genitive.or.dative                   be    <head case>                       = {genitive dative}
Let genitive.or.nominative               be    <head case>                       = {genitive nominative}
Let genitive_prefix                      be    <head type prefix case>           = genitive
                                                   [genitive]
Let genitive_suffix                      be    <head type suffix case>           = genitive
                                                   [genitive]
Let gerund                               be    <head type gerund>                = +
Let goalVoice                            be    <head infl voice>                 = goal
Let habitual                             be    <head infl aspect>                = habitual
Let hearsay                              be    <head infl evidentiality>         = hearsay
Let human                                be    <head agr animacy>                = human
Let human_absolutive                     be   { [head:[object:[head:[agr:[animacy:human]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[animacy:human]]]
                                                       type:[transitive:-]]] }
Let human_ergative                       be    <head subject head agr animacy>   = human
                                               <head type transitive>            = +
Let human_object                         be    <head object head agr animacy>    = human
Let human_subject                        be    <head subject head agr animacy>   = human
Let -human                               be    <head agr animacy>                = nonhuman
Let -human_absolutive                    be   { [head:[object:[head:[agr:[animacy:nonhuman]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[animacy:nonhuman]]]
                                                       type:[transitive:-]]] }
Let -human_ergative                      be    <head subject head agr animacy>   = nonhuman
                                               <head type transitive>            = +
Let -human_object                        be    <head object head agr animacy>    = nonhuman
Let -human_subject                       be    <head subject head agr animacy>   = nonhuman
Let imperative                           be    <head infl mood>                  = imperative
Let imperfect                            be    <head infl aspect>                = imperfect
Let imperfective                         be    <head infl aspect>                = imperfective
Let inclusive                            be    <head agr person>                 = first_inclusive
Let incompletive                         be    <head infl aspect>                = incompletive 
Let indefinite                           be    <head type definite>              = -
                                               <head type relative>              = -
Let indefiniteAdv                        be    <head type definite>              = -
                                               <cat>                             = Adv
                                               <head type relative>              = -
Let indefinitePron                       be    <head type definite>              = -
                                               <head type pronoun>               = +
                                               <head type relative>              = -
Let indicative                           be    <head infl mood>                  = indicative
Let inferential                          be    <head infl evidentiality>         = inferential
Let infinitive                           be    <head infl finite>                = -
Let instrumental                         be    <head case>                       = instrumental
Let instrumentalVoice                    be    <head infl voice>                 = instrumental
Let interrogative                        be    <head infl mood>                  = interrogative
                                               <head type question>              = +
Let -interrogative                       be    <head type question>              = -
Let intransitive                         be    <head type transitive>            = -
Let irrealis                             be    <head infl mood>                  = irrealis
Let locative                             be    <head type locative>              = +
                                               <head type temporal>              = !-
Let locative_case                        be    <head case>                       = locative
Let locativeVoice                        be    <head infl voice>                 = locative
Let manner                               be    <head type manner>                = +
Let masculine                            be    <head agr gender>                 = masculine
Let masculine_absolutive                 be   { [head:[object:[head:[agr:[gender:masculine]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[gender:masculine]]]
                                                       type:[transitive:-]]] }
Let masculine_ergative                   be    <head subject head agr gender>    = masculine
                                               <head type transitive>            = +
Let masculine_object                     be    <head object head agr gender>     = masculine
Let masculine_subject                    be    <head subject head agr gender>    = masculine
Let mass                                 be    <head type mass>                  = +
Let modifies_Adj                         be    <head type modifies_Adj>          = +
Let modifies_Adv                         be    <head type modifies_Adv temporal> = +
                                               <head type modifies_Adv locative> = +
                                               <head type modifies_Adv manner>   = +
                                               <head type modifies_Adv reason>   = +
Let modifies_Adv-reason                  be    <head type modifies_Adv reason>   = -
                                               <head type modifies_Adv locative> = +
                                               <head type modifies_Adv manner>   = +
                                               <head type modifies_Adv temporal> = +
Let modifies_locative                    be    <head type modifies_Adv locative> = +
Let modifies_manner                      be    <head type modifies_Adv manner>   = +
Let modifies_NP                          be    <head type modifies_NP>           = +
Let modifies_PP                          be    <head type modifies_PP>           = +
Let modifies_Q                           be    <head type modifies_Q>            = +
Let modifies_reason                      be    <head type modifies_Adv reason>   = +
Let modifies_temporal                    be    <head type modifies_Adv temporal> = +
Let motion                               be    <head type motion>                = +
Let negative                             be    <head infl polarity>              = negative
Let negative_prefix                      be    <head type prefix negative>       = +
                                                   [negative]
Let negative_suffix                      be    <head type suffix negative>       = +
                                                   [negative]
Let negative-polarity                    be    <head type negative-polarity>     = +
                                                   [negative]
Let negative-polarity_prefix             be    <head type prefix negative-polarity> = +
                                                   [negative_prefix]
Let negative-polarity_suffix             be    <head type suffix negative-polarity> = +
                                                   [negative_suffix]
Let neuter                               be    <head agr gender>                 = neuter
Let neuter_absolutive                    be   { [head:[object:[head:[agr:[gender:neuter]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[gender:neuter]]]
                                                       type:[transitive:-]]] }
Let neuter_ergative                      be    <head subject head agr gender>    = neuter
                                               <head type transitive>            = +
Let neuter_object                        be    <head object head agr gender>     = neuter
Let neuter_subject                       be    <head subject head agr gender>    = neuter
Let nominative                           be    <head case>                       = nominative
Let -nominative                          be    <head case>                       = {accusative genitive}
Let nominative.or.accusative             be    <head case>                       = {nominative accusative}
Let nominative.or.genitive               be    <head case>                       = {nominative genitive}
Let nonwitness                           be    <head infl evidentiality>         = nonwitness
Let objectVoice                          be    <head infl voice>                 = objective
Let oblique                              be    <head type oblique>               = +
Let oblique_case                         be    <head case>                       = oblique
Let olfactory                            be    <head infl evidentiality>         = olfactory
Let participle                           be    <head type participle>            = +
Let particle                             be    <head type particle>              = +
                                               <head type locative>              = +
Let partitive                            be    <head type partitive>             = +
Let passive                              be    <head infl valence>               = passive
Let passive.optional                     be    <head infl valence>               = {passive active}
Let past                                 be    <head infl tense>                 =  past
Let -past                                be    <head infl tense>                 =  nonpast
Let perception                           be    <head type perception>            = +
Let perfect                              be    <head infl aspect>                = perfect
Let perfective                           be    <head infl aspect>                = perfective
Let plural                               be    <head agr number>                 = plural
Let plural_absolutive                    be   { [head:[object:[head:[agr:[number:plural]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[number:plural]]]
                                                       type:[transitive:-]]] }
Let plural_ergative                      be    <head subject head agr number>    = plural
                                               <head type transitive>            = +
Let plural_object                        be    <head object head agr number>     = plural
Let plural_subject                       be    <head subject head agr number>    = plural
Let poss_class_animal                    be    <head possessor head agr class>   = animal
Let poss_class_cylindrical               be    <head possessor head agr class>   = cylindrical
Let poss_class_insect                    be    <head possessor head agr class>   = insect
Let poss_class_liquid                    be    <head possessor head agr class>   = liquid
Let poss_class_other                     be    <head possessor head agr class>   = other
Let poss_class_round                     be    <head possessor head agr class>   = round
Let poss_class_spherical                 be    <head possessor head agr class>   = spherical
Let poss_class_tree                      be    <head possessor head agr class>   = tree
Let poss_class_wood                      be    <head possessor head agr class>   = wood
Let poss_class_1                         be    <head possessor head agr class>   = 1
Let poss_class_2                         be    <head possessor head agr class>   = 2
Let poss_class_3                         be    <head possessor head agr class>   = 3
Let poss_class_4                         be    <head possessor head agr class>   = 4
Let poss_class_5                         be    <head possessor head agr class>   = 5
Let poss_class_6                         be    <head possessor head agr class>   = 6
Let poss_class_7                         be    <head possessor head agr class>   = 7
Let poss_class_8                         be    <head possessor head agr class>   = 8
Let poss_class_9                         be    <head possessor head agr class>   = 9
Let poss_class_10                        be    <head possessor head agr class>   = 10
Let poss_class_11                        be    <head possessor head agr class>   = 11
Let poss_class_12                        be    <head possessor head agr class>   = 12
Let poss_class_13                        be    <head possessor head agr class>   = 13
Let poss_class_14                        be    <head possessor head agr class>   = 14
Let poss_class_15                        be    <head possessor head agr class>   = 15
Let poss_class_16                        be    <head possessor head agr class>   = 16
Let poss_class_17                        be    <head possessor head agr class>   = 17
Let poss_class_18                        be    <head possessor head agr class>   = 18
Let poss_class_19                        be    <head possessor head agr class>   = 19
Let poss_class_20                        be    <head possessor head agr class>   = 20
Let poss_class_21                        be    <head possessor head agr class>   = 21
Let poss_class_22                        be    <head possessor head agr class>   = 22
Let poss_class_23                        be    <head possessor head agr class>   = 23
Let poss_class_24                        be    <head possessor head agr class>   = 24
Let poss_class_25                        be    <head possessor head agr class>   = 25
Let poss_animate                         be    <head possessor head agr animacy> = animate
Let poss_dual                            be    <head possessor head agr number>  = dual
Let poss_exclusive                       be    <head possessor head agr person>  = first_exclusive
Let poss_feminine                        be    <head possessor head agr gender>  = feminine
Let poss_first                           be    <head possessor head agr person>  = first
Let poss_human                           be    <head possessor head agr animacy> = human
Let poss_inanimate                       be    <head possessor head agr animacy> = animate
Let poss_inclusive                       be    <head possessor head agr person>  = first_inclusive
Let poss_masculine                       be    <head possessor head agr gender>  = masculine
Let poss_neuter                          be    <head possessor head agr gender>  = neuter
Let poss_nonhuman                        be    <head possessor head agr animacy> = nonhuman
Let poss_plural                          be    <head possessor head agr number>  = plural
Let poss_second                          be    <head possessor head agr person>  = second
Let poss_singular                        be    <head possessor head agr number>  = singular
Let poss_third                           be    <head possessor head agr person>  = third 
Let poss_prefix                          be    <head type prefix poss>           = +
Let poss_suffix                          be    <head type suffix poss>           = +
Let possessed                            be    <head type possessed>             = +
Let possessive                           be    <head type possessive>            = +
Let potential                            be    <head infl aspect>                = potential
Let present                              be    <head infl tense>                 = present
Let progressive                          be    <head infl aspect>                = progressive
Let proper                               be    <head type proper>                = +
Let PP                                   be    <head type PP>                    = +
Let PP-final                             be    <head type PP-final>              = +
                                               <head type PP-initial>            = -
Let PP-initial                           be    <head type PP-initial>            = +
                                               <head type PP-final>              = -
Let P_prefix                             be    <head type prefix P>              = +
Let P_suffix                             be    <head type suffix P>              = +
Let purposive                            be    <head infl aspect>                = purposive
Let question                             be    <head type question>              = +
Let -question                            be    <head type question>              = -
Let QP-final                             be    <head type QP-final>              = +
                                               <head type QP-initial>            = -
Let QP-initial                           be    <head type QP-initial>            = +
                                               <head type QP-final>              = -
Let quantifier                           be    <head type quantifier>            = +
Let quantifier_prefix                    be    <head type prefix quantifier>     = +
Let quantifier_suffix                    be    <head type suffix quantifier>     = +
Let quotative                            be    <head infl evidentiality>         = quotative
Let reason                               be    <head type reason>                = +
Let realis                               be    <head infl mood>                  = realis
Let reciprocal                           be    <head type reciprocal>            = +
Let reflexive                            be    <head type reflexive>             = +
Let relative                             be    <head type relative>              = +
Let relative_prefix                      be    <head type prefix relative>       = +
Let relative_suffix                      be    <head type suffix relative>       = +
Let reportative                          be    <head infl evidentiality>         = reportative
Let root                                 be    <head type root>                  = +
Let +root                                be    <head type root>                  = +
Let -root                                be    <head type root>                  = -
Let second                               be    <head agr person>                 = second
Let second_absolutive                    be   { [head:[object:[head:[agr:[person:second]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[person:second]]]
                                                       type:[transitive:-]]] }
Let second_ergative                      be    <head subject head agr person>    = second
                                               <head type transitive>            = +
Let second_object                        be    <head object head agr person>     = second
Let second_subject                       be    <head subject head agr person>    = second
Let secondhand                           be    <head infl evidentiality>         = secondhand
Let sentential                           be    <head type sentential>            = +
Let sentential_A                         be    <head type sentential>            = +
Let sentential_CP                        be    <head embedded cat>               = CP
                                               <head type sentential>            = +
Let sentential_IP                        be    <head embedded cat>               = IP
                                               <head type sentential>            = + 
Let sentential_IPpro-dropOrCP            be   { [head:[embedded:[cat:IP
                                                                 head:[subject:[head:[type:[pro-drop:+]]]]]
                                                       type:[sentential:+]]]
                                                [head:[embedded:[cat:CP
                                                                 head:[subject:[head:[type:[pro-drop:-]]]]]
                                                       type:[sentential:+]]] }
Let sentential_finite_CP                 be    <head embedded cat>               = CP
                                               <head embedded head infl finite>  = +
                                               <head type sentential>            = +
Let sentential_finite_IP                 be    <head embedded cat>               = IP
                                               <head embedded head infl finite>  = +
                                               <head type sentential>            = +
Let sentential_CP_or_-finiteIP           be   { [head:[embedded:[cat:CP
                                                                 head:[infl:[finite:+]]]
                                                       type:[sentential:+]]]
                                                [head:[embedded:[cat:IP
                                                                 head:[infl:[finite:-]        
                                                                       type:[verbheaded:+]]]
                                                       type:[sentential:+]]] }  
Let sentential_CP_or_-finiteIP_or_transitive be {[head:[embedded:[cat:CP
                                                                  head:[infl:[finite:+]]]
                                                        type:[sentential:+]]]
                                                 [head:[embedded:[cat:IP
                                                                  head:[infl:[finite:-]        
                                                                        type:[verbheaded:+]]]
                                                        type:[sentential:+]]] 
                                                 [head:[type:[sentential:-
                                                              transitive:+]
                                                        embedded:[cat:none]]] }                            
Let sentential_finite                    be   { [head:[type:[sentential:+]
                                                       embedded:[cat:IP
                                                                 head:[infl:[finite:+]]]]]
                                                [head:[type:[sentential:+]
                                                       embedded:[cat:CP
                                                                 head:[infl:[finite:+]]]]] } 
Let sentential_finite_or_transitive      be   { [head:[type:[sentential:+]
                                                       embedded:[cat:IP
                                                                 head:[infl:[finite:+]]]]]
                                                [head:[type:[sentential:+]
                                                       embedded:[cat:CP
                                                                 head:[infl:[finite:+]]]]]
                                                [head:[type:[sentential:-
                                                             transitive:+]
                                                       embedded:[cat:none]]] } 
Let sentential_-finite                   be   { [head:[type:[sentential:+]
                                                       embedded:[cat:IP
                                                                 head:[infl:[finite:-]
                                                                       type:[pro-drop:+]]]]]
                                                [head:[type:[sentential:+]
                                                       embedded:[cat:CP
                                                                 head:[infl:[finite:-]]]]] } 
Let sentential_-finite_or_transitive     be   { [head:[type:[sentential:+]
                                                             embedded:[cat:IP
                                                                       head:[infl:[finite:-]
                                                                             type:[pro-drop:+]]]]]
                                                 [head:[type:[sentential:+]
                                                              embedded:[cat:CP
                                                                        head:[infl:[finite:-]]]]]
                                                 [head:[type:[sentential:-
                                                              transitive:+]
                                                        embedded:[cat:none]]] } 
Let sentential_-finiteIP                 be      [head:[type:[sentential:+]
                                                        embedded:[cat:IP
                                                                  head:[infl:[finite:-]        
                                                                        type:[verbheaded:+]]]]]
Let sentential_-finiteIP_or_transitive   be    { [head:[type:[sentential:+]
                                                        embedded:[cat:IP
                                                                  head:[infl:[finite:-]        
                                                                        type:[verbheaded:+]]]]]
                                                 [head:[type:[sentential:-
                                                              transitive:+]
                                                        embedded:[cat:none]]] }
Let sentential_-finiteIPpro-drop         be      [head:[type:[sentential:+]
                                                        embedded:[cat:IP
                                                                  head:[infl:[finite:-]
                                                                        type:[pro-drop:+]]]]]
Let sentential_-finiteIPpro-drop_or_transitive be {[head:[type:[sentential:+]
                                                          embedded:[cat:IP
                                                                    head:[infl:[finite:-]
                                                                          type:[pro-drop:+]]]]]
                                                   [head:[type:[sentential:-
                                                                transitive:+]
                                                          embedded:[cat:none]]] }  
Let sentential_-finiteIPpro-drop_or_transitive_or_question be  
                                               { [head:[type:[sentential:+]
                                                        embedded:[cat:IP
                                                                  head:[infl:[finite:-]
                                                                        type:[pro-drop:+]]]]]
                                                 [head:[type:[sentential:+]
                                                        embedded:[cat:CP
                                                                  head:[type:[question:+]]]]] 
                                                 [head:[type:[sentential:-
                                                              transitive:+]
                                                        embedded:[cat:none]]] }  
Let sentential_perfective                be    <head embedded head infl aspect>  = perfective
                                               <head type sentential>            = +
Let sentential_pro-drop                  be    <head embedded head subject head type pro-drop> = +
                                               <head type sentential>            = +
Let sentential_question                  be    <head embedded head type question> = +
                                               <head type sentential>            = +
Let sentential_-question                 be    <head embedded head type question> = -
                                               <head type sentential>            = +
Let sentential_raising                   be   { [head:[type:[sentential:+
                                                             transitive:+]
                                                       embedded:[cat:IP
                                                                 head:[subject:[head:[type:[pro-drop:+]]]
                                                                       infl:[finite:-]]]]]
                                                [head:[type:[sentential:+
                                                             transitive:+]
                                                       embedded:[cat:CP
                                                                 head:[subject:[head:[type:[pro-drop:-]]]
                                                                       infl:[finite:+]]]]] }
Let sentential_raising_or_copular        be   { [head:[type:[sentential:+
                                                             transitive:+]
                                                       embedded:[cat:IP
                                                                 head:[subject:[head:[type:[pro-drop:+]]]
                                                                       infl:[finite:-]]]]]
                                                [head:[type:[sentential:+
                                                             transitive:+]
                                                       embedded:[cat:CP
                                                                 head:[subject:[head:[type:[pro-drop:-]]]
                                                                       infl:[finite:+]]]]] 
                                                [head:[type:[sentential:-
                                                             transitive:-
                                                             copular:+]
                                                       embedded:[cat:none]]] } 
Let sentential_raising_or_perception     be   { [head:[type:[sentential:+
                                                             transitive:+]
                                                       embedded:[cat:IP
                                                                 head:[subject:[head:[type:[pro-drop:+]]]
                                                                       infl:[finite:-]]]]]
                                                [head:[type:[sentential:+
                                                             transitive:+]
                                                       embedded:[cat:CP
                                                                 head:[subject:[head:[type:[pro-drop:-]]]
                                                                       infl:[finite:+]]]]] 
                                                [head:[type:[sentential:-
                                                             transitive:-
                                                             perception:+]
                                                       embedded:[cat:none]]] } 
Let sentential_subjunctive               be    <head embedded head infl mood>    = irrealis
                                               <head type sentential>            = +
Let sentential_with_object               be    <head type sentential_with_object> = +
                                               <head embedded cat>               = {IP CP}
Let singular                             be    <head agr number>                 = singular
Let singular_absolutive                  be   { [head:[object:[head:[agr:[number:singular]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[number:singular]]]
                                                       type:[transitive:-]]] }
Let singular_ergative                    be    <head subject head agr number>    = singular
                                               <head type transitive>            = +
Let singular_object                      be    <head object head agr number>     = singular
Let singular_subject                     be    <head subject head agr number>    = singular
Let speech_DP                            be    <head type speech_DP>             = +    
                                               <head embedded cat>               = {IP CP}  
Let speech_DP_or_transitive              be   { [head:[type:[speech_DP:+]
                                                       embedded:[cat:IP]]]
                                                [head:[type:[speech_DP:+]
                                                       embedded:[cat:CP]]]
                                                [head:[type:[transitive:+]
                                                       embedded:[cat:none]
                                                       object:[head:[type:[relative:-]]]]] }
Let speech_DPwh                          be    <head type speech_DP>             = +    
                                               <head embedded cat>               = CP
                                               <head embedded head type wh>      = +
                                               <head embedded head type question> = +
Let speech_DPwh_or_transitive            be   { [head:[type:[speech_DP:+]    
                                                       embedded:[cat:CP
                                                                 head:[type:[wh:+
                                                                             question:+]]]]]
                                                [head:[type:[transitive:+]
                                                       embedded:[cat:none]
                                                       object:[head:[type:[relative:-]]]]] }
Let speech_PP                            be    <head type speech_PP>             = +   
                                               <head embedded cat>               = {IP CP Greet Excl Intj}
Let speech_PP_or_transitive              be   { [head:[type:[speech_PP:+]      
                                                       embedded:[cat:IP]]]
                                                [head:[type:[speech_PP:+]      
                                                       embedded:[cat:CP]]]
                                                [head:[type:[speech_PP:+]      
                                                       embedded:[cat:Greet]]]
                                                [head:[type:[speech_PP:+]      
                                                       embedded:[cat:Excl]]]
                                                [head:[type:[speech_PP:+]      
                                                       embedded:[cat:Intj]]]
                                                [head:[type:[transitive:+]
                                                       embedded:[cat:none]
                                                       object:[head:[type:[relative:-]]]]] }  
Let stative                              be    <head infl aspect>                = stative
Let subjunctive                          be    <head infl mood>                  = subjunctive
Let subjunctive_conditional              be    <head type subjunctive_conditional> = +
Let subjunctive_conditional_prefix       be    <head type prefix subjunctive_conditional> = +
Let subjunctive_conditional_suffix       be    <head type suffix subjunctive_conditional> = +
Let superlative                          be    <head type superlative>           = +
Let superlative_prefix                   be    <head type prefix superlative>    = +
Let superlative_suffix                   be    <head type suffix superlative>    = +
Let takes_Adv                            be    <head type takes_Adv>             = +
Let takes_DP                             be    <head type takes_DP>              = +
Let takes_P                              be    <head type takes_P>               = +
Let temporal                             be    <head type temporal>              = +
                                               <head type locative>              = !-
Let third                                be    <head agr person>                 = third
Let third_absolutive                     be   { [head:[object:[head:[agr:[person:third]]]
                                                       type:[transitive:+]]]
                                                [head:[subject:[head:[agr:[person:third]]]
                                                       type:[transitive:-]]] }
Let third_ergative                       be    <head subject head agr person>    = third
                                               <head type transitive>            = +
Let third_object                         be    <head object head agr person>     = third
Let third_subject                        be    <head subject head agr person>    = third
Let -third_singular_subject              be    { [head:[subject:[head:[agr:[person:first]]]]]
                                                 [head:[subject:[head:[agr:[person:second]]]]]
                                                 [head:[subject:[head:[agr:[person:third
                                                                            number:plural]]]]] }            
Let thirdhand                            be    <head infl evidentiality>         = thirdhand
Let topic                                be    <head type topic>                 = +
Let topic-initial                        be    <head type topic-initial>         = +
Let topic-final                          be    <head type topic-final>           = +
Let topic_prefix                         be    <head type prefix topic>          = +
Let topic_suffix                         be    <head type suffix topic>          = +
Let transitive                           be    <head type transitive>            = +
Let transitive_motion                    be    <head type transitive_motion>     = +
Let unreal                               be    <head infl aspect>                = unreal
Let visual                               be    <head infl evidentiality>         = visual
Let vocative                             be    <head case>                       = vocative
Let witness                              be    <head infl evidentiality>         = witness
Let wh                                   be    <head type wh>                    = +
Let -wh                                  be    <head type wh>                    = -
Let whQ                                  be    <head type whQ>                   = +
Let whQ_prefix                           be    <head type prefix whQ>            = +
Let whQ_suffix                           be    <head type suffix whQ>            = +
Let YNQ                                  be    <head type YNQ>                   = +
Let YNQ_prefix                           be    <head type prefix YNQ>            = +
Let YNQ_suffix                           be    <head type suffix YNQ>            = +
 
        
Let Adj                                  be    <cat>                             = !Adj
                                               <head type ordinal>               = !-
                                               <head type wh>                    = !-
                                               <head type sentential>            = !-
                                               <head type clausal-comp>          = !-
                                               <head type focusmarked>           = !-
                                               <head type subject_focused>       = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-
                                               <head type takes_P>               = !-
                                               <head type equalAdj>              = !-
                                               <head type comparative>           = !-
                                               <head type superlative>           = !-     
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                                      
Let Adv                                  be    <cat>                             = !Adv
                                               <head infl polarity>              = !positive
                                               <head type wh>                    = !-
                                               <head type manner>                = !-
                                               <head type locative>              = !-
                                               <head type temporal>              = !-
                                               <head type definite>              = !+
                                               <head type existential>           = !-
                                               <head type takes_Adv>             = !-
                                               <head type takes_DP>              = !-
                                               <head type modifies_Adj>          = !-
                                               <head type sentential>            = !-
                                               <head embedded cat>               = !none
                                               <head type subject_focused>       = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let Art                                  be    <cat>                             = !Art
                                               <head type wh>                    = !-
                                               <head type focusmarked>           = !-
                                               <head type definite>              = !+
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let Aux                                  be    <cat>                             = !Aux
                                               <head infl valence>               = !active
                                               <head infl polarity>              = !positive
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type existential>           = -
                                               <head infl finite>                = !+
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-   
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                                       
Let C                                    be    <cat>                             = !C
                                               <head type question>              = !-
                                               <head type relative>              = !-
                                               <head embedded cat>               = !none
                                               <head type comma>                 = !-   
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let Case                                 be    <cat>                             = !Case
                                               <head type comma>                 = !-       
                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                                       
Let Class                                be    <cat>                             = !Class
                                               <head type comma>                 = !-
                                               <head type definite>              = !+ 
                                               <head type pronoun>               = -        
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                                        
Let Cond                                 be    <cat>                             = !Cond
                                               <head infl mood>                  = !conditional
                                               <head type subjunctive_conditional> = !-
                                               <head type comma>                 = !-       
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-


Let Conj                                 be    <cat>                             = !Conj
                                               <head infl polarity>              = !positive
                                               <head agr number>                 = !singular
                                               <head type comma>                 = !-
                                               <head type comparative>           = !-
                                               <head type compareAdj>            = !-
                                               <head type compareN>              = !-  
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                                         
Let Conseq                               be    <cat>                             = !Conseq
                                               <head type comma>                 = !-       
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                         
Let Deg                                  be    <cat>                             = !Deg
                                               <head infl polarity>              = !positive
                                               <head type modifies_Adj>          = !-
                                               <head type modifies_Adv temporal> = !-
                                               <head type modifies_Adv locative> = !-
                                               <head type modifies_Adv manner>   = !-
                                               <head type modifies_Adv reason>   = !-
                                               <head type modifies_NP>           = !-
                                               <head type modifies_PP>           = !-
                                               <head type modifies_Q>            = !-
                                               <head type quantifier>            = !-
                                               <head type wh>                    = !-
                                               <head type relative>              = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-
                                               <head type comparative>           = !-
                                               <head type equalAdj>              = !-
                                               <head type equalN>                = !-
                                               <head type superlative>           = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                                                                             
Let Dem                                  be    <cat>                             = !Dem
                                               <head infl polarity>              = !positive
                                               <head type wh>                    = !-
                                               <head agr person>                 = !third
                                               <head type relative>              = !-
                                               <head type temporal>              = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type emphatic>              = !-
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let Det                                  be    <cat>                             = !Det
                                               <head type wh>                    = !-
                                               <head agr person>                 = !third
                                               <head type relative>              = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-   
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let Excl                                 be    <cat>                             = !Excl
                                               <head type comma>                 = !-        
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               
                                               
Let FocusM                               be    <cat>                             = !FocusM
                                               <head type comma>                 = !-        
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                         
Let Greet                                be    <cat>                             = !Greet
                                               <head type comma>                 = !-       
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-


Let Indef                                be    <cat>                             = !Indef
                                               <head type comma>                 = !-       
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-


Let InitialConj                          be    <cat>                             = !InitConj
                                               <head type comma>                 = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-


Let Intj                                 be    <cat>                             = !Intj
                                               <head type comma>                 = !-       
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                         
Let N                                    be    <cat>                             = !N
                                               <head infl polarity>              = !positive
                                               <head agr person>                 = !third
                                               <head agr animacy>                = !inanimate
                                               <head possessor head agr person>  = !none
                                               <head type wh>                    = -
                                               <head type reciprocal>            = !-
                                               <head type reflexive>             = !-
                                               <head type sentential>            = !-
                                               <head type proper>                = !-
                                               <head type relative>              = !-
                                               <head type mass>                  = !-
                                               <head type temporal>              = !-
                                               <head embedded cat>               = !none
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type generic>               = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-    
                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head agr number>                 = !singular

                                               <head agr gender>                 = !masculine

                
Let Neg                                  be    <cat>                             = !Neg
                                               <head infl polarity>              = negative
                                               <head type comma>                 = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type topic>                 = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                                       
Let Num                                  be    <cat>                             = !Num
                                               <head infl polarity>              = !positive
                                               <head type ordinal>               = !-
                                               <head type wh>                    = !-
                                               <head agr number>                 = !plural
                                               <head type relative>              = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type quantifier>            = +
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-      
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                               <head type DP-final>              = !+
                                               <head type DP-initial>            = !-


Let ordinal                              be    <cat>                             = Num
                                               <head type ordinal>               = +
                                               <head agr number>                 = !plural
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-        
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                                       
Let P                                    be    <cat>                             = !P
                                               <head infl valence>               = !active
                                               <head type wh>                    = -
                                               <head type partitive>             = !-
                                               <head type temporal>              = !-
                                               <head type sentential>            = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type particle>              = !-
                                               <head type comma>                 = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                                       
Let Poss                                 be    <cat>                             = !Poss
                                                   [genitive]
                                               <head type comma>                 = !-   
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type prefix relative>       = !-
 
                                               <head type suffix relative>       = !-

                                                       
Let Poss_ergative                        be    <cat>                             = !Poss
                                                   [ergative]
                                               <head type comma>                 = !-    
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                                       
Let Poss_absolutive                      be    <cat>                             = !Poss
                                                   [absolutive]
                                               <head type comma>                 = !-    
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                                       
Let Pron                                 be    <cat>                             = !Pron
                                               <head infl polarity>              = !positive
                                               <head type wh>                    = !-
                                               <head agr animacy>                = !animate
                                               <head type reciprocal>            = !-
                                               <head type reflexive>             = !-
                                               <head type possessive>            = !-
                                               <head type relative>              = !-
                                               <head type temporal>              = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = +
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type emphatic>              = !-
                                               <head type locative>              = !-
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type PP>                    = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                               <head agr number>                 = !singular

                                               <head agr gender>                 = !masculine

                
Let PropN                                be    <cat>                             = !N
                                               <head infl polarity>              = !positive
                                               <head agr animacy>                = !animate
                                               <head agr person>                 = !third
                                               <head possessor head agr person>  = !none
                                               <head type wh>                    = -
                                               <head type proper>                = +
                                               <head type reciprocal>            = !-
                                               <head type reflexive>             = !-
                                               <head type sentential>            = !-
                                               <head type relative>              = !-
                                               <head type mass>                  = !-
                                               <head type temporal>              = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head agr number>                 = !singular

                                               <head agr gender>                 = !masculine


Let Q                                    be    <cat>                             = !Q
                                               <head infl polarity>              = !positive
                                               <head type wh>                    = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type quantifier>            = +
                                               <head type comma>                 = !- 
                                               <head type topic>                 = !-
                                               <head type modifies_NP>           = !-      
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

      
Let TopicM                               be    <cat>                             = !TopicM
                                               <head type pronoun>               = -
                                               <head type comma>                 = !-       
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

            
Let V                                    be    <cat>                             = !V
                                               <head adjoinedVP>                 = -
                                               <head adverbialVP>                = -
                                               <head embedded cat>               = !none
                                               <head infl valence>               = !active
                                               <head infl finite>                = !+
                                               <head infl polarity>              = !positive
                                               <head type auxiliary-VP>          = -
                                               <head type auxiliary-I'>          = -
                                               <head type auxiliary-C'>          = -
                                               <head type sentential>            = !-
                                               <head type sentential_with_object> = !-
                                               <head type ditransitive>          = !-
                                               <head type causative_syntax>      = !-
                                               <head type copular>               = !-
                                               <head type existential>           = !-
                                               <head type ordinal>               = !-
                                               <head type perception>            = !-
                                               <head type motion>                = !-
                                               <head type transitive_motion>     = !-
                                               <head type reciprocal>            = !-
                                               <head type reflexive>             = !-
                                               <head type gerund>                = !-
                                               <head type participle>            = !-
                                               <head type focusmarked>           = !-
                                               <head type subject_focused>       = !-
                                               <head type pronoun-fronted>       = !-
                                               <head type comma>                 = !-
                                               <head type speech_DP>             = !-
                                               <head type speech_PP>             = !-
                                               <head type topic>                 = !-
                                               <head type takes_P>               = !-     
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix conditional>    = !-

                                               <head type suffix subjunctive_conditional> = !-

                                               <head infl voice>                 = !none
       
  
               
                     
Let makeAdj                              be     <cat>                            = Adj
                                                <head type ordinal>              = !-
                                                <head type wh>                   = !-
                                                <head type sentential>           = !-
                                                <head type clausal-comp>         = !-
                                                <head type focusmarked>          = !-
                                                <head type subject_focused>      = !-
                                                <head type gerund>               = -
                                                <head type participle>           = -
                                                <head type comma>                = !-
                                                <head type topic>                = !-
                                                <head type takes_P>              = !-
                                                <head type equalAdj>             = !-
                                                <head type comparative>          = !-
                                                <head type superlative>          = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeAdv                              be    <cat>                             = Adv
                                               <head infl polarity>              = !positive
                                               <head type wh>                    = !-
                                               <head type manner>                = !-
                                               <head type locative>              = !-
                                               <head type temporal>              = !-
                                               <head type definite>              = !+
                                               <head type existential>           = !-
                                               <head type takes_Adv>             = !-
                                               <head type takes_DP>              = !-
                                               <head type modifies_Adj>          = !-
                                               <head type sentential>            = !-
                                               <head type subject_focused>       = !-
                                               <head embedded cat>               = !none
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-    
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeArt                              be    <cat>                             = Art
                                               <head type wh>                    = !-
                                               <head type focusmarked>           = !-
                                               <head type definite>              = !+
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-     
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeAux                              be    <cat>                             = Aux
                                               <head infl valence>               = !active
                                               <head infl polarity>              = !positive
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type existential>           = -
                                               <head infl finite>                = !+
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-     
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeC                                be    <cat>                             = C
                                               <head type question>              = !-
                                               <head type relative>              = !-
                                               <head embedded cat>               = !none
                                               <head type comma>                 = !-     
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeCase                             be    <cat>                             = Case
                                               <head type comma>                 = !-      
                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeClass                            be    <cat>                             = Class
                                               <head type comma>                 = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -      
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeCond                             be    <cat>                             = Cond
                                               <head infl mood>                  = !conditional
                                               <head type subjunctive_conditional> = !-
                                               <head type comma>                 = !-      
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

            
Let makeConj                             be    <cat>                             = Conj
                                               <head infl polarity>              = !positive
                                               <head agr number>                 = !singular
                                               <head type comma>                 = !-
                                               <head type comparative>           = !-
                                               <head type compareAdj>            = !-
                                               <head type compareN>              = !-      
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeConseq                           be    <cat>                             = Conseq
                                               <head type comma>                 = !-      
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-


Let makeDeg                              be    <cat>                             = Deg
                                               <head infl polarity>              =!positive
                                               <head type modifies_Adj>          = !-
                                               <head type modifies_Adv temporal> = !-
                                               <head type modifies_Adv locative> = !-
                                               <head type modifies_Adv manner>   = !-
                                               <head type modifies_Adv reason>   = !-
                                               <head type modifies_NP>           = !-
                                               <head type modifies_PP>           = !-
                                               <head type modifies_Q>            = !-
                                               <head type quantifier>            = !-
                                               <head type wh>                    = !-
                                               <head type relative>              = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-
                                               <head type comparative>           = !-
                                               <head type equalAdj>              = !-
                                               <head type equalN>                = !-
                                               <head type superlative>           = !-     
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeDem                              be    <cat>                             = Dem
                                               <head infl polarity>              = !positive
                                               <head type wh>                    = !-
                                               <head agr person>                 = !third
                                               <head type relative>              = !-
                                               <head type temporal>              = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type emphatic>              = !-
                                               <head type pronoun>               = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-      
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeDet                              be    <cat>                             = Det
                                               <head type wh>                    = !-
                                               <head agr person>                 = !third
                                               <head type relative>              = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeExcl                             be    <cat>                             = Excl
                                               <head type comma>                 = !-      
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

            
Let makeFocusM                           be    <cat>                             = FocusM
                                               <head type comma>                 = !-       
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

            
Let makeGreet                            be    <cat>                             = Greet
                                               <head type comma>                 = !-       
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-


Let makeIndef                            be    <cat>                             = Indef
                                               <head type comma>                 = !-      
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-


Let makeInitialConj                      be    <cat>                             = InitConj
                                               <head type comma>                 = !-      
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-


Let makeIntj                             be    <cat>                             = Intj
                                               <head type comma>                 = !-      
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-


Let makeN                                be    <cat>                             = N
                                               <head infl polarity>              = !positive
                                               <head agr person>                 = !third
                                               <head agr animacy>                = !inanimate
                                               <head possessor head agr person>  = !none
                                               <head type wh>                    = -
                                               <head type reciprocal>            = !-
                                               <head type reflexive>             = !-
                                               <head type sentential>            = !-
                                               <head type proper>                = !-
                                               <head type relative>              = !-
                                               <head type mass>                  = !-
                                               <head type temporal>              = !-
                                               <head embedded cat>               = !none
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type generic>               = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-   
                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head agr number>                 = !singular
       
                                               <head agr gender>                 = !masculine
       

Let makeNeg                              be    <cat>                             = Neg
                                               <head infl polarity>              = negative
                                               <head type comma>                 = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type topic>                 = !-      
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type suffix poss>           = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeNum                              be    <cat>                             = Num
                                               <head infl polarity>              = !positive
                                               <head type ordinal>               = !-
                                               <head type wh>                    = !-
                                               <head agr number>                 = !plural
                                               <head type relative>              = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type quantifier>            = +
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-      
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                               <head type DP-final>              = !+
                                               <head type DP-initial>            = !-
       

Let makeP                                be    <cat>                             = P
                                               <head infl valence>               = !active
                                               <head type wh>                    = -
                                               <head type partitive>             = !-
                                               <head type temporal>              = !-
                                               <head type sentential>            = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type particle>              = !-
                                               <head type comma>                 = !-      
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makePoss                             be    <cat>                             = Poss
                                                   [genitive]
                                               <head type comma>                 = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makePoss_ergative                    be    <cat>                             = Poss
                                                   [ergative]
                                               <head type comma>                 = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makePoss_absolutive                  be    <cat>                             = !Poss
                                                   [absolutive]
                                               <head type comma>                 = !-      
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makePron                             be    <cat>                             = Pron
                                               <head infl polarity>              = !positive
                                               <head type wh>                    = !-
                                               <head agr animacy>                = !animate
                                               <head type reciprocal>            = !-
                                               <head type reflexive>             = !-
                                               <head type possessive>            = !-
                                               <head type relative>              = !-
                                               <head type temporal>              = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = +
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type emphatic>              = !-
                                               <head type locative>              = !-
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-      
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                               <head agr number>                 = !singular
       
                                               <head agr gender>                 = !masculine
       

Let makePropN                            be    <cat>                             = N
                                               <head infl polarity>              = !positive
                                               <head agr animacy>                = !animate
                                               <head agr person>                 = !third
                                               <head possessor head agr person>  = !none
                                               <head type wh>                    = -
                                               <head type proper>                = +
                                               <head type reciprocal>            = !-
                                               <head type reflexive>             = !-
                                               <head type sentential>            = !-
                                               <head type relative>              = !-
                                               <head type mass>                  = !-
                                               <head type temporal>              = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type comma>                 = !-
                                               <head type topic>                 = !-      
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head agr number>                 = !singular
       
                                               <head agr gender>                 = !masculine
       

Let makeQ                                be    <cat>                             = Q
                                               <head infl polarity>              = !positive
                                               <head type wh>                    = !-
                                               <head type definite>              = !+
                                               <head type pronoun>               = -
                                               <head type focusmarked>           = !-
                                               <head type gerund>                = -
                                               <head type participle>            = -
                                               <head type quantifier>            = +
                                               <head type comma>                 = !- 
                                               <head type topic>                 = !-
                                               <head type modifies_NP>           = !-     
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix copular>        = !-
                                               <head type suffix copular>        = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix poss>           = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-


Let makeTopicM                           be    <cat>                             = TopicM
                                               <head type pronoun>               = -
                                               <head type comma>                 = !-      
                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-


Let makeV                                be    <cat>                             = V
                                               <head adjoinedVP>                 = -
                                               <head adverbialVP>                = -
                                               <head embedded cat>               = !none
                                               <head infl valence>               = !active
                                               <head infl finite>                = !+
                                               <head infl polarity>              = !positive
                                               <head type auxiliary-VP>          = -
                                               <head type auxiliary-I'>          = -
                                               <head type auxiliary-C'>          = -
                                               <head type sentential>            = !-
                                               <head type sentential_with_object> = !-
                                               <head type ditransitive>          = !-
                                               <head type causative_syntax>      = !-
                                               <head type copular>               = !-
                                               <head type existential>           = !-
                                               <head type ordinal>               = !-
                                               <head type perception>            = !-
                                               <head type motion>                = !-
                                               <head type transitive_motion>     = !-
                                               <head type reciprocal>            = !-
                                               <head type reflexive>             = !-
                                               <head type gerund>                = !-
                                               <head type participle>            = !-
                                               <head type focusmarked>           = !-
                                               <head type subject_focused>       = !-
                                               <head type pronoun-fronted>       = !-
                                               <head type comma>                 = !-
                                               <head type speech_DP>             = !-
                                               <head type speech_PP>             = !-
                                               <head type topic>                 = !-
                                               <head type takes_P>               = !-       
                                               <head type prefix case>           = !none

                                               <head type suffix case>           = !none

                                               <head type prefix comparative>    = !-
                                               <head type suffix comparative>    = !-
                                               <head type prefix superlative>    = !-
                                               <head type suffix superlative>    = !-

                                               <head type prefix conj>           = !-

                                               <head type suffix conj>           = !-

                                               <head type prefix comp>           = !-

                                               <head type prefix focusmarked>    = !-
                                               <head type suffix focusmarked>    = !-

                                               <head type PP>                    = !-

                                               <head type prefix relative>       = !-

                                               <head type suffix relative>       = !-

                                               <head type prefix negative>       = !-

                                               <head type suffix negative>       = !-

                                               <head type suffix conditional>    = !-

                                               <head type suffix subjunctive_conditional> = !-

                                               <head infl voice>                 = !none
    
Let passive_aux_required be <head type auxiliary_required> = +   

rule {S option start.symbolCP  - optional elements initial}
S = (Conj) (PP_1) ((AdvP_2) AdvP_1)  (PP_2) CP 
          <S head> = <CP head>
          <S head adverbial> <= <AdvP_1>
          <S head type topic> = -
          <CP head type root> = +
          <Conj head type conjoins_IP> = +
          <Conj head type comparative> = -
          <Conj head type compareAdj> = -
          <Conj head type compareN> = -
          <AdvP_1 head type manner> = -
          <AdvP_2 head type manner> = -
          <AdvP_1 head type wh> = -
          <AdvP_2 head type wh> = -
          <AdvP_1 head type existential> = -
          <AdvP_2 head type existential> = -
          <CP head> == [type:[auxiliary-VP:+]] -> ~[type:[auxiliary-C':-
                                                          auxiliary-I':-]]
          <CP head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                auxiliary-I':-
                                                                auxiliary-VP:-]]
          <S option> = start.symbolCP

rule {S option start.symbolIP  - optional elements initial}
S = (Conj) (PP_1) ((AdvP_2) AdvP_1)  (PP_2) IP 
          <S head> = <IP head>
          <S head adverbial> <= <AdvP_1>
          <S head type topic> = -
          <IP head type root> = +
          <IP head type question> = -
          <IP head fronted> = none
          <IP head type auxiliary-C'> = -
          <Conj head type conjoins_IP> = +
          <Conj head type comparative> = -
          <Conj head type compareAdj> = -
          <Conj head type compareN> = -
          <AdvP_1 head type manner> = -
          <AdvP_2 head type manner> = -
          <AdvP_1 head type wh> = -
          <AdvP_2 head type wh> = -
          <AdvP_1 head type existential> = -
          <AdvP_2 head type existential> = -
          <IP head object> == ~[cat:FocusP]
          <IP head indirectobject> == ~[cat:FocusP]
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]]
          <IP head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                auxiliary-I':-
                                                                auxiliary-VP:-]]
          <S option> = start.symbolIP

rule {S option start.topicinitCP  - topic initial, optional elements initial}
S = (Conj) (PP_1) ((AdvP_2) AdvP_1) TopicP  (PP_2)  CP
          <S head> = <CP head>
          <S head topicP> = <TopicP>
          <S head adverbial> <= <AdvP_1>
          <CP head type root> = +
          <CP head type existential> = -
          <Conj head type conjoins_IP> = +
          <Conj head type comparative> = -
          <Conj head type compareAdj> = -
          <Conj head type compareN> = -
          <AdvP_1 head type manner> = -
          <AdvP_2 head type manner> = -
          <AdvP_1 head type wh> = -
          <AdvP_2 head type wh> = -
          <AdvP_1 head type existential> = -
          <AdvP_2 head type existential> = -
          <S head type topic> <= +
|         <TopicP head type comma> = +         | activate this constraint if/when you make comma a word-formation character
          <CP head> == [type:[auxiliary-VP:+]] -> ~[type:[auxiliary-C':-
                                                          auxiliary-I':-]]
          <CP head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                auxiliary-I':-
                                                                auxiliary-VP:-]]
          <S option> = start.topicinitCP

rule {S option start.topicinitIP  - topic initial, optional elements initial}
S = (Conj) (PP_1) ((AdvP_2) AdvP_1) TopicP  (PP_2)  IP
          <S head> = <IP head>
          <S head topicP> = <TopicP>
          <S head adverbial> <= <AdvP_1>
          <IP head type root> = +
          <IP head type existential> = -
          <IP head type question> = -
          <IP head fronted> = none
          <IP head type auxiliary-C'> = -
          <Conj head type conjoins_IP> = +
          <Conj head type comparative> = -
          <Conj head type compareAdj> = -
          <Conj head type compareN> = -
          <AdvP_1 head type manner> = -
          <AdvP_2 head type manner> = -
          <AdvP_1 head type wh> = -
          <AdvP_2 head type wh> = -
          <AdvP_1 head type existential> = -
          <AdvP_2 head type existential> = -
          <S head type topic> <= +
|         <TopicP head type comma> = +         | activate this constraint if/when you make comma a word-formation character
          <IP head object> == ~[cat:FocusP]
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]]
          <IP head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                auxiliary-I':-
                                                                auxiliary-VP:-]]
          <S option> = start.topicinitIP

rule {S option conjoinedS containing a topic}
S = S_1 Conj S_2
          <S head> = <S_2 head>
         {<S_1 head type topic> = +
         /<S_2 head type topic> = +
         }
          <Conj head type conjoins_IP> = +
          <Conj head type comparative> = -
          <Conj head type compareAdj> = -
          <Conj head type compareN> = -
          <S_2 head type verbheaded> = +
          <S conjoined> = +
          <S_1 conjoined> = -  |limit recursion
          <S head type prefix> = <S_1 head type prefix>
          <S option> = conjoinedS

rule {S option conjPrefix - conjoined S  containing a topic}
S = S_1  S_2
          <S head> = <S_2 head>
         {<S_1 head type topic> = +
         /<S_2 head type topic> = +
         }
          <S conjoined> = +
          <S_1 conjoined> = -  |limit recursion
          <S_2 head type prefix conj> = +
          <S head type prefix> <= <S_1 head type prefix>
          <S option> = conjPrefix

rule {S option conjSuffix - conjoined S  containing a topic}
S = S_1  S_2
          <S head> = <S_2 head>
         {<S_1 head type topic> = +
         /<S_2 head type topic> = +
         }
          <S conjoined> = +
          <S_1 conjoined> = -  |limit recursion
          <S_1 head type suffix conj> = +
          <S head type prefix> <= <S_1 head type prefix>
          <S option> = conjSuffix

rule {S option greeting}
S = Greet (DP) 
          <S head> = <Greet head>
          <DP head type temporal> = -
          <DP head type quantifier> = -
          <DP head type locative> = -
          <DP head type wh> = -
          <DP head type topic> = -
          <DP head type focusmarked> = -
          <DP head infl polarity> = positive
          <S option> = greet

rule {S option interjection}
S = Intj / Adj 
          <S head> = <Intj head>
          <S head> = <Adj head>
          <S option> = interjection

rule {S option excl.init}
S = (DP) Excl AdjP (IP) 
          <S head> = <AdjP head>
          <IP head fronted> = <AdjP>
          <IP head type question> = -
          <Excl head type excl-initial> = +
          <DP head type temporal> = -
          <DP head type quantifier> = -
          <DP head type locative> = -
          <DP head type wh> = -
          <DP head type topic> = -
          <DP head type focusmarked> = -
          <DP head infl polarity> = positive
          <IP head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                auxiliary-I':-
                                                                auxiliary-VP:-]]
          <S option> = excl.init

rule {CP option conj - conjoined CPs}
CP = (InitConj) CP_1 Conj CP_2
          <CP head> = <CP_2 head>
          <Conj head type conjoins_IP> = +
          <Conj head type comparative> = -
          <Conj head type compareAdj> = -
          <Conj head type compareN> = -
          <CP_1 head type verbheaded> = +
          <CP_2 head type verbheaded> = +
          <CP conjoined> = +
          <CP_1 conjoined> = -  |limit recursion
          <CP head type prefix> <= <CP_1 head type prefix>
          <CP_1 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = conj

rule {CP option conjPrefix - conjoined CPs}
CP = CP_1  CP_2
          <CP head> = <CP_2 head>
          <CP conjoined> = +
          <CP_1 conjoined> = -  |limit recursion
          <CP_2 head type prefix conj> = +
          <CP head type prefix> <= <CP_1 head type prefix>
          <CP_1 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = conjPrefix

rule {CP option conjSuffix - conjoined CPs}
CP = CP_1  CP_2
          <CP head> = <CP_2 head>
          <CP conjoined> = +
          <CP_1 conjoined> = -  |limit recursion
          <CP_1 head type suffix conj> = +
          <CP head type prefix> <= <CP_1 head type prefix>
          <CP_1 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = conjSuffix

rule {CP option 1 - no fronting, root}
CP = C'
          <CP head> = <C' head>
          <C' head type root > = +
          <C' head type vacuous> = -    
          <C' head type relative> = -
          <C' head fronted> = none
          <CP option> = 1

rule {CP option 2a - DP specifier initial, wh, root}
CP = DP C'
          <CP head> = <C' head>
          <C' head type root> = +
          <C' head type question> = +
          <C' head type YNQ> = -
          <C' head type suffix YNQ> = -
          <C' head type relative> = -
          <C' head fronted> = <DP>
          <DP head type wh> = +
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <DP head type comma> = -
          <CP option> = 2a

rule {CP option 2b - PP specifier initial, wh, root}
CP = PP C'
          <CP head> = <C' head>
          <C' head type root> = +
          <C' head type question> = +
          <C' head type YNQ> = -
          <C' head type suffix YNQ> = -
          <C' head type relative> = -
          <C' head fronted> = <PP>
          <PP head type wh> = +
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <PP head type comma> = -
          <CP option> = 2b

rule {CP option 2c - AdvP specifier initial, wh, root}
CP = AdvP C'
          <CP head> = <C' head>
          <C' head type root> = +
          <C' head type question> = +
          <C' head type YNQ> = -
          <C' head type suffix YNQ> = -
          <C' head type relative> = -
          <C' head fronted> = <AdvP>
          <AdvP head type wh> = +
          <AdvP head type comma> = -
          <CP option> = 2c

rule {CP option 3 - no fronting, non-root}
CP = C'
          <CP head> = <C' head>
          <C' head type root > = -
          <C' head type vacuous> = -    | to avoid empty CP
         {<C' head fronted> = none
         /<C' head fronted cat> = DP
          <CP head type relative> = +
         }
          <CP option> = 3

rule {CP option 4a - DP specifier initial, wh, non-root}
CP = DP C' 
          <CP head> = <C' head>
          <C' head type root> = -
          <C' head type question> = +
          <C' head type YNQ> = -
          <C' head type suffix YNQ> = -
          <C' head type relative> = -
          <C' head fronted> = <DP>
          <DP head type wh> = +
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <DP head type comma> = -
          <CP option> = 4a

rule {CP option 4aIndef - DP indefinite initial, non-root}
CP = DP C'
          <CP head> = <C' head>
          <C' head type root> = -
          <C' head fronted> = <DP>
          <C' head type question> = -
          <C' head type YNQ> = -
          <C' head type suffix YNQ> = -
          <C' head type relative> = -
          <DP head type definite> = -
          <DP head type pronoun> = +
          <DP head type wh> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <DP head type comma> = -
          <CP head type definite> <= -
          <CP option> = 4aIndef

rule {CP option 4arel - DP specifier initial, wh, relative clause}
CP = DP C'
          <CP head> = <C' head>
          <C' head type root> = -
          <C' head fronted> = <DP>
          <C head type question> = -
          <DP head type wh> = +
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <DP head type comma> = -
          <CP head type relative> <= +
          <CP head type wh> <= +
          <CP option> = 4arel

rule {CP option 4b - PP specifier initial, wh, non-root}
CP = PP C'
          <CP head> = <C' head>
          <C' head type root> = -
          <C' head type question> = +
          <C' head fronted> = <PP>
          <C' head type YNQ> = -
          <C' head type suffix YNQ> = -
          <C' head type relative> = -
          <PP head type wh> = +
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <PP head type comma> = -
          <CP option> = 4b

rule {CP option 4c - AdvP specifier initial, wh, non-root}
CP = AdvP C'
          <CP head> = <C' head>
          <C' head type root> = -
          <C' head type question> = +
          <C' head type YNQ> = -
          <C' head type suffix YNQ> = -
          <C' head type relative> = -
          <C' head fronted> = <AdvP>
          <AdvP head type wh> = +
          <AdvP head type comma> = -
          <CP option> = 4c

rule {CP option Neg - DP or AdvP specifier initial, negative, fronted}
CP = {DP / AdvP} IP 
          <CP head> = <IP head>
          <IP head type question> = -
          <IP head type relative> = -
          <IP head fronted> = <DP>
          <IP head fronted> = <AdvP>
          <IP head type auxiliary-C'> = -
          <DP head infl polarity> =  negative
          <AdvP head infl polarity> =  negative
          <AdvP head type existential> =  -
          <IP head infl polarity> <= negative
          <CP head infl polarity> <= negative
          <AdvP head type comma> = -
          <DP head type comma> = -
          <CP option> = Neg

rule {CP option FocusInitSubj - FocusP initial for subjects}
CP = FocusP IP
          <CP head> = <IP head>
          <CP head type root> = +
          <IP head type question> = -
          <IP head type relative> = -
          <IP head type auxiliary-C'> = -
          <IP head type subject_focused> = +
          <IP head type pro-drop> = -
          <FocusP head type comma> = -
          <FocusP head type focusmarked> = +  | subject in place, not focused, unless focusmarked
          <IP head object> == ~[cat:FocusP] 
          <IP head indirectobject> == ~[cat:FocusP] 
          <CP option> = FocusInitSubj

rule {CP option FocusInit - FocusP initial, non-subjects}
CP = FocusP IP
          <CP head> = <IP head>
          <CP head type root> = +
          <IP head type question> = -
          <IP head type relative> = -
          <IP head type auxiliary-C'> = -
          <IP head type subject_focused> = -
          <IP head fronted> = <FocusP>
          <IP head type pro-drop> = -
          <FocusP head type comma> = -
          <CP option> = FocusInit

rule {CP option 6a - Conditional word before, Conseq word before}
CP = Cond IP_1 Conseq IP_2
          <CP head> = <IP_1 head>
          <CP head type relative> = -
          <IP_1 head type relative> = -
          <Cond head infl mood> = conditional
          <Cond head type comma> = -
          <Conseq head type comma> = -
          <IP_1 head type auxiliary-C'> = -       
          <IP_2 head type auxiliary-C'> = -       
          <IP_1 head fronted> = none    
          <IP_1 head type question> = -    
          <IP_2 head fronted> = none    
          <IP_2 head type question> = -    
          <IP_1 head infl> == ~[mood:imperative]  
          <IP_2 head infl> == ~[mood:imperative]  
          <IP_2 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = 6a

rule {CP option 6aNoConseq - Conditional word before, no Conseq word}
CP = Cond IP_1 IP_2
          <CP head> = <IP_1 head>
          <CP head type relative> = -
          <IP_1 head type relative> = -
          <Cond head infl mood> = conditional
          <Cond head type comma> = -
          <IP_1 head type auxiliary-C'> = -       
          <IP_2 head type auxiliary-C'> = -       
          <IP_1 head fronted> = none    
          <IP_1 head type question> = -    
          <IP_2 head fronted> = none    
          <IP_2 head type question> = -    
          <IP_1 head infl> == ~[mood:imperative]  
          <IP_2 head infl> == ~[mood:imperative]  
          <IP_2 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = 6aNoConseq

rule {CP option 6e - Conditional enclitic, Conseq word before}
CP = IP_1 Conseq IP_2
          <CP head> = <IP_1 head>
          <CP head type relative> = -
          <IP_1 head type relative> = -
          <IP_1 head infl mood> = conditional
          <IP_1 head type suffix conditional> = +
          <Conseq head type comma> = -
          <IP_1 head type auxiliary-C'> = -       
          <IP_2 head type auxiliary-C'> = -       
          <IP_1 head fronted> = none    
          <IP_1 head type question> = -    
          <IP_2 head fronted> = none    
          <IP_2 head type question> = -    
          <IP_1 head infl> == ~[mood:imperative]  
          <IP_2 head infl> == ~[mood:imperative]  
          <IP_2 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = 6e

rule {CP option 6eNoConseq - Conditional enclitic, no Conseq word}
CP = IP_1 IP_2
          <CP head> = <IP_1 head>
          <CP head type relative> = -
          <IP_1 head type relative> = -
          <IP_1 head infl mood> = conditional
          <IP_1 head type suffix conditional> = +
          <IP_1 head type auxiliary-C'> = -       
          <IP_2 head type auxiliary-C'> = -       
          <IP_1 head fronted> = none    
          <IP_1 head type question> = -    
          <IP_2 head fronted> = none    
          <IP_2 head type question> = -    
          <IP_1 head type verbheaded> = +       
          <IP_2 head type verbheaded> = +       
          <IP_1 head infl> == ~[mood:imperative]  
          <IP_2 head infl> == ~[mood:imperative]  
          <IP_2 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = 6eNoConseq

rule {CP option 6f - Consequence first, Conditional word before}
CP = IP_1 Cond IP_2
          <CP head> = <IP_2 head>
          <CP head type relative> = -
          <IP_1 head type relative> = -
          <Cond head infl mood> = conditional
          <Cond head type comma> = -
          <IP_1 head type auxiliary-C'> = -       
          <IP_2 head type auxiliary-C'> = -       
          <IP_1 head fronted> = none    
          <IP_1 head type question> = -    
          <IP_2 head fronted> = none    
          <IP_2 head type question> = -    
          <IP_1 head type verbheaded> = +       
          <IP_2 head type verbheaded> = +       
          <IP_1 head infl> == ~[mood:imperative]  
          <IP_2 head infl> == ~[mood:imperative]  
          <IP_1 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = 6f

rule {CP option 6j - Consequence first, Conditional enclitic}
CP = IP_1 IP_2
          <CP head> = <IP_2 head>
          <CP head type relative> = -
          <IP_1 head type relative> = -
          <IP_2 head infl mood> = conditional
          <IP_2 head type suffix conditional> = +
          <IP_1 head type auxiliary-C'> = -       
          <IP_2 head type auxiliary-C'> = -       
          <IP_1 head fronted> = none    
          <IP_1 head type question> = -    
          <IP_2 head fronted> = none    
          <IP_2 head type question> = -    
          <IP_1 head type verbheaded> = +       
          <IP_2 head type verbheaded> = +       
          <IP_1 head infl> == ~[mood:imperative]  
          <IP_2 head infl> == ~[mood:imperative]  
          <IP_1 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = 6j

rule {CP option 7a - subjunctive conditional word before}
CP = Cond IP_1 IP_2
          <CP head> = <IP_1 head>
          <CP head type relative> = -
          <IP_1 head type relative> = -
          <Cond head type subjunctive_conditional> = +
          <Cond head type comma> = -
          <IP_1 head type auxiliary-C'> = -       
          <IP_2 head type auxiliary-C'> = -       
          <IP_1 head fronted> = none    
          <IP_1 head type question> = -    
          <IP_2 head fronted> = none    
          <IP_2 head type question> = -    
          <IP_1 head infl> == ~[mood:imperative]  
          <IP_2 head infl> == ~[mood:imperative]  
          <IP_2 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = 7a

rule {CP option 7e - subjunctive conditional enclitic}
CP = IP_1 IP_2
          <CP head> = <IP_1 head>
          <CP head type relative> = -
          <IP_1 head type relative> = -
          <IP_1 head infl mood> = subjunctive
          <IP_1 head type suffix subjunctive_conditional> = +
          <IP_1 head type auxiliary-C'> = -       
          <IP_2 head type auxiliary-C'> = -       
          <IP_1 head fronted> = none    
          <IP_1 head type question> = -    
          <IP_2 head fronted> = none    
          <IP_2 head type question> = -    
          <IP_1 head type verbheaded> = +       
          <IP_2 head type verbheaded> = +       
          <IP_1 head infl> == ~[mood:imperative]  
          <IP_2 head infl> == ~[mood:imperative]  
          <IP_2 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = 7e

rule {CP option 7f - Consequnece first, subjunctive conditional word before}
CP = IP_1 Cond IP_2
          <CP head type relative> = -
          <IP_1 head type relative> = -
          <CP head> = <IP_2 head>
          <Cond head type subjunctive_conditional> = +
          <Cond head type comma> = -
          <IP_1 head type auxiliary-C'> = -       
          <IP_2 head type auxiliary-C'> = -       
          <IP_1 head fronted> = none    
          <IP_1 head type question> = -    
          <IP_2 head fronted> = none    
          <IP_2 head type question> = -    
          <IP_1 head infl> == ~[mood:imperative]  
          <IP_2 head infl> == ~[mood:imperative]  
          <IP_1 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = 7f

rule {CP option 7j - Consequence first, subjunctive conditional enclitic}
CP = IP_1 IP_2
          <CP head> = <IP_2 head>
          <CP head type relative> = -
          <IP_1 head type relative> = -
          <IP_2 head infl mood> = subjunctive
          <IP_2 head type suffix subjunctive_conditional> = +
          <IP_1 head type auxiliary-C'> = -       
          <IP_2 head type auxiliary-C'> = -       
          <IP_1 head fronted> = none    
          <IP_1 head type question> = -    
          <IP_2 head fronted> = none    
          <IP_2 head type question> = -    
          <IP_1 head type verbheaded> = +       
          <IP_2 head type verbheaded> = +       
          <IP_1 head infl> == ~[mood:imperative]  
          <IP_2 head infl> == ~[mood:imperative]  
          <IP_1 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <CP option> = 7j

rule {CBar option 1b - head vacuous, root, with optional aux fronting}
C' = IP
          <C' head> = <IP head>
          <IP head type auxiliary-C'> = -
          <C' head type root> = +
          <C' head type relative> = -
          <C' head type vacuous> = +    | to avoid empty CP
          <IP head type auxiliary-I'> = -    | if aux present, must front
          <IP head type auxiliary-VP> = -    | if aux present, must front
          <C' option> = 1b

rule {CBar option 1d - positive Aux initial, question, root}
C' = Aux IP
          <C' head> = <IP head>
          <C' head type root> = +
          <C' head type question> = +
          <C' head type relative> = -
          <Aux head subject head agr> = <IP head subject head agr>
          <Aux head type comma> = -
          <C' head type prefix> <= <Aux head type prefix>
          <IP head type auxiliary-C'> <= +
          <C' head type auxiliary-C'> <= +
          <C' option> = 1d

rule {CBar option 1dNegCL - positive Aux with Neg clitic initial, question, root}
C' = Aux IP
          <C' head> = <IP head>
          <C' head type root> = +
          <C' head type question> = +
          <C' head type relative> = -
          <Aux head subject head agr> = <IP head subject head agr>
          <Aux head type comma> = -
          <C' head type prefix> <= <Aux head type prefix>
          {<Aux head type prefix negative> = +
          /<Aux head type suffix negative> = +
          }
          <Aux head infl polarity> =  negative
          <IP head infl polarity> <= negative
          <C' head infl polarity> <= negative
          <IP head type auxiliary-C'> <= +
          <C' head type auxiliary-C'> <= +
          <C' option> = 1dNegCL

rule {CBar option 2a - head vacuous, non-root, no aux fronting}
C' = IP
          <C' head> = <IP head>
          <IP head type auxiliary-C'> = -
          <C' head type root> = -
          <C' head type vacuous> = +    | to avoid empty CP
          <C' option> = 2a

rule {CBar option 2c - head-initial, question, non-root}
C' = C IP
          <C' head> = <IP head>
          <IP head type auxiliary-C'> = -
          <C head type root> = -
          <C head type relative> = -
          <C head type question> = +
          <C' head type root> = -
          <C' head type question> = +
          <C' head type relative> = -
          <C head type CP-initial> = +
          <C head type comma> = -
          <C' head type prefix> <= <C head type prefix>
          <C' option> = 2c

rule {CBar option 2j - head-initial, non-question, non-root}
C' = C IP
          <C' head> = <IP head>
          <C head type root> = -
          <C head type relative> = -
          <C head type question> = -
          <C' head type root> = -
          <C' head type question> = -
          <C' head type relative> = -
          <C' head fronted> = none 
          <C head type CP-initial> = +
          <C head type comma> = -
          <C' head type prefix> <= <C head type prefix>
          <IP head type auxiliary-C'> = -
          <C' option> = 2j

rule {CBar option 4e - comp_prefix, IP complement, non-root}
C' = IP
          <C' head> = <IP head>
          <IP head type prefix comp> = +
          <IP head type auxiliary-C'> = -
          <C' head type question> = -
          <C' head type relative> = -
          <C' head type root> = -
          <C' option> = 4e

rule {CBar option 5a - head-initial, relative clause}
C' = C IP
          <C' head> = <IP head>
          <C' head type root> = -
          <C' head type question> = -
          <C' head type relative> = +
          <C head type root> = -
          <C head type question> = -
          <C head type relative> = +
          <C head type CP-initial> = +
          <C head type comma> = -
          <C' head type prefix> <= <C head type prefix>
          <IP head type auxiliary-C'> = -  
          <C' head type wh> <= -           
          <C' head fronted> == ~[cat:FocusP]  
          <IP head infl> == ~[mood:imperative]
          <C' option> = 5a

rule {CBar option 5f - relative_prefix and relative_suffix, IP complement}
C' = IP
          <C' head> = <IP head>
          <IP head type prefix relative> = +
          <IP head type suffix relative> = +
          <IP head type auxiliary-C'> = -
          <C' head type question> = -
          <C' head type relative> = +
          <C' head type root> = +
          <C' option> = 5f

rule {TopicP option markerinit}
TopicP = TopicM DP
          <TopicP head> = <DP head>
          <TopicM head type topic-initial> = +
          <DP head type focusmarked> = -
          <DP head type prefix focusmarked> = -
          <DP head type suffix focusmarked> = -
          <DP head type wh> = -
          <DP head type temporal> = -
          <TopicP head type topic-marked> = +
          <TopicM head type comma> = -
          <TopicP option> = markerinit

rule {FocusP option proclitic}
FocusP = DP
          <FocusP head> = <DP head>
          <DP head type topic> = -
          <DP head type wh> = -
          <DP head type temporal> = -
          <DP head type prefix topic> = -
          <DP head type suffix topic> = -
          <DP head type prefix poss> = -
          <DP head type suffix poss> = -
          <DP head type prefix YNQ> = -
          <DP head type suffix YNQ> = -
          <DP head type prefix whQ> = -
          <DP head type suffix whQ> = -
          <DP head type prefix conj> = -
          <DP head type suffix conj> = -
          <DP head type prefix relative> = -
          <DP head type suffix relative> = -
          <DP head type suffix focusmarked> = -
          <DP head type prefix focusmarked> = +
          <FocusP head type focusmarked> <= <DP head type prefix focusmarked>
          <FocusP option> = proclitic

rule {FocusP option enclitic}
FocusP = DP
          <FocusP head> = <DP head>
          <DP head type topic> = -
          <DP head type wh> = -
          <DP head type temporal> = -
          <DP head type prefix topic> = -
          <DP head type suffix topic> = -
          <DP head type prefix poss> = -
          <DP head type suffix poss> = -
          <DP head type prefix YNQ> = -
          <DP head type suffix YNQ> = -
          <DP head type prefix whQ> = -
          <DP head type suffix whQ> = -
          <DP head type prefix conj> = -
          <DP head type suffix conj> = -
          <DP head type prefix relative> = -
          <DP head type suffix relative> = -
          <DP head type prefix focusmarked> = -
          <DP head type suffix focusmarked> = +
          <FocusP head type focusmarked> <= <DP head type suffix focusmarked>
          <FocusP option> = enclitic

rule {IP option conj - conjoined IPs}
IP = (InitConj) IP_1 Conj IP_2
          <IP head> = <IP_2 head>
          <Conj head type conjoins_IP> = +
          <IP_1 head type pro-drop> = <IP_2 head type pro-drop>
          <IP_1 head infl finite> = <IP_2 head infl finite>
          <IP_1 head infl mood> = <IP_2 head infl mood>
          <IP_1 head fronted> = <IP_2 head fronted>
          <IP_1 head root> = <IP_2 head root>
          <IP_1 head type verbheaded> = +
          <IP_2 head type verbheaded> = +
          <IP conjoined> = +
          <IP_1 conjoined> = -  |limit recursion
          <IP head type prefix> <= <IP_1 head type prefix>  
          <IP_1 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <IP option> = conj

rule {IP option conjPrefix - conjoined IPs}
IP = IP_1  IP_2
          <IP head> = <IP_2 head>
          <IP_1 head type pro-drop> = <IP_2 head type pro-drop>
          <IP_1 head infl finite> = <IP_2 head infl finite>
          <IP_1 head infl mood> = <IP_2 head infl mood>
          <IP_1 head fronted> = <IP_2 head fronted>
          <IP_1 head root> = <IP_2 head root>
          <IP_1 head type verbheaded> = +
          <IP_2 head type verbheaded> = +
          <IP conjoined> = +
          <IP_1 conjoined> = -  |limit recursion
          <IP_2 head type prefix conj> = +
          <IP head type prefix> <= <IP_1 head type prefix>
          <IP_1 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <IP option> = conjPrefix

rule {IP option conjSuffix - conjoined IPs}
IP = IP_1  IP_2
          <IP head> = <IP_2 head>
          <IP_1 head type pro-drop> = <IP_2 head type pro-drop>
          <IP_1 head infl finite> = <IP_2 head infl finite>
          <IP_1 head infl mood> = <IP_2 head infl mood>
          <IP_1 head fronted> = <IP_2 head fronted>
          <IP_1 head root> = <IP_2 head root>
          <IP_1 head type verbheaded> = +
          <IP_2 head type verbheaded> = +
          <IP conjoined> = +
          <IP_1 conjoined> = -  |limit recursion
          <IP_1 head type suffix conj> = +
          <IP head type prefix> <= <IP_1 head type prefix>
          <IP_1 head> == [type:[auxiliary_required:+]] -> ~[type:[auxiliary-C':-
                                                                  auxiliary-I':-
                                                                  auxiliary-VP:-]]
          <IP option> = conjSuffix

rule {IP option 1a - no subject for imperatives}
IP = I'
          <IP head> = <I' head>
          <I' head infl mood> = imperative
          <I' head infl finite> = +
          <I' head type existential> = -
          <IP head type pro-drop> = +
          <IP head type question> = -
          <IP head fronted> == ~[cat:DP]
          <IP head fronted> == ~[cat:FocusP]
          <IP head topicP> == ~[option:vocative]   | avoid TopicP if not topicmarked
          <IP option> = 1a

rule {IP option 1exist - subject missing for existentials without an existential Adv}
IP = I'
          <IP head> = <I' head>
          <IP head type existential> = +
          <IP head infl mood> = declarative
          <IP head infl valence> = active
          <IP head type verbheaded> = +  | if no existential verb, then existential Adv required
          <IP head fronted> == ~[cat:DP]
          <IP head fronted> == ~[cat:FocusP]
          <IP option> = 1exist

rule {IP option 1d - subject pro-drop for non-root nonfinite clauses, not passive or antipassive}
IP = I'
          <IP head> = <I' head>
          <IP head type root> = -
          <IP head infl finite> = -
          <IP head type pro-drop> = +
          <IP head type question> = -
          <I' head type verbheaded> = +   
          <IP head infl> == ~[valence:passive]
          <IP head infl> == ~[valence:antipassive]
          <IP option> = 1d

rule {IP option 1e - subject missing in relative clauses}
IP = I'
          <IP head> = <I' head>
          <IP head type root> = -
          <IP head infl finite> = +
          <IP head type pro-drop> = +
          <IP head type question> = -
          <IP head type relative> = +
          <IP head infl> == ~[valence:passive]
          <IP head infl> == ~[valence:antipassive]
          <IP head> == [subject:[head:[type:[pro-drop:+
                                             verbheaded:+]]]] 
                       -> ~[fronted:[cat:FocusP]]
          <IP option> = 1e

rule {IP option 2a - subject initial, required, active only}
IP = DP I'
          <IP head> = <I' head>
          <IP head type root> = <DP head type root>
          <IP head type pro-drop> = -
          <I' head subject> = <DP>
          <I' head infl valence> = active
          <DP head type focusmarked> = -          | + in focus position
          <DP head type prefix focusmarked> = -   | + in focus position
          <DP head type suffix focusmarked> = -   | + in focus position
          <I' head type existential> = -
         {<I' head type speech_PP> = +
         /<I' head type speech_DP> = +
         /<I' head type copular> = +
         /<I' head type perception> = +
         /<I' head type transitive> = -
          <I' head type ditransitive> = -
          <I' head type speech_PP> = -
          <I' head type speech_DP> = -
          <I' head type copular> = -
          <I' head type perception> = -
         /<I' head type transitive> = +
          <I' head type ditransitive> = -
          <I' head type speech_PP> = -
          <I' head type speech_DP> = -
          <I' head type copular> = -
          <I' head type perception> = -
          <I' head object head type reflexive> = -
         /<I' head type transitive> = +
          <I' head type ditransitive> = -
          <I' head type speech_PP> = -
          <I' head type speech_DP> = -
          <I' head type copular> = -
          <I' head type perception> = -
          <I' head object head type reflexive> = +
          <DP head agr> = <I' head object head agr>
         /<I' head type ditransitive> = +
          <I' head type speech_PP> = -
          <I' head type speech_DP> = -
          <I' head type copular> = -
          <I' head type perception> = -
          <I' head object head type reflexive> = -
         /<I' head type ditransitive> = +
          <I' head type speech_PP> = -
          <I' head type speech_DP> = -
          <I' head type copular> = -
          <I' head type perception> = -
          <I' head object head type reflexive> = +
          <DP head agr> = <I' head object head agr>
         }
          <DP head type wh> = -
          <DP head type possessive> = -          | subject not possessive
          <DP head type reflexive> = -           | subject not reflexive
          <DP head type reciprocal> = -          | subject not reciprocal
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <DP head type prefix conj> = -         | not part of a conjunct
          <DP head type comma> = -
          <IP head type prefix> <= <DP head type prefix>
          <IP head> == [type:[reciprocal:+]] ->   
                       [subject:[head:[agr:[number:plural]]]]
          <IP head> == [object:[head:[type:[reciprocal:+]]]] ->
                       [subject:[head:[agr:[number:plural]]]]
          <IP head> == [infl:[finite:+]] -> ~[subject:[head:[case:accusative]]] 
          <IP head> == [subject:[head:[type:[pro-drop:+
                                             verbheaded:+]]]] 
                        -> ~[fronted:[cat:FocusP]]   
          <IP option> = 2a

rule {IP option 2aCaus - subject initial, required, causative only}
IP = DP I'
          <IP head> = <I' head>
          <IP head type root> = <DP head type root>
          <IP head type pro-drop> = -
          <I' head subject> = <DP>
          <I' head infl valence> = causative
          <DP head type wh> = -
          <DP head type focusmarked> = -          | + in focus position
          <DP head type prefix focusmarked> = -   | + in focus position
          <DP head type suffix focusmarked> = -   | + in focus position
          <DP head type possessive> = -           | subject not possessive
          <DP head type reflexive> = -            | subject not reflexive
          <DP head type reciprocal> = -           | subject not reciprocal
          <DP head type suffix poss> = -          | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -       | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <DP head type prefix conj> = -          | not part of a conjunct  
          <DP head type comma> = -
          <IP head> == [infl:[finite:+]] -> ~[subject:[head:[case:accusative]]]  
          <IP head> == [type:[reciprocal:+]] ->   
                       [subject:[head:[agr:[number:plural]]]]
          <IP head> == [object:[head:[type:[reciprocal:+]]]] ->
                       [subject:[head:[agr:[number:plural]]]]
          <IP head fronted> == ~[cat:FocusP]
          <IP option> = 2aCaus

rule {IP option 2aApp - subject initial, required, applicative only}
IP = DP I'
          <IP head> = <I' head>
          <IP head type root> = <DP head type root>
          <IP head type pro-drop> = -
          <I' head subject> = <DP>
          <I' head infl valence> = applicative
          <DP head type focusmarked> = -          | + in focus position
          <DP head type prefix focusmarked> = -   | + in focus position
          <DP head type suffix focusmarked> = -   | + in focus position
          <DP head type wh> = -
          <DP head type possessive> = -          | subject not possessive
          <DP head type reflexive> = -           | subject not reflexive
          <DP head type reciprocal> = -          | subject not reciprocal
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <DP head type prefix conj> = -         | not part of a conjunct
          <DP head type comma> = -
          <IP head type prefix> <= <DP head type prefix>
          <IP head> == [infl:[finite:+]] -> ~[subject:[head:[case:accusative]]]  
          <IP head> == [type:[reciprocal:+]] -> 
                       [subject:[head:[agr:[number:plural]]]]
          <IP head> == [object:[head:[type:[reciprocal:+]]]] ->
                       [subject:[head:[agr:[number:plural]]]]
          <IP head fronted> == ~[cat:FocusP]
          <IP option> = 2aApp

rule {IP option 2b - subject initial, required, passive}
IP = DP I'
          <IP head> = <I' head>
          <IP head type root> = <DP head type root>
          <IP head type pro-drop> = -
          <I' head subject> = <DP>
          <DP head type wh> = -
          <IP head infl valence> = passive
          <DP head type focusmarked> = -          | + in focus position
          <DP head type prefix focusmarked> = -   | + in focus position
          <DP head type suffix focusmarked> = -   | + in focus position
          <DP head type possessive> = -          | subject not possessive
          <DP head type reflexive> = -           | subject not reflexive
          <DP head type reciprocal> = -          | subject not reciprocal
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <DP head type prefix conj> = -         | not part of a conjunct
          <DP head type comma> = -
          <IP head type prefix> <= <DP head type prefix>
          <IP head fronted> == ~[cat:FocusP]
          <IP option> = 2b

rule {IP option 3aexist - existential Adv initial}
IP = AdvP I'
          <IP head> = <I' head>
          <IP head subject> = <AdvP>
          <IP head type existential> = +
          <AdvP head type existential> = +
          <IP head infl valence> = active
          <AdvP head type comma> = -
          <IP head type prefix> <= <AdvP head type prefix>
          <IP option> = 3aexist

rule {IP option 4a - subject questioned, not passive}
IP = I'
          <IP head> = <I' head>
          <IP head type question> = +
          <IP head type pro-drop> = -
          <IP head fronted cat> = DP
          <IP head fronted head type wh> = +
          <IP head fronted> = <I' head subject> 
         {<I' head type transitive> = -
          <I' head type ditransitive> = -
         /<I' head type transitive> = +
          <I' head type ditransitive> = -
          <I' head object head type reflexive> = -
         /<I' head type transitive> = +
          <I' head type ditransitive> = -
          <I' head object head type reflexive> = +
          <IP head fronted head agr> = <I' head object head agr>
         /<I' head type ditransitive> = +
          <I' head object head type reflexive> = -
         /<I' head type ditransitive> = +
          <I' head object head type reflexive> = +
          <IP head fronted head agr> = <I' head object head agr>
         }
          <IP head infl> == ~[valence:passive]
          <IP head fronted head> == ~[case:accusative]
          <IP option> = 4a

rule {IP option 4afoc - subject focused, not passive, root only}
IP = I'
          <IP head> = <I' head>
          <IP head type root> = +
          <IP head type question> = -
          <IP head type pro-drop> = -
          <IP head fronted head type wh> = -
          <IP head fronted> = <I' head subject> 
         {<I' head type transitive> = -
          <I' head type ditransitive> = -
         /<I' head type transitive> = +
          <I' head type ditransitive> = -
          <I' head object head type reflexive> = -
         /<I' head type transitive> = +
          <I' head type ditransitive> = -
          <I' head object head type reflexive> = +
          <IP head fronted head agr> = <I' head object head agr>
         /<I' head type ditransitive> = +
          <I' head object head type reflexive> = -
         /<I' head type ditransitive> = +
          <I' head object head type reflexive> = +
          <IP head fronted head agr> = <I' head object head agr>
         }
          <IP head type subject_focused> <= +        | check for focus marking
          <IP head object> == ~[cat:FocusP]
          <IP head indirectobject> == ~[cat:FocusP]
          <IP head infl> == ~[valence:passive]
          <IP head fronted head> == ~[case:accusative]
          <IP option> = 4afoc

rule {IP option 4b - subject questioned, passive}
IP = I'
          <IP head> = <I' head>
          <IP head type question> = +
          <IP head type pro-drop> = -
          <IP head infl valence> = passive
          <IP head fronted cat> = DP
          <IP head fronted head type wh> = +
          <IP head fronted> = <I' head subject> 
          <IP head fronted head> == ~[case:accusative]
          <IP option> = 4b

rule {IP option 4bfoc - subject focused, passive}
IP = I'
          <IP head> = <I' head>
          <IP head type question> = -
          <IP head type pro-drop> = -
          <IP head infl valence> = passive
          <IP head fronted cat> = FocusP
          <IP head fronted head type wh> = -
          <IP head fronted head agr> = <I' head subject head agr>
          <IP head type subject_focused> <= +        | check for focus marking
          <IP head fronted head> == ~[case:accusative]
          <IP option> = 4bfoc

rule {IP option 5 - adverb questioned, copular verb}
IP = I'
          <IP head> = <I' head>
          <IP head type question> = +
          <IP head fronted cat> = AdvP
          <IP head fronted head type wh> = +
          <I' head type copular> = +
          <I' head type transitive> = -
          <IP head infl> == ~[valence:passive]
          <IP option> = 5

rule {IP option 5nonroot - adverb questioned}
IP = I'
          <IP head> = <I' head>
          <IP head type question> = +
          <IP head fronted cat> = AdvP
          <IP head fronted head type wh> = +
          <I' head type root> = -
          <IP head infl> == ~[valence:passive]
          <IP option> = 5nonroot

rule {IBarNegObjVerbRequired option 1 - no auxiliaries}
I' = VP
          <I' head> = <VP head>
          <I' head type auxiliary-VP> = -     | must not have VP Aux to use this rule
          <I' head type auxiliary-I'> = -
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP head> == [adjoinedVP1:[head:[object:[head:[infl:[polarity:negative]]]]]] ->   
                       [infl:[polarity:negative]] | if object of adjoined PP negative, VP must be
          <VP head> == [adjoinedVP2:[head:[object:[head:[infl:[polarity:negative]]]]]] ->   
                       [infl:[polarity:negative]] | if object of adjoined PP negative, VP must be
          <I' option> = 1NegObjVerbRequired

rule {IBar option 2NegObjVerbRequired - positive Aux initial, required}
I' = Aux VP
          <I' head> = <VP head>
          <Aux head infl polarity> = positive
          <I' head subject head agr> = <Aux head subject head agr> 
          <Aux head type comma> = -
          <I' head infl finite> <= <Aux head infl finite>
          <I' head type prefix> <= <Aux head type prefix>
          <VP head type auxiliary-I'> <= +
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP head> == [adjoinedVP1:[head:[object:[head:[infl:[polarity:negative]]]]]] ->   
                       [infl:[polarity:negative]] | if object of adjoined PP negative, VP must be
          <VP head> == [adjoinedVP2:[head:[object:[head:[infl:[polarity:negative]]]]]] ->   
                       [infl:[polarity:negative]] | if object of adjoined PP negative, VP must be
          <I' option> = 2NegObjVerbRequired

rule {IBar option 2NegReqAux - negative Aux word initial with other aux required, for fronted Aux case}
I' = Aux VP
          <I' head> = <VP head>
          <Aux head infl polarity> = negative
          <Aux head type prefix negative> = -        | not Neg clitic for this rule
          <Aux head type suffix negative> = -
          <I' head type question> = +                | questions only with fronted Aux for this rule
          <I' head subject head agr> = <Aux head subject head agr> 
          <Aux head type comma> = -
          <I' head infl finite> <= <Aux head infl finite>
          <I' head type prefix> <= <Aux head type prefix>
          <VP head type auxiliary-I'> <= +
          <I' head infl polarity> <= negative
          <VP head infl polarity> <= negative
          <I' option> = 2NegReqAux

rule {IBar option 2NegCL - positive Aux with Neg clitic initial}
I' = Aux VP
          <I' head> = <VP head>
          <Aux head infl polarity> = negative
         {<Aux head type prefix negative> = +
         /<Aux head type suffix negative> = +
         }
          <I' head subject head agr> = <Aux head subject head agr> 
          <Aux head type comma> = -
          <I' head infl finite> <= <Aux head infl finite>
          <I' head type prefix> <= <Aux head type prefix>
          <VP head type auxiliary-I'> <= +
          <I' head infl polarity> <= negative
          <VP head infl polarity> <= negative
          <I' option> = 2NegCL

rule {VP option conj - conjoined VPs}
VP = (InitConj) VP_1 Conj VP_2
          <VP head> = <VP_2 head>
          <VP_1 head type participle> = <VP_2 head type participle>
          <VP_1 head type gerund> = <VP_2 head type gerund>
          <VP_1 head type verbheaded> = +
          <VP_2 head type verbheaded> = +
          <VP_1 head fronted> = none
          <VP_2 head fronted> = none
          <Conj head type conjoins_IP> = +
          <VP conjoined> = +
          <VP_1 conjoined> = -                  |limit recursion
          <VP head type prefix> <= <VP_1 head type prefix>
          <VP_1 head object> == ~[cat:FocusP]
          <VP option> = conj

rule {VP option conjPrefix - conjoined VPs}
VP = VP_1 VP_2
          <VP head> = <VP_2 head>
          <VP_1 head type participle> = <VP_2 head type participle>
          <VP_1 head type gerund> = <VP_2 head type gerund>
          <VP_1 head type verbheaded> = +
          <VP_2 head type verbheaded> = +
          <VP_1 head fronted> = none
          <VP_2 head fronted> = none
          <VP_2 head type prefix conj> = +
          <VP conjoined> = +
          <VP_1 conjoined> = -          |limit recursion
          <VP head type prefix> <= <VP_1 head type prefix>
          <VP option> = conjPrefix

rule {VP option conjSuffix - conjoined VPs}
VP = VP_1 VP_2
          <VP head> = <VP_2 head>
          <VP_1 head type participle> = <VP_2 head type participle>
          <VP_1 head type gerund> = <VP_2 head type gerund>
          <VP_1 head type verbheaded> = +
          <VP_2 head type verbheaded> = +
          <VP_1 head fronted> = none
          <VP_2 head fronted> = none
          <VP_1 head type suffix conj> = +
          <VP conjoined> = +
          <VP_1 conjoined> = -  |limit recursion
          <VP head type prefix> <= <VP_1 head type prefix>
          <VP option> = conjSuffix

rule {VP option 0a - positive Aux initial, VP complement}
VP = Aux VP_1
          <VP head> = <VP_1 head>
          <Aux head infl polarity> = positive       | positive aux only 
          <Aux head subject head agr> =  <VP head subject head agr>
          <Aux head infl tense> =  <VP head infl tense>
          <Aux head type comma> = -
          <VP head type prefix> <= <Aux head type prefix>
          <VP head type auxiliary-VP> <= +
          <VP option> = 0a

rule {VP option 0aNeg - negative Aux initial, VP complement}
VP = Aux VP_1
          <VP head> = <VP_1 head>
          <Aux head infl polarity> = negative    
          <Aux head type comma> = -
          <VP head type prefix> <= <Aux head type prefix>
          <VP head type auxiliary-VP> <= +
          <VP head infl polarity> <= negative
          <VP_1 head infl polarity> <= negative
          <VP option> = 0aNeg

rule {VP option 0aAdv - positive temporal AdvP initial, VP complement}
VP = AdvP VP_1
          <VP head> = <VP_1 head>
          <VP head adverbialTemp> = <AdvP>
          <AdvP head type temporal> = +
          <AdvP head type negative-polarity> = -
          <AdvP head infl polarity> = positive 
          <AdvP head type comma> = -
          <VP head type prefix> <= <AdvP head type prefix>
          <VP option> = 0aAdv

rule {VP option 0aNegAdv - negative temporal AdvP initial, VP complement}
VP = AdvP VP_1
          <VP head> = <VP_1 head>
          <VP head adverbialTemp> = <AdvP>
          <AdvP head type temporal> = +
          <AdvP head type negative-polarity> = -
          <AdvP head infl polarity> = negative    
          <AdvP head type comma> = -
          <VP head type prefix> <= <AdvP head type prefix>
          <VP head infl polarity> <= negative
          <VP_1 head infl polarity> <= negative
          <VP option> = 0aNegAdv

rule {VP option 0c - Aux only for non-root copular questions}
VP = Aux
          <VP head> = <Aux head>
          <Aux head infl polarity> = positive        | positive aux only
          <VP head type copular> = +
          <VP head type question> = +
          <VP head type root> = -
          <VP head type auxiliary-VP> <= +
          <VP option> = 0c

rule {VP option 1a - manner AdvP initial, adjoined to VP}
VP = AdvP VP_1
          <VP head> = <VP_1 head>
          <VP head type root> = +                                    | limit adjunction
          <AdvP head type manner> = +
          <AdvP head type comma> = -
          <AdvP head type case-marked> = -
          <VP head type prefix> <= <AdvP head type prefix>
         {<VP head adverbialVP1> = <AdvP>                       | to handle multiple adjunctions
          <VP head adverbialVP> = -
         /<VP head adverbialVP2> = <AdvP>
          <VP head adverbialVP> = +
         }
          <VP head adverbialVP> <= +
          <VP head> == [type:[motion:+]] -> ~[adverbialVP1:[head:[type:[locative:+]]]]                 | locative needs to be inside VP
          <VP head> == [type:[motion:+]] -> ~[adverbialVP1:[head:[object:[head:[type:[locative:+]]]]]] | locative needs to be inside VP  
          <VP head> == [type:[existential:+]] -> ~[adverbialVP1:[head:[type:[locative:+]]]]            | locative needs to be inside VP
          <VP head> == [type:[copular:+]] -> ~[adverbialVP1:[head:[type:[locative:+]]]]                | locative needs to be inside VP  
          <VP head> == [embedded:[head:[fronted:[head:[type:[locative:+]]]]]] 
                          -> ~[adverbialVP1:[head:[type:[locative:+]]]]                                | locative needs to be inside VP
          <VP head> == [embedded:[head:[embedded:[head:[fronted:[head:[type:[locative:+]]]]]]]] 
                          -> ~[adverbialVP1:[head:[object:[head:[type:[locative:+]]]]]]                | locative needs to be inside VP  
          <VP head> == [type:[motion:+]] -> ~[adverbialVP2:[head:[type:[locative:+]]]]                 | locative needs to be inside VP
          <VP head> == [type:[motion:+]] -> ~[adverbialVP2:[head:[object:[head:[type:[locative:+]]]]]] | locative needs to be inside VP
          <VP head> == [type:[existential:+]] -> ~[adverbialVP2:[head:[type:[locative:+]]]]            | locative needs to be inside VP
          <VP head> == [type:[copular:+]] -> ~[adverbialVP2:[head:[type:[locative:+]]]]                | locative needs to be inside VP
          <VP head> == [embedded:[head:[fronted:[head:[type:[locative:+]]]]]] 
                          -> ~[adverbialVP2:[head:[type:[locative:+]]]]                                | locative needs to be inside VP
          <VP head> == [embedded:[head:[embedded:[head:[fronted:[head:[type:[locative:+]]]]]]]] 
                          -> ~[adverbialVP2:[head:[object:[head:[type:[locative:+]]]]]]                | locative needs to be inside VP
          <VP option> = 1a

rule {VP option 1b - AdvP final, adjoined to VP}
VP = VP_1 AdvP
          <VP head> = <VP_1 head>
          <VP head type root> = +                                     | limit adjunction
          <AdvP head type case-marked> = -
          <VP head type comma> <= <AdvP head type comma>
          <VP head type suffix> <= <AdvP head type suffix>
         {<VP head adverbialVP1> = <AdvP>                      | to handle multiple adjunctions
          <VP head adverbialVP> = -
         /<VP head adverbialVP2> = <AdvP>
          <VP head adverbialVP> = +
         }
          <VP head adverbialVP> <= +
          <VP head> == [type:[motion:+]] -> ~[adverbialVP1:[head:[type:[locative:+]]]]                 | locative needs to be inside VP
          <VP head> == [type:[motion:+]] -> ~[adverbialVP1:[head:[object:[head:[type:[locative:+]]]]]] | locative needs to be inside VP  
          <VP head> == [type:[existential:+]] -> ~[adverbialVP1:[head:[type:[locative:+]]]]            | locative needs to be inside VP
          <VP head> == [type:[copular:+]] -> ~[adverbialVP1:[head:[type:[locative:+]]]]                | locative needs to be inside VP  
          <VP head> == [embedded:[head:[fronted:[head:[type:[locative:+]]]]]] 
                          -> ~[adverbialVP1:[head:[type:[locative:+]]]]                                | locative needs to be inside VP
          <VP head> == [embedded:[head:[embedded:[head:[fronted:[head:[type:[locative:+]]]]]]]] 
                          -> ~[adverbialVP1:[head:[object:[head:[type:[locative:+]]]]]]                | locative needs to be inside VP  
          <VP head> == [type:[motion:+]] -> ~[adverbialVP2:[head:[type:[locative:+]]]]                 | locative needs to be inside VP
          <VP head> == [type:[motion:+]] -> ~[adverbialVP2:[head:[object:[head:[type:[locative:+]]]]]] | locative needs to be inside VP
          <VP head> == [type:[existential:+]] -> ~[adverbialVP2:[head:[type:[locative:+]]]]            | locative needs to be inside VP
          <VP head> == [type:[copular:+]] -> ~[adverbialVP2:[head:[type:[locative:+]]]]                | locative needs to be inside VP
          <VP head> == [embedded:[head:[fronted:[head:[type:[locative:+]]]]]] 
                          -> ~[adverbialVP2:[head:[type:[locative:+]]]]                                | locative needs to be inside VP
          <VP head> == [embedded:[head:[embedded:[head:[fronted:[head:[type:[locative:+]]]]]]]] 
                          -> ~[adverbialVP2:[head:[object:[head:[type:[locative:+]]]]]]                | locative needs to be inside VP
          <VP option> = 1b
  
rule {VP option 1c - PP final, adjoined to VP}
VP = VP_1 PP
          <VP head> = <VP_1 head>
          <VP_1 head type root> = +                                       | limit adjunction
          <VP_1 head type case-marked> = -
          <VP_1 head type superlative> = -
          <VP_1 head type causative_syntax> = -
          <PP head type partitive> = -
          <PP head type stand-alone> = -
          <VP_1 head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
         {<VP head adjoinedVP1> = <PP>                        | to handle multiple adjunctions
          <VP head adjoinedVP> = -
         /<VP head adjoinedVP2> = <PP>
          <VP head adjoinedVP> = +
         }
          <VP head adjoinedVP> <= +
          <PP head> == ~[case:dative]   
          <PP head infl> == ~[valence:passive]      
          <VP head> == [type:[motion:+]] -> ~[adjoinedVP1:[head:[type:[locative:+]]]]                  | locative needs to be inside VP  
          <VP head> == [type:[motion:+]] -> ~[adjoinedVP1:[head:[object:[head:[type:[locative:+]]]]]]  | locative needs to be inside VP
          <VP head> == [type:[existential:+]] -> ~[adjoinedVP1:[head:[type:[locative:+]]]]             | locative needs to be inside VP
          <VP head> == [type:[copular:+]] -> ~[adjoinedVP1:[head:[type:[locative:+]]]]                 | locative needs to be inside VP
          <VP head> == [embedded:[head:[fronted:[head:[type:[locative:+]]]]]] 
                          -> ~[adjoinedVP1:[head:[object:[head:[type:[locative:+]]]]]]                 | locative needs to be inside VP
          <VP head> == [embedded:[head:[embedded:[head:[fronted:[head:[type:[locative:+]]]]]]]] 
                          -> ~[adjoinedVP1:[head:[object:[head:[type:[locative:+]]]]]]                 | locative needs to be inside VP  
          <VP head> == [type:[transitive:+]] -> ~[adjoinedVP1:[head:[case:dative]]]                    | dative needs to be inside VP
          <VP head> == [infl:[valence:passive]] -> ~[adjoinedVP1:[head:[infl:[valence:passive]]]]      | passive agent needs to be inside VP
          <VP head> == [embedded:[head:[infl:[valence:passive]]]] 
                          -> ~[adjoinedVP1:[head:[infl:[valence:passive]]]]                            | passive agent needs to be inside VP
          <VP head> == [type:[takes_P:+]] -> ~[adjoinedVP1:[head:[type:[stand-alone:+]]]]              | particles inside VP   
          <VP head> == [embedded:[head:[type:[copular:+
                                              question:+]]]] 
                          -> ~[adjoinedVP1:[head:[type:[locative:+]]]]                                 | locative needs to be inside VP
          <VP head> == [type:[motion:+]] -> ~[adjoinedVP2:[head:[type:[locative:+]]]]                  | locative needs to be inside VP  
          <VP head> == [type:[motion:+]] -> ~[adjoinedVP2:[head:[object:[head:[type:[locative:+]]]]]]  | locative needs to be inside VP
          <VP head> == [type:[existential:+]] -> ~[adjoinedVP2:[head:[type:[locative:+]]]]             | locative needs to be inside VP
          <VP head> == [type:[copular:+]] -> ~[adjoinedVP2:[head:[type:[locative:+]]]]                 | locative needs to be inside VP
          <VP head> == [embedded:[head:[fronted:[head:[type:[locative:+]]]]]] 
                          -> ~[adjoinedVP2:[head:[object:[head:[type:[locative:+]]]]]]                 | locative needs to be inside VP
          <VP head> == [embedded:[head:[embedded:[head:[fronted:[head:[type:[locative:+]]]]]]]] 
                          -> ~[adjoinedVP2:[head:[object:[head:[type:[locative:+]]]]]]                 | locative needs to be inside VP  
          <VP head> == [type:[transitive:+]] -> ~[adjoinedVP2:[head:[case:dative]]]                    | dative needs to be inside VP
          <VP head> == [infl:[valence:passive]] -> ~[adjoinedVP2:[head:[infl:[valence:passive]]]]      | passive agent needs to be inside VP
          <VP head> == [embedded:[head:[infl:[valence:passive]]]] 
                          -> ~[adjoinedVP2:[head:[infl:[valence:passive]]]]                            | passive agent needs to be inside VP
          <VP head> == [type:[takes_P:+]] -> ~[adjoinedVP2:[head:[type:[stand-alone:+]]]]              | particles inside VP   
          <VP head> == [embedded:[head:[type:[copular:+
                                              question:+]]]] 
                          -> ~[adjoinedVP2:[head:[type:[locative:+]]]]                                 | locative needs to be inside VP
          <VP option> = 1c

rule {VP option 1eInom - case-marked DP initial, adjoined to VP}
VP = DP VP_1
          <VP head> = <VP_1 head>
          <DP head type noN> = -
          <VP_1 head type verbheaded> = +             
          <DP head type case-marked> = +        
          <DP head type comma> = -
          <VP head type prefix> <= <DP head type prefix>
          <VP head adjoined> = <DP>
          <DP head> == ~[case:nominative]
          <DP head> == ~[case:accusative]
          <DP head> == ~[case:genitive]
          <DP head> == ~[case:ergative]
          <DP head> == ~[case:absolutive]
          <VP head> == [type:[motion:+]] -> ~[adjoined:[head:[case:locative]]]
          <VP head> == [type:[motion:+]] -> ~[adjoined:[head:[case:dative]]]
          <VP option> = 1eInom

rule {VP option 1eFnom - case-marked DP final, adjoined to VP}
VP = VP_1 DP
          <VP head> = <VP_1 head>
          <DP head type noN> = -
          <VP_1 head type verbheaded> = +             
          <DP head type case-marked> = +        
          <VP_1 head type comma> = -
          <VP head type suffix> <= <DP head type suffix>
          <VP head adjoined> = <DP>
          <DP head> == ~[case:nominative]
          <DP head> == ~[case:accusative]
          <DP head> == ~[case:genitive]
          <DP head> == ~[case:ergative]
          <DP head> == ~[case:absolutive]
          <VP head> == [type:[motion:+]] -> ~[adjoined:[head:[case:locative]]]
          <VP head> == [type:[motion:+]] -> ~[adjoined:[head:[case:dative]]]
          <VP option> = 1eFnom

rule {VP option 1PRTF - Particle adjoined to VP after movement, final}
VP = VP_1 P
          <VP head> = <VP_1 head>
          <VP_1 head type takes_P> = +
          <P head type particle> = +
          <VP_1 head adjoinedVP> = -         | particle movement inside adjunction
          <VP_1 head adverbialVP> = -
          <VP_1 head adjoined> = none
          <VP_1 conjoined> = -               | particle movement inside conjunction
          <VP_1 head type comma> = -
          <VP head type comma> <= <P head type comma>
          <VP head type suffix> <= <P head type suffix>
          <VP option> = 1PRTF

rule {V option 1PRTF - Particle adjoined to V, no movement, final}
V = V_1 P
          <V head> = <V_1 head>
          <V_1 head type takes_P> = +
          <P head type particle> = +
          <V_1 head type comma> = -
          <V head type comma> <= <P head type comma>
          <V head type suffix> <= <P head type suffix>
          <V option> = 1PRTF

rule {VP option 2a - V initial/final, intransitive}
VP = V
          <VP head> = <V head>
          <V head type transitive> = -
          <V head type motion> = -
          <V head type copular> = -
          <V head type existential> = -
          <V head infl valence> = active
          <V head embedded cat> = none
          <VP option> = 2a

rule {VP option 3a - V initial, motion intransitive}
VP = V {PP / AdvP / DP}
          <VP head> = <V head>
          <VP head location> = <PP>
          <VP head location> = <AdvP>
          <VP head location> = <DP>
          <PP head type locative> = +
          <PP head case> = locative
          <PP head type sentential> = -
          <AdvP head type locative> = +
          <DP head type locative> = +
          <V head type transitive> = -
          <V head type copular> = -
          <V head type motion> = +
          <V head infl valence> = active
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type comma> <= <AdvP head type comma>
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type suffix> <= <AdvP head type suffix>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 3a

rule {VP option 3aQ - V initial, motion intransitive, locative questioned}
VP = V
          <VP head> = <V head>
          <V head type transitive> = -
          <V head type copular> = -
          <V head type motion> = +
          <V head infl valence> = active
          <V head type question> = +
          <V head fronted head type locative> = +
          <V head fronted head type wh> = +
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 3aQ
  
rule {VP option 4acopAdjfronted - V initial, copular, AdjP fronted for exclamations}
VP = V
          <VP head> = <V head>
          <VP head fronted cat> = AdjP
          <V head type copular> = +
          <V head type existential> = -       | will need two entries if both
          <V head type transitive> = -        | need two entries if can be transitive 
          <VP head infl> == ~[mood:imperative] 
          <VP option> = 4acopAdjfronted

rule {VP option 4aNegObjVerbRequired - V initial, copular, not passive}
VP = V {PP / AdjP / DP / AdvP}
          <VP head> = <V head>
          <VP head object> = <DP>
          <VP head location> = <AdvP>
          <V head type copular> = +
          <V head type existential> = -           | will need two entries if both
          <V head type transitive> = -            | need two entries if can be transitive
          <PP head type sentential> = -
          <PP head case> = locative
          <VP head infl valence> = active
          <VP head type motion> = -
          <DP head type suffix poss> = -          | only in possessor position
          <DP head type prefix poss> = -
          <PP head type suffix poss> = -          | only in possessor position
          <PP head type prefix poss> = -
          <DP head type prefix copular> = -       | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <AdjP head type prefix copular> = -     | only in no V/Aux copulars
          <AdjP head type suffix copular> = -
          <AdvP head type prefix copular> = -     | only in no V/Aux copulars
          <AdvP head type suffix copular> = -
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type comma> <= <AdjP head type comma>
          <VP head type comma> <= <DP head type comma>
          <VP head type comma> <= <AdvP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type suffix> <= <AdjP head type suffix>
          <VP head type suffix> <= <DP head type suffix>
          <VP head type suffix> <= <AdvP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head fronted> == ~[cat:AdvP]        | not existential subject for this rule
          <VP head infl> == ~[mood:imperative]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 4aNegObjVerbRequired

rule {VP option 4aperc - V initial, perception verb, not passive}
VP = V AdjP
          <VP head> = <V head>
          <V head type copular> = -
          <V head type perception> = +
          <V head type transitive> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <AdjP head type prefix copular> = -      | only in no V/Aux copulars
          <AdjP head type suffix copular> = -
          <V head type comma> = -
          <VP head type comma> <= <AdjP head type comma>
          <VP head type suffix> <= <AdjP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4aperc

rule {VP option 4aexist - V initial, existential verb}
VP = V DP (AdvP / PP / DP_1)
          <VP head> = <V head>
          <V head type existential> = +
          <V head object> = <DP>
          <V head agr number> = <DP head agr number>     
          <VP head infl valence> = active
          <PP head infl valence> = active
          <VP head type motion> = -
          <AdvP head type locative> = +
          <PP head type locative> = +
          <PP head case> = locative
          <DP_1 head type locative> = +
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <AdvP head type comma>
          <VP head type comma> <= <PP head type comma>
          <VP head type comma> <= <DP_1 head type comma>
          <VP head type suffix> <= <AdvP head type suffix>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type suffix> <= <DP_1 head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4aexist

rule {VP option 4c - copular sentence, no verb, not passive, no aux required}
VP = {PP / AdjP / DP / AdvP}
          <VP head> = <PP head>
          <VP head> = <AdjP head>
          <VP head> = <DP head>
          <VP head> = <AdvP head>
          <VP head type copular> = +
          <VP head type verbheaded> = -             | to restrict recursion
          <VP head type transitive> = -
          <VP head type ditransitive> = -
          <VP head type existential> = -
          <VP head type perception> = -
          <VP head type motion> = -
          <VP head type speech_DP> = -
          <VP head type speech_PP> = -
          <VP head type adverbialVP> = -
          <VP head type adjoinedVP> = -
          <VP head infl valence> = active
          <PP head type sentential> = -
          <PP head case> = locative
          <AdvP head type locative> = +
          <DP head type pronoun> = -             | to restrict pronouns
          <DP head type quantifier> = -          | to restrict quantifiers
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <DP head type suffix copular> = -      | only in no V/Aux copulars
          <DP head type prefix copular> = -
          <AdjP head type suffix copular> = -    | only in no V/Aux copulars
          <AdjP head type prefix copular> = -
          <VP head fronted> == ~[cat:FocusP]
          <VP head fronted head type> == ~[relative:+]
          <VP head subject> == ~[cat:AdvP]       | not existential subject
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4c

rule {VP option 4caff - copular sentence, no verb, not passive, no aux required, copular affix}
VP = {AdjP / DP}
          <VP head> = <AdjP head>
          <VP head> = <DP head>
         {<AdjP head type prefix copular> = +
         /<AdjP head type suffix copular> = +
         }
         {<DP head type prefix copular> = +
         /<DP head type suffix copular> = +
         }
          <VP head type copular> = +
          <VP head type verbheaded> = -             | to restrict recursion
          <VP head type transitive> = -
          <VP head type ditransitive> = -
          <VP head type existential> = -
          <VP head type perception> = -
          <VP head type motion> = -
          <VP head type speech_DP> = -
          <VP head type speech_PP> = -
          <VP head type adverbialVP> = -
          <VP head type adjoinedVP> = -
          <VP head infl valence> = active
          <DP head type pronoun> = -             | to restrict pronouns
          <DP head type quantifier> = -          | to restrict quantifiers
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <VP head fronted> == ~[cat:FocusP]
          <VP head fronted head type> == ~[relative:+]
          <VP head subject> == ~[cat:AdvP]       | not existential subject
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4caff

rule {VP option 4la - V initial, comparative of equal nouns}
VP = V (Art) Deg N Conj DP (Aux / V_1)
          <VP head> = <V head>
         {<V head type copular> = +
         /<V head type perception> = +
         }
          <V head type transitive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Art head type definite> = +
          <Deg head type equalN> = +
          <Conj head type compareN> = +
          <V head lex> = <V_1 head lex>
          <V head type copular> = <V_1 head type copular>
          <V head type perception> = <V_1 head type perception>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <Art head type comma> = -
          <Deg head type comma> = -
          <N head type comma> = -
          <Conj head type comma> = -
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4la

rule {VP option 4lb - V initial, comparative of equal adjectives}
VP = V Deg AdjP Conj DP (Aux / V_1)
          <VP head> = <V head>
         {<V head type copular> = +
         /<V head type perception> = +
         }
          <V head type transitive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Deg head type equalAdj> = +
          <Conj head type compareAdj> = +
          <V head lex> = <V_1 head lex>
          <V head type copular> = <V_1 head type copular>
          <V head type perception> = <V_1 head type perception>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <Deg head type comma> = -
          <AdjP head type comma> = -
          <Conj head type comma> = -
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4lb

rule {VP option 4lc1 - V initial, comparative Adj with degree words}
VP = V Deg AdjP Conj DP
          <VP head> = <V head>
         {<V head type copular> = +
         /<V head type perception> = +
         }
          <V head type transitive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Deg head type comparative> = +
          <Conj head type comparative> = +
          <Deg head type comma> = -
          <AdjP head type comma> = -
          <Conj head type comma> = -
          <VP head type suffix> <= <DP head type suffix>
          <VP head type comma> <= <DP head type comma>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4lc1

rule {VP option 4lc2 - V initial, comparative Adj with degree affix}
VP = V AdjP Conj DP
          <VP head> = <V head>
         {<V head type copular> = +
         /<V head type perception> = +
         }
          <V head type transitive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
         {<AdjP head type prefix comparative> = +
          <Conj head type comparative> = +
         /<AdjP head type suffix comparative> = +
          <Conj head type comparative> = +
         /<AdjP head type equalAdj> = +
          <Conj head type compareAdj> = + 
         }
          <AdjP head type comma> = -
          <Conj head type comma> = -
          <VP head type suffix> <= <DP head type suffix>
          <VP head type comma> <= <DP head type comma>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4lc2

rule {VP option 4lc3 - V initial, comparative N}
VP = V (Art) {Deg/AdjP} N Conj DP (Aux / V_1)
          <VP head> = <V head>
         {<V head type copular> = +
         /<V head type perception> = +
         }
          <V head type transitive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Art head type definite> = -
          <Deg head type comparative> = +
          <AdjP head type comparative> = +
          <Conj head type comparative> = +
          <V head lex> = <V_1 head lex>
          <V head type copular> = <V_1 head type copular>
          <V head type perception> = <V_1 head type perception>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <Art head type comma> = -
          <Deg head type comma> = -
          <AdjP head type comma> = -
          <N head type comma> = -
          <Conj head type comma> = -
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4lc3

rule {VP option 4ld1 - V initial, superlative Adj with degree words}
VP = V (Art) Deg AdjP (PP)
          <VP head> = <V head>
         {<V head type copular> = +
         /<V head type perception> = +
         }
          <V head type transitive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Art head type definite> = +
          <Deg head type superlative> = +
          <Deg head type comma> = -
          <Art head type comma> = -
          <VP head type suffix> <= <AdjP head type suffix>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type superlative> <= +
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4ld1

rule {VP option 4ld2 - V initial, superlative Adj with degree affix}
VP = V (Art) AdjP (PP)
          <VP head> = <V head>
         {<V head type copular> = +
         /<V head type perception> = +
         }
          <V head type transitive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Art head type definite> = +
         {<AdjP head type prefix superlative> = +
         /<AdjP head type suffix superlative> = +
         }
          <Art head type comma> = -
          <VP head type suffix> <= <AdjP head type suffix>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type superlative> <= +
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4ld2

rule {VP option 4ld3 - V initial, superlative N}
VP = V (Art) {Deg/AdjP} N (PP)
          <VP head> = <V head>
         {<V head type copular> = +
         /<V head type perception> = +
         }
          <V head type transitive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Art head type definite> = +
          <Deg head type superlative> = +
          <AdjP head type superlative> = +
          <Deg head type comma> = -
          <Art head type comma> = -
          <AdjP head type comma> = -
          <VP head type suffix> <= <AdjP head type suffix>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type superlative> <= +
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4ld3

rule {VP option 4ld3NonCopSup - V initial, non-copular, N superlative}
VP = V N {Deg/AdjP} (PP)
          <VP head> = <V head>
          <V head type copular> = -
          <V head type existential> = -
          <V head type transitive> = +
          <VP head object head type reflexive> = - 
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Deg head type superlative> = +
          <AdjP head type superlative> = +
          <Deg head type comma> = -
          <AdjP head type comma> = -
          <VP head type suffix> <= <AdjP head type suffix>
          <VP head type suffix> <= <Deg head type suffix>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type superlative> <= +
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4ld3NonCopSup

rule{VP option 4ld3NonCop - V initial, non-copular, superlative N}
VP = V (Art) {Deg/AdjP} N (PP)
          <VP head> = <V head>
          <V head type copular> = -
          <V head type existential> = -
          <V head type transitive> = +
          <VP head object head type reflexive> = - 
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Art head type definite> = +
          <Deg head type superlative> = +
          <AdjP head type superlative> = +
          <Art head type comma> = -
          <Deg head type comma> = -
          <AdjP head type comma> = -
          <VP head type suffix> <= <AdjP head type suffix>
          <VP head type suffix> <= <Deg head type suffix>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type superlative> <= +
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4ld3NonCop

rule {VP option 4ld3NonCopSupFOC - V initial, non-copular, superlative obj focused}
VP = V {Deg/AdjP} (PP)
          <VP head> = <V head>
          <V head object cat> = FocusP
          <V head type copular> = -
          <V head type existential> = -
          <V head type transitive> = +
          <VP head object head type reflexive> = - 
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Deg head type superlative> = +
          <AdjP head type superlative> = +
          <Deg head type comma> = -
          <AdjP head type comma> = -
          <VP head type suffix> <= <AdjP head type suffix>
          <VP head type suffix> <= <Deg head type suffix>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type superlative> <= +
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4ld3NonCopSupFOC

rule {VP option 4le1 - V initial, long comparative Adj with degree words}
VP = V Deg AdjP Conj DP {Aux / V_1} AdjP_1
          <VP head> = <V head>
         {<V head type copular> = +
         /<V head type perception> = +
         }
          <V head type transitive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
         {<Deg head type comparative> = +
          <Conj head type comparative> = +
         /<Deg head type equalAdj> = +
          <Conj head type compareAdj> = + }
          <V head lex> = <V_1 head lex>
          <V head type copular> = <V_1 head type copular>
          <V head type perception> = <V_1 head type perception>
          <AdjP head lex> = <AdjP_1 head lex>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <Deg head type comma> = -
          <AdjP head type comma> = -
          <Conj head type comma> = -
          <DP head type comma> = -
          <Aux head type comma> = -
          <V_1 head type comma> = -
          <VP head type suffix> <= <AdjP_1 head type suffix>
          <VP head type comma> <= <AdjP_1 head type comma>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4le1

rule {VP option 4le1gap - V initial, long comparative Adj with degree words with gap}
VP = V Deg AdjP Conj DP {Aux / V_1}
          <VP head> = <V head>
         {<V head type copular> = +
         /<V head type perception> = +
         }
          <V head type transitive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Deg head type comparative> = +
          <Conj head type comparative> = +
          <V head lex> = <V_1 head lex>
          <V head type copular> = <V_1 head type copular>
          <V head type perception> = <V_1 head type perception>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <Deg head type comma> = -
          <AdjP head type comma> = -
          <Conj head type comma> = -
          <DP head type comma> = -
          <VP head type suffix> <= <Aux head type suffix>
          <VP head type suffix> <= <V_1 head type suffix>
          <VP head type suffix> <= <Aux head type comma>
          <VP head type suffix> <= <V_1 head type comma>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4le1gap

rule {VP option 4le2 - V initial, long comparative Adj with degree affix}
VP = V AdjP Conj DP {Aux / V_1} AdjP_1
          <VP head> = <V head>
         {<V head type copular> = +
         /<V head type perception> = +
         }
          <V head type transitive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
         {<AdjP head type prefix comparative> = +
          <Conj head type comparative> = +
         /<AdjP head type suffix comparative> = +
          <Conj head type comparative> = +
         /<AdjP head type equalAdj> = +
          <Conj head type compareAdj> = + 
         }
          <V head lex> = <V_1 head lex>
          <V head type copular> = <V_1 head type copular>
          <V head type perception> = <V_1 head type perception>
          <AdjP head lex> = <AdjP_1 head lex>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <AdjP head type comma> = -
          <Conj head type comma> = -
          <DP head type comma> = -
          <Aux head type comma> = -
          <V_1 head type comma> = -
          <VP head type suffix> <= <AdjP_1 head type suffix>
          <VP head type comma> <= <AdjP_1 head type comma>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4le2

rule {VP option 4le2gap - V initial, long comparative Adj with degree affix with gap}
VP = V AdjP Conj DP {Aux / V_1}
          <VP head> = <V head>
         {<V head type copular> = +
         /<V head type perception> = +
         }
          <V head type transitive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
         {<AdjP head type prefix comparative> = +
          <Conj head type comparative> = +
         /<AdjP head type suffix comparative> = +
          <Conj head type comparative> = +
         /<AdjP head type equalAdj> = +
          <Conj head type compareAdj> = + 
         }
          <V head lex> = <V_1 head lex>
          <V head type copular> = <V_1 head type copular>
          <V head type perception> = <V_1 head type perception>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <AdjP head type comma> = -
          <Conj head type comma> = -
          <DP head type comma> = -
          <VP head type suffix> <= <Aux head type suffix>
          <VP head type suffix> <= <V_1 head type suffix>
          <VP head type suffix> <= <Aux head type comma>
          <VP head type suffix> <= <V_1 head type comma>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4le2gap

rule {VP option 4lf1 - V initial, long comparative Adj with degree words, noncopular verb}
VP = V Deg AdjP Conj DP {Aux / V_1} AdjP_1
          <VP head> = <V head>
          <V head type copular> = -
          <V head type perception> = -
          <V head type existential> = -
          <V head object head type reflexive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
         {<Deg head type comparative> = +
          <Conj head type comparative> = +
         /<Deg head type equalAdj> = +
          <Conj head type compareAdj> = + 
         }
          <V head lex> = <V_1 head lex>
          <AdjP head lex> = <AdjP_1 head lex>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <Deg head type comma> = -
          <AdjP head type comma> = -
          <Conj head type comma> = -
          <DP head type comma> = -
          <Aux head type comma> = -
          <V_1 head type comma> = -
          <VP head type suffix> <= <AdjP_1 head type suffix>
          <VP head type comma> <= <AdjP_1 head type comma>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4lf1

rule {VP option 4lf1gap - V initial, long comparative Adj with degree words, noncopular verb with gap}
VP = V Deg AdjP Conj DP {Aux / V_1} 
          <VP head> = <V head>
          <V head type copular> = -
          <V head type perception> = -
          <V head type existential> = -
          <V head object head type reflexive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <Deg head type comparative> = +
          <Conj head type comparative> = +
          <V head lex> = <V_1 head lex>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <Deg head type comma> = -
          <AdjP head type comma> = -
          <Conj head type comma> = -
          <DP head type comma> = -
          <VP head type suffix> <= <Aux head type suffix>
          <VP head type suffix> <= <V_1 head type suffix>
          <VP head type comma> <= <Aux head type comma>
          <VP head type comma> <= <V_1 head type comma>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4lf1gap

rule {VP option 4lf2 - V initial, long comparative Adj with degree affix, noncopular verb}
VP = V AdjP Conj DP {Aux / V_1} AdjP_1
          <VP head> = <V head>
          <V head type copular> = -
          <V head type perception> = -
          <V head type existential> = -
          <V head object head type reflexive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
         {<AdjP head type prefix comparative> = +
          <Conj head type comparative> = +
         /<AdjP head type suffix comparative> = +
          <Conj head type comparative> = +
         /<AdjP head type equalAdj> = +
          <Conj head type compareAdj> = + 
         }
          <V head lex> = <V_1 head lex>
          <AdjP head lex> = <AdjP_1 head lex>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <AdjP head type comma> = -
          <Conj head type comma> = -
          <DP head type comma> = -
          <Aux head type comma> = -
          <V_1 head type comma> = -
          <VP head type suffix> <= <AdjP_1 head type suffix>
          <VP head type comma> <= <AdjP_1 head type comma>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4lf2

rule {VP option 4lf2gap - V initial, long comparative Adj with degree affix, noncopular verb with gap}
VP = V AdjP Conj DP {Aux / V_1}
          <VP head> = <V head>
          <V head type copular> = -
          <V head type perception> = -
          <V head type existential> = -
          <V head object head type reflexive> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
         {<AdjP head type prefix comparative> = +
          <Conj head type comparative> = +
         /<AdjP head type suffix comparative> = +
          <Conj head type comparative> = +
         /<AdjP head type equalAdj> = +
          <Conj head type compareAdj> = + 
         }
          <V head lex> = <V_1 head lex>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <AdjP head type comma> = -
          <Conj head type comma> = -
          <DP head type comma> = -
          <VP head type suffix> <= <Aux head type suffix>
          <VP head type suffix> <= <V_1 head type suffix>
          <VP head type comma> <= <Aux head type comma>
          <VP head type comma> <= <V_1 head type comma>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4lf2gap

rule {VP option 4intran - V initial, intransitive verb, noncopular comparative}
VP = V Deg Conj DP (Aux / V_1)
          <VP head> = <V head>
          <VP head object> = <DP>
          <V head type transitive> = -
          <V head type copular> = -
          <V head type perception> = -
          <V head type existential> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Deg head type comparative> = +
          <Conj head type comparative> = +
          <DP head type reflexive> = -
          <V head lex> = <V_1 head lex>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <Deg head type comma> = -
          <Conj head type comma> = -
          <DP head type comma> = -
          <VP head type suffix> <= <Aux head type suffix>
          <VP head type suffix> <= <V_1 head type suffix>
          <VP head type comma> <= <Aux head type comma>
          <VP head type comma> <= <V_1 head type comma>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4intran

rule {VP option 4tran - V initial, transitive verb comparative}
VP = V DP Deg Conj DP_1 (Aux / V_1)
          <VP head> = <V head>
          <VP head object> = <DP>
          <V head type transitive> = +
          <V head type copular> = -
          <V head type perception> = -
          <V head type existential> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Deg head type comparative> = +
          <Conj head type comparative> = +
          <DP head type reflexive> = -
          <DP_1 head type reflexive> = -
          <V head lex> = <V_1 head lex>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <Deg head type comma> = -
          <Conj head type comma> = -
          <DP head type comma> = -
          <DP_1 head type comma> = -
          <VP head type suffix> <= <Aux head type suffix>
          <VP head type suffix> <= <V_1 head type suffix>
          <VP head type comma> <= <Aux head type comma>
          <VP head type comma> <= <V_1 head type comma>
          <VP head fronted> == ~[cat:FocusP]
          <VP head infl> == ~[mood:imperative]
          <VP option> = 4tran

rule {VP option 4tranFOC - V initial, transitive verb comparative, object focused}
VP = V Deg Conj DP (Aux / V_1)
          <VP head> = <V head>
          <VP head object cat> = FocusP      
          <V head type transitive> = +
          <V head type copular> = -
          <V head type perception> = -
          <V head type existential> = -
          <VP head type pro-drop> = -
          <VP head type question> = -
          <VP head infl valence> = active
          <VP head type motion> = -
          <Deg head type comparative> = +
          <Conj head type comparative> = +
          <DP head type reflexive> = -
          <VP head object head type reflexive> = -
          <V head lex> = <V_1 head lex>
          <DP head agr> = <V_1 head subject head agr>
          <DP head agr> = <Aux head subject head agr>
          <Deg head type comma> = -
          <Conj head type comma> = -
          <DP head type comma> = -
          <VP head type suffix> <= <Aux head type suffix>
          <VP head type suffix> <= <V_1 head type suffix>
          <VP head type comma> <= <Aux head type comma>
          <VP head type comma> <= <V_1 head type comma>
          <VP head infl> == ~[mood:imperative]
          <VP head fronted> == ~[cat:none]                |*| added
          <VP option> = 4tranFOC

rule {VP option 3aTRNegObj - V initial, motion transitive, neg obj requires neg verb}
VP = V DP {PP / AdvP / DP_2}
          <VP head> = <V head>
          <VP head object> = <DP>
          <VP head location> = <PP>
          <VP head location> = <AdvP>
          <VP head location> = <DP_2>
          <DP head case> = accusative
          <PP head type locative> = +
          <PP head case> = locative
          <PP head type sentential> = -
          <DP_2 head type locative> = +
          <AdvP head type locative> = +
          <V head type transitive_motion> = +
          <V head type copular> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP_2 head type suffix poss> = -        | only in possessor position
          <DP_2 head type prefix poss> = -
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type comma> <= <AdvP head type comma>
          <VP head type comma> <= <DP_2 head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type suffix> <= <AdvP head type suffix>
          <VP head type suffix> <= <DP_2 head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->  
                       [infl:[polarity:negative]] | if object negative, verb must be
          <VP option> = 3aTRNegObj

rule {VP option 3aTRQNegObjVerbRequired - V initial, motion transitive, locative questioned, accusative case object}
VP = V DP
          <VP head> = <V head>
          <VP head object> = <DP>
          <DP head case> = accusative
          <V head type copular> = -
          <V head type transitive_motion> = +
          <V head type question> = +
          <V head fronted head type locative> = +
          <V head fronted head type wh> = +
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->  
                       [infl:[polarity:negative]] | if object negative, verb must be
          <VP option> = 3aTRQNegObjVerbRequired

rule {VP option 3aTRQo - V initial, motion transitive, accusative obj questioned}
VP = V {PP / AdvP / DP_2}
          <VP head> = <V head>
          <VP head object> = <VP head fronted>
          <VP head location> = <PP>
          <VP head location> = <AdvP>
          <VP head location> = <DP_2>
          <VP head fronted head case> = accusative
          <PP head type locative> = +
          <PP head case> = locative
          <PP head type sentential> = -
          <DP_2 head type locative> = +
          <AdvP head type locative> = +
          <V head type transitive_motion> = +
          <V head type copular> = -
          <V head type question> = +
          <V head fronted head type locative> = -
          <V head fronted head type wh> = +
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <DP_2 head type suffix poss> = -        | only in possessor position
          <DP_2 head type prefix poss> = -
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type comma> <= <AdvP head type comma>
          <VP head type comma> <= <DP_2 head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type suffix> <= <AdvP head type suffix>
          <VP head type suffix> <= <DP_2 head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 3aTRQo

rule {VP option 3bTRQNegObjVerbRequired - V final, motion transitive, locative questioned, accusative object}
VP = DP V
          <VP head> = <V head>
          <VP head object> = <DP>
          <DP head case> = accusative
          <V head type copular> = -
          <V head type transitive_motion> = +
          <V head type question> = +
          <V head fronted head type locative> = +
          <V head fronted head type wh> = +
          <DP head type comma> = -
          <VP head type prefix> <= <DP head type prefix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->  
                       [infl:[polarity:negative]] | if object negative, verb must be
          <VP option> = 3bTRQNegObjVerbRequired

rule {VP option 5aNegObjVerbRequired - V initial, transitive (accusative case object)}
VP = V DP
          <VP head> = <V head>
          <V head object> = <DP>
          <V head embedded cat> = none
          <V head type transitive> = +
          <V head infl valence> = active
          <V head type ditransitive> = -         | two objects required
          <V head type copular> = -
          <V head type existential> = -
          <DP head case> = accusative
          <V head type motion> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]]  | if object negative, VP must be
          <VP option> = 5aNegObjVerbRequired

rule {VP option 5aCANegObjVerbRequired - V initial, causative (accusative case object)}
VP = V DP
          <VP head> = <V head>
          <V head object> = <DP>
          <V head embedded cat> = none
          <V head type transitive> = -
          <V head infl valence> = causative
          <V head type copular> = -
          <V head type existential> = -
          <DP head case> = accusative
          <V head type motion> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                     [infl:[polarity:negative]]  | if object negative, VP must be
          <VP option> = 5aCANegObjVerbRequired

rule {VP option 5aNegObjVerbRequiredAppl - V initial, applicative (accusative case object)}
VP = V DP
          <VP head> = <V head>
          <V head object> = <DP>
          <V head embedded cat> = none
          <V head infl valence> = applicative
          <V head type copular> = -
          <V head type existential> = -
          <DP head case> = accusative
          <V head type motion> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 5aNegObjVerbRequiredAppl

rule {VP option 5i - V initial/final, object questioned (accusative object)}
VP = V
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head embedded cat> = none
          <V head type transitive> = +
          <V head infl valence> = active
          <V head type ditransitive> = -         | two objects required
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted head case> = accusative
          <VP head fronted head type wh> = +
          <VP head fronted cat> = DP
          <VP head type question> = +
          <V head type motion> = -
          <VP option> = 5i

rule {VP option 5iFoc - V initial/final, object focused (accusative object)}
VP = V
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head embedded cat> = none
          <V head type transitive> = +
          <V head infl valence> = active
          <V head type ditransitive> = -         | two objects required
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted head case> = accusative
          <VP head fronted head type wh> = -
          <VP head fronted cat> = FocusP
          <VP head type question> = -
          <V head type motion> = -
          <VP option> = 5iFoc

rule {VP option 5iRel - V initial/final, object relative or raising (accusative object)}
VP = V
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head embedded cat> = none
          <V head type transitive> = +
          <V head infl valence> = active
          <V head type ditransitive> = -         | two objects required
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted head case> = accusative
          <VP head fronted head type reflexive> = -
          <VP head fronted cat> = DP
          <VP head type question> = -
          <V head type motion> = -
          <VP option> = 5iRel

rule {VP option 5iIndef - V initial/final, indefinite adverbial acting as object focused}
VP = V
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head embedded cat> = none
          <V head type copular> = -
          <V head type existential> = -
          <VP head type relative> = -
          <VP head fronted cat> = Adv
          <VP head fronted head type definite> = -
          <VP head fronted head type reflexive> = -
          <VP head type question> = -
          <VP option> = 5iIndef

rule {VP option 5iCA - V initial/final, object questioned (accusative object)}
VP = V
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head embedded cat> = none
          <V head type transitive> = -
          <V head infl valence> = causative
          <V head type ditransitive> = -         | two objects required
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted head case> = accusative
          <VP head fronted head type wh> = +
          <VP head fronted cat> = DP
          <VP head type question> = +
          <V head type motion> = -
          <VP option> = 5iCA

rule {VP option 5iCAFoc - V initial/final, object focused (accusative object)}
VP = V
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head embedded cat> = none
          <V head type transitive> = -
          <V head infl valence> = causative
          <V head type ditransitive> = -         | two objects required
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted head case> = accusative
          <VP head fronted head type wh> = -
          <VP head fronted cat> = FocusP
          <VP head type question> = -
          <V head type motion> = -
          <VP option> = 5iCAFoc

rule {VP option 5iCARel - V initial/final, object relative or raising (accusative object)}
VP = V
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head embedded cat> = none
          <V head type transitive> = -
          <V head infl valence> = causative
          <V head type ditransitive> = -         | two objects required
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted head case> = accusative
          <VP head fronted head type reflexive> = -
          <VP head fronted cat> = DP
          <VP head type question> = -
          <V head type motion> = -
          <VP option> = 5iCARel

rule {VP option 5iAppl - V initial/final, applicative object questioned (accusative object)}
VP = V
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head embedded cat> = none
          <V head infl valence> = applicative
          <V head type ditransitive> = -         | two objects required
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted head case> = accusative
          <VP head fronted head type wh> = +
          <VP head fronted cat> = DP
          <VP head type question> = +
          <V head type motion> = -
          <VP option> = 5iAppl
  
rule {VP option 5iFocAppl - V initial/final, applicative object focused (accusative object)}
VP = V
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head embedded cat> = none
          <V head infl valence> = applicative
          <V head type ditransitive> = -         | two objects required
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted head case> = accusative
          <VP head fronted head type wh> = -
          <VP head fronted cat> = FocusP
          <VP head type question> = -
          <V head type motion> = -
          <VP option> = 5iFocAppl
  
rule {VP option 5iRelAppl - V initial/final, object relative or raising (accusative object)}
VP = V
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head embedded cat> = none
          <V head infl valence> = applicative
          <V head type ditransitive> = -         | two objects required
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted head case> = accusative
          <VP head fronted head type reflexive> = -
          <VP head fronted cat> = DP
          <VP head type question> = -
          <V head type motion> = -
          <VP option> = 5iRelAppl

rule {VP option 6aNegObjVerbRequired - V initial, ditransitive with PP (accusative object)}
VP = V DP PP
          <VP head> = <V head>
          <V head object> = <DP>
          <V head indirectobject> = <PP head object>
          <V head type ditransitive> = +
          <V head infl valence> = active
          <V head type copular> = -
          <V head type existential> = -
          <DP head case> = accusative
          <PP head case> = dative
          <PP head type locative> = -
          <PP head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 6aNegObjVerbRequired

rule {VP option 6aqppNegObjVerbRequired - V initial, ditransitive with PP questioned (accusative object)}
VP = V DP
          <VP head> = <V head>
          <V head object> = <DP>
          <VP head fronted cat> = PP
          <VP head type question> = +
          <V head type ditransitive> = +
          <V head infl valence> = active
          <V head type copular> = -
          <V head type existential> = -
          <DP head case> = accusative
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
	         <VP head fronted> == ~[cat:FocusP]
          <VP option> = 6aqppNegObjVerbRequired

rule {VP option 6aqpNegObjVerbRequired - V initial, ditransitive with PP questioned, stranded (accusative object)}
VP = V DP P
          <VP head> = <V head>
          <V head object> = <DP>
          <V head indirectobject> = <VP head fronted>
          <VP head fronted cat> = DP
          <VP head type question> = +
          <V head type ditransitive> = +
          <V head infl valence> = active
          <P head infl valence> = active
          <P head case> = dative
          <V head type copular> = -
          <V head type existential> = -
          <DP head case> = accusative
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <P head type comma>
          <VP head type suffix> <= <P head type suffix>
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 6aqpNegObjVerbRequired

rule {VP option 6aCANegObjVerbRequired - V initial, causative ditransitive with PP (accusative object)}
VP = V DP PP
          <VP head> = <V head>
          <V head object> = <DP>
          <V head indirectobject> = <PP head object>
          <V head type transitive> = +
          <V head infl valence> = causative
          <V head type causative_syntax> = - 
          <V head type copular> = -
          <V head type existential> = -
          <DP head case> = accusative
          <PP head case> = dative
          <PP head type locative> = -
          <PP head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 6aCANegObjVerbRequired

rule {VP option 6aCAqppNegObjVerbRequired - V initial, causative ditransitive with PP questioned (accusative object)}
VP = V DP
          <VP head> = <V head>
          <V head object> = <DP>
          <VP head fronted cat> = PP
          <VP head type question> = +
          <V head type transitive> = +
          <V head infl valence> = causative
          <V head type causative_syntax> = - 
          <V head type copular> = -
          <V head type existential> = -
          <DP head case> = accusative
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 6aCAqppNegObjVerbRequired

rule {VP option 6aCAqpNegObjVerbRequired - V initial, causative ditransitive with PP questioned, stranded (accusative object)}
VP = V DP P
          <VP head> = <V head>
          <V head object> = <DP>
          <V head indirectobject> = <VP head fronted>
          <VP head fronted cat> = DP
          <VP head type question> = +
          <V head type transitive> = +
          <V head infl valence> = causative
          <P head infl valence> = active
          <P head case> = dative
          <V head type copular> = -
          <V head type existential> = -
          <DP head case> = accusative
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <P head type comma>
          <VP head type suffix> <= <P head type suffix>
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 6aCAqpNegObjVerbRequired

rule {VP option 6aNegObjVerbRequiredAppl - V initial, applicative ditransitive with PP (accusative object)}
VP = V DP PP
          <VP head> = <V head>
          <V head object> = <DP>
          <V head indirectobject> = <PP head object>
          <V head type transitive> = +
          <V head infl valence> = applicative
          <V head type copular> = -
          <V head type existential> = -
          <DP head case> = accusative
          <PP head case> = dative
          <PP head type locative> = -
          <PP head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 6aNegObjVerbRequiredAppl

rule {VP option 6aqppNegObjVerbRequiredAppl - V initial, applicative ditransitive with PP questioned (accusative object)}
VP = V DP
          <VP head> = <V head>
          <V head object> = <DP>
          <VP head fronted cat> = PP
          <VP head type question> = +
          <V head type transitive> = +
          <V head infl valence> = applicative
          <V head type copular> = -
          <V head type existential> = -
          <DP head case> = accusative
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 6aqppNegObjVerbRequiredAppl

rule {VP option 6aqpNegObjVerbRequiredAppl - V initial, applicative ditransitive with PP questioned, stranded (accusative object)}
VP = V DP P
          <VP head> = <V head>
          <V head object> = <DP>
          <V head indirectobject> = <VP head fronted>
          <VP head fronted cat> = DP
          <VP head type question> = +
          <V head type transitive> = +
          <V head infl valence> = applicative
          <P head infl valence> = active
          <P head case> = dative
          <V head type copular> = -
          <V head type existential> = -
          <DP head case> = accusative
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <P head type comma>
          <VP head type suffix> <= <P head type suffix>
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 6aqpNegObjVerbRequiredAppl

rule {VP option 6iNegObjVerbRequired - V initial, ditransitive with PP, accusative object questioned}
VP = V PP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head indirectobject> = <PP head object>
          <V head embedded cat> = none
          <V head type ditransitive> = +
          <V head infl valence> = active
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted cat> = DP 
          <VP head fronted head type wh> = +
          <VP head fronted head case> = accusative
          <PP head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <VP head type motion> = -
          <VP head type question> = +
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 6iNegObjVerbRequired

rule {VP option 6iNegObjVerbRequiredFoc - V initial, ditransitive with PP, accusative object focused}
VP = V PP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head indirectobject> = <PP head object>
          <V head embedded cat> = none
          <V head type ditransitive> = +
          <V head infl valence> = active
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted cat> = FocusP 
          <VP head fronted head case> = accusative
          <VP head fronted head type wh> = -
          <PP head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <VP head type motion> = -
          <VP head type question> = -
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 6iNegObjVerbRequiredFoc

rule {VP option 6iCANegObjVerbRequired - V initial, causative ditransitive with PP, accusative object questioned}
VP = V PP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head indirectobject> = <PP head object>
          <V head embedded cat> = none
          <V head type transitive> = +
          <V head infl valence> = causative
          <V head type causative_syntax> = - 
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted cat> = DP 
          <VP head fronted head type wh> = +
          <VP head fronted head case> = accusative
          <PP head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <VP head type motion> = -
          <VP head type question> = +
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 6iCANegObjVerbRequired

rule {VP option 6iCANegObjVerbRequiredFoc - V initial, causative ditransitive with PP, accusative object focused}
VP = V PP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head indirectobject> = <PP head object>
          <V head embedded cat> = none
          <V head type transitive> = +
          <V head infl valence> = causative
          <V head type causative_syntax> = - 
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted cat> = FocusP 
          <VP head fronted head case> = accusative
          <VP head fronted head type wh> = -
          <PP head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <VP head type motion> = -
          <VP head type question> = -
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 6iCANegObjVerbRequiredFoc

rule {VP option 6iNegObjVerbRequiredAppl - V initial, applicative ditransitive with PP, accusative object questioned}
VP = V PP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head indirectobject> = <PP head object>
          <V head embedded cat> = none
          <V head type transitive> = +
          <V head infl valence> = applicative
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted cat> = DP 
          <VP head fronted head type wh> = +
          <VP head fronted head case> = accusative
          <PP head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <VP head type motion> = -
          <VP head type question> = +
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 6iNegObjVerbRequiredAppl

rule {VP option 6iNegObjVerbRequiredFocAppl - V initial, applicative ditransitive with PP, accusative object focused}
VP = V PP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head indirectobject> = <PP head object>
          <V head embedded cat> = none
          <V head type transitive> = +
          <V head infl valence> = applicative
          <V head type copular> = -
          <V head type existential> = -
          <VP head fronted cat> = FocusP 
          <VP head fronted head case> = accusative
          <VP head fronted head type wh> = -
          <PP head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <VP head type motion> = -
          <VP head type question> = -
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 6iNegObjVerbRequiredFocAppl

rule {VP option 7aNegObjVerbRequired - V initial, ditransitive with DP (accusative object), DO,IO order}
VP = V DP_1 DP_2
          <VP head> = <V head>
          <V head object> = <DP_1>
          <V head indirectobject> = <DP_2>
          <V head type ditransitive> = +
          <V head infl valence> = active
          <V head type copular> = -
          <V head type existential> = -
          <DP_1 head case> = accusative
          <DP_1 head type suffix poss> = -       | only in possessor position
          <DP_1 head type prefix poss> = -
          <DP_2 head type suffix poss> = -       | only in possessor position
          <DP_2 head type prefix poss> = -
          <DP_1 head type prefix copular> = -    | only in no V/Aux copulars
          <DP_1 head type suffix copular> = -
          <DP_2 head type prefix copular> = -    | only in no V/Aux copulars
          <DP_2 head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <DP_1 head type comma> = -
          <VP head type comma> <= <DP_2 head type comma>
          <VP head type suffix> <= <DP_2 head type suffix>
          <DP_2 head> == ~[case:nominative]
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 7aNegObjVerbRequired

rule {VP option 7aqNegObjVerbRequired - V initial, ditransitive with DP (accusative object questioned)}
VP = V DP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <VP head fronted cat> = DP
          <VP head fronted head case> = accusative
          <V head indirectobject> = <DP> 
          <VP head type question> = +
          <V head type ditransitive> = +
          <V head infl valence> = active
          <V head type copular> = -
          <V head type existential> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <DP head> == ~[case:nominative]
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 7aqNegObjVerbRequired

rule {VP option 7aqNegObjVerbRequiredFoc - V initial, ditransitive with DP (accusative object focused)}
VP = V DP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <VP head fronted cat> = FocusP
          <VP head fronted head case> = accusative
          <V head indirectobject> = <DP> 
          <V head type ditransitive> = +
          <V head infl valence> = active
          <V head type copular> = -
          <V head type existential> = -
          <VP head type question> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <DP head> == ~[case:nominative]
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 7aqNegObjVerbRequiredFoc

rule {VP option 7aqioNegObjVerbRequired - V initial, ditransitive with DP (accusative object) IO questioned}
VP = V DP
          <VP head> = <V head>
          <V head object> = <DP>
          <DP head case> = accusative
          <V head indirectobject> = <VP head fronted> 
          <VP head fronted cat> = DP
          <VP head fronted head type wh> = +
          <VP head type question> = +
          <V head type ditransitive> = +
          <V head infl valence> = active
          <V head type copular> = -
          <V head type existential> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <DP head> == ~[case:nominative]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 7aqioNegObjVerbRequired

rule {VP option 7aqioNegObjVerbRequiredFoc - V initial, ditransitive with DP (accusative object) IO focused}
VP = V DP
          <VP head> = <V head>
          <V head object> = <DP>
          <DP head case> = accusative
          <V head indirectobject> = <VP head fronted> 
          <VP head fronted cat> = FocusP
          <V head type ditransitive> = +
          <V head infl valence> = active
          <V head type copular> = -
          <V head type existential> = -
          <VP head type question> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <DP head> == ~[case:nominative]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 7aqioNegObjVerbRequiredFoc

rule {VP option 7aCANegObjVerbRequired - V initial, causative ditransitive with DP (accusative object), DO,IO order}
VP = V DP_1 DP_2
          <VP head> = <V head>
          <V head object> = <DP_1>
          <V head indirectobject> = <DP_2>
          <V head type transitive> = +
          <V head infl valence> = causative
          <V head type causative_syntax> = - 
          <V head type copular> = -
          <V head type existential> = -
          <DP_1 head case> = accusative
          <DP_1 head type suffix poss> = -       | only in possessor position
          <DP_1 head type prefix poss> = -
          <DP_2 head type suffix poss> = -       | only in possessor position
          <DP_2 head type prefix poss> = -
          <DP_1 head type prefix copular> = -    | only in no V/Aux copulars
          <DP_1 head type suffix copular> = -
          <DP_2 head type prefix copular> = -    | only in no V/Aux copulars
          <DP_2 head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <DP_1 head type comma> = -
          <VP head type comma> <= <DP_2 head type comma>
          <VP head type suffix> <= <DP_2 head type suffix>
          <DP_2 head> == ~[case:nominative]
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 7aCANegObjVerbRequired

rule {VP option 7aCAqNegObjVerbRequired - V initial, causative ditransitive with DP (accusative object questioned)}
VP = V DP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <VP head fronted cat> = DP
          <VP head fronted head case> = accusative
          <V head indirectobject> = <DP> 
          <VP head type question> = +
          <V head type transitive> = +
          <V head infl valence> = causative
          <V head type causative_syntax> = - 
          <V head type copular> = -
          <V head type existential> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <DP head> == ~[case:nominative]
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 7aCAqNegObjVerbRequired

rule {VP option 7aCAqNegObjVerbRequiredFoc - V initial, causative ditransitive with DP (accusative object focused)}
VP = V DP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <VP head fronted cat> = FocusP
          <VP head fronted head case> = accusative
          <V head indirectobject> = <DP> 
          <V head type transitive> = +
          <V head infl valence> = causative
          <V head type causative_syntax> = - 
          <V head type copular> = -
          <V head type existential> = -
          <VP head type question> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <DP head> == ~[case:nominative]
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 7aCAqNegObjVerbRequiredFoc

rule {VP option 7aqCAioNegObjVerbRequired - V initial, causative ditransitive with DP (accusative object) IO questioned}
VP = V DP
          <VP head> = <V head>
          <V head object> = <DP>
          <DP head case> = accusative
          <V head indirectobject> = <VP head fronted> 
          <VP head fronted cat> = DP
          <VP head fronted head type wh> = +
          <VP head type question> = +
          <V head type transitive> = +
          <V head infl valence> = causative
          <V head type causative_syntax> = - 
          <V head type copular> = -
          <V head type existential> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <DP head> == ~[case:nominative]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 7aqCAioNegObjVerbRequired

rule {VP option 7aqCAioNegObjVerbRequiredFoc - V initial, causative ditransitive with DP (accusative object) IO focused}
VP = V DP
          <VP head> = <V head>
          <V head object> = <DP>
          <DP head case> = accusative
          <V head indirectobject> = <VP head fronted> 
          <VP head fronted cat> = FocusP
          <V head type transitive> = +
          <V head infl valence> = causative
          <V head type causative_syntax> = - 
          <V head type copular> = -
          <V head type existential> = -
          <VP head type question> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <DP head> == ~[case:nominative]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 7aqCAioNegObjVerbRequiredFoc

rule {VP option 7aNegObjVerbRequiredAppl - V initial, applicative ditransitive with DP (accusative object), DO,IO order}
VP = V DP_1 DP_2
          <VP head> = <V head>
          <V head object> = <DP_1>
          <V head indirectobject> = <DP_2>
          <V head type transitive> = +
          <V head infl valence> = applicative
          <V head type copular> = -
          <V head type existential> = -
          <DP_1 head case> = accusative
          <DP_1 head type suffix poss> = -       | only in possessor position
          <DP_1 head type prefix poss> = -
          <DP_2 head type suffix poss> = -       | only in possessor position
          <DP_2 head type prefix poss> = -
          <DP_1 head type prefix copular> = -    | only in no V/Aux copulars
          <DP_1 head type suffix copular> = -
          <DP_2 head type prefix copular> = -    | only in no V/Aux copulars
          <DP_2 head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <DP_1 head type comma> = -
          <VP head type comma> <= <DP_2 head type comma>
          <VP head type suffix> <= <DP_2 head type suffix>
          <DP_2 head> == ~[case:nominative]
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 7aNegObjVerbRequiredAppl

rule {VP option 7aqNegObjVerbRequiredAppl - V initial, applicative ditransitive with DP (accusative object questioned)}
VP = V DP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <VP head fronted cat> = DP
          <VP head fronted head case> = accusative
          <V head indirectobject> = <DP> 
          <VP head type question> = +
          <V head type transitive> = +
          <V head infl valence> = applicative
          <V head type copular> = -
          <V head type existential> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <DP head> == ~[case:nominative]
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 7aqNegObjVerbRequiredAppl

rule {VP option 7aqNegObjVerbRequiredFocAppl - V initial, applicative ditransitive with DP (accusative object focused)}
VP = V DP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <VP head fronted cat> = FocusP
          <VP head fronted head case> = accusative
          <V head indirectobject> = <DP> 
          <V head type transitive> = +
          <V head infl valence> = applicative
          <V head type copular> = -
          <V head type existential> = -
          <VP head type question> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <DP head> == ~[case:nominative]
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 7aqNegObjVerbRequiredFocAppl

rule {VP option 7aqioNegObjVerbRequiredAppl - V initial, applicative ditransitive with DP (accusative object) IO questioned}
VP = V DP
          <VP head> = <V head>
          <V head object> = <DP>
          <DP head case> = accusative
          <V head indirectobject> = <VP head fronted> 
          <VP head fronted cat> = DP
          <VP head fronted head type wh> = +
          <VP head type question> = +
          <V head type transitive> = +
          <V head infl valence> = applicative
          <V head type copular> = -
          <V head type existential> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <DP head> == ~[case:nominative]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 7aqioNegObjVerbRequiredAppl

rule {VP option 7aqioNegObjVerbRequiredFocAppl - V initial, applicative ditransitive with DP (accusative object) IO focused}
VP = V DP
          <VP head> = <V head>
          <V head object> = <DP>
          <DP head case> = accusative
          <V head indirectobject> = <VP head fronted> 
          <VP head fronted cat> = FocusP
          <V head type transitive> = +
          <V head infl valence> = applicative
          <V head type copular> = -
          <V head type existential> = -
          <VP head type question> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <VP head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <DP head> == ~[case:nominative]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 7aqioNegObjVerbRequiredFocAppl

rule {VP option 8a - V initial, sentential complement}
VP = V {CP / IP}
          <VP head> = <V head>
          <V head embedded> = <CP>
          <V head embedded> = <IP>
          <CP head type root> = -
          <CP head type relative> = -
          <IP head type relative> = -
          <IP head type auxiliary-C'> = -
          <IP head type comp> = -
          <IP head type prefix comp> = -                  | uses CP
          <IP head type suffix comp> = -
          <IP head type root> = -
          <V head type sentential> = +
          <V head type transitive> = +
          <V head object head type reflexive> = -         | to eliminate ambiguity
          <V head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <CP head type comma>
          <VP head type comma> <= <IP head type comma>
          <VP head type suffix> <= <CP head type suffix>
          <VP head type suffix> <= <IP head type suffix>
          <VP head type question> <= <IP head type question>
          <VP head fronted> <= <IP head fronted> | long distance fronting
          <VP head fronted> == ~[cat:FocusP]
          <CP head infl> == ~[mood:imperative]
          <IP head infl> == ~[mood:imperative]
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]]
          <CP head> == [type:[auxiliary-VP:+]] -> ~[type:[auxiliary-C':-
                                                          auxiliary-I':-]]
          <VP option> = 8a

rule {VP option 8aoaccNegObjVerbRequired - V initial, accusative object with sentential complement}
VP = V DP {CP / IP}
          <VP head> = <V head>
          <V head object> = <DP>
          <V head embedded> = <CP>
          <V head embedded> = <IP>
          <DP head case> = accusative
          <CP head type root> = -
          <CP head type relative> = -
          <IP head type relative> = -
          <IP head type auxiliary-C'> = -
          <IP head type comp> = -
          <IP head type prefix comp> = -                        | uses CP
          <IP head type suffix comp> = -
          <IP head type root> = -
          <V head type sentential_with_object> = +
          <V head type transitive> = +
          <V head type motion> = -
          <DP head type suffix poss> = -                        | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -                     | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <CP head type comma>
          <VP head type comma> <= <IP head type comma>
          <VP head type suffix> <= <CP head type suffix>
          <VP head type suffix> <= <IP head type suffix>
          <VP head fronted> <= <IP head fronted>       | long distance fronting
          <VP head fronted> == ~[cat:FocusP]
          <CP head infl> == ~[mood:imperative]
          <IP head infl> == ~[mood:imperative]
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]]
          <CP head> == [type:[auxiliary-VP:+]] -> ~[type:[auxiliary-C':-
                                                          auxiliary-I':-]]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 8aoaccNegObjVerbRequired

rule {VP option 8aCausNegObjVerbRequired - V initial, causative, accusative object with nonfinite complement}
VP = V DP IP
          <VP head> = <V head>
          <V head object> = <DP>
          <V head embedded> = <IP>
          <VP head infl valence> = causative
          <V head type causative_syntax> = +    
|         <V head type motion> = -
          <DP head case> = accusative
          <IP head type pro-drop> = +
          <IP head type verbheaded> = +  
|         <IP head infl finite> = -                             |*doesn't work where not marked in grammar
          <IP head type relative> = -
          <IP head type auxiliary-C'> = -    
          <IP head fronted> = none
          <IP head type comp> = -
          <IP head type prefix comp> = -                       | uses CP
          <IP head type suffix comp> = -
          <IP head type root> = -
          <IP head type question> = -
          <DP head type suffix poss> = -                       | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -                    | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <IP head type comma>
          <VP head type suffix> <= <IP head type suffix>
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head fronted> == ~[cat:FocusP]
          <IP head infl> == ~[mood:imperative]
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]]  
          <VP option> = 8aCausNegObjVerbRequired 
  
rule {VP option 8aSpeechPPIP - V initial, speech verb with PP and IP complement}
VP = V PP IP
          <VP head> = <V head>
          <V head object> = <PP>
          <V head embedded> = <IP>
          <V head type speech_PP> = +
          <V head type motion> = -
          <PP head case> = dative
          <PP head type locative> = -  
          <PP head type stand-alone> = -
          <IP head fronted> = none 
          <IP head type relative> = -
          <IP head type auxiliary-C'> = - 
          <IP head type prefix comp> = -             | uses CP
          <IP head type suffix comp> = -
          <IP head type root> = -
          <V head type comma> = -
          <PP head type comma> = -
          <VP head type comma> <= <IP head type comma>
          <VP head type suffix> <= <IP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <IP head subject head type> == [noN:+] -> [pronoun:+] 
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]] 
          <VP option> = 8aSpeechPPIP

rule {VP option 8aSpeechIP - V initial, speech_PP verb with IP complement}
VP = V IP
          <VP head> = <V head>
          <V head embedded> = <IP>
          <V head type speech_PP> = +
          <V head type motion> = -
          <IP head fronted> = none 
          <IP head type relative> = -
          <IP head type auxiliary-C'> = -  
          <IP head type prefix comp> = -             | uses CP
          <IP head type suffix comp> = -
          <IP head type root> = -
          <V head type comma> = -
          <VP head type comma> <= <IP head type comma>
          <VP head type suffix> <= <IP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <IP head subject head type> == [noN:+] -> [pronoun:+]
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]] 
          <VP option> = 8aSpeechIP

rule {VP option 8aSpeechPPCP - V initial, speech verb with PP and CP +/-root complement}
VP = V PP CP
          <VP head> = <V head>
          <V head object> = <PP>
          <V head embedded> = <CP>
          <V head type speech_PP> = +
          <V head type motion> = -
          <PP head case> = dative
          <PP head type locative> = -  
          <PP head type stand-alone> = -
          <CP head type relative> = -
          <V head type comma> = -
          <PP head type comma> = -
          <VP head type comma> <= <CP head type comma>
          <VP head type suffix> <= <CP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <CP head subject head type> == [noN:+] -> [pronoun:+]
          <CP head> == [type:[auxiliary-VP:+]] -> ~[type:[auxiliary-C':-  
                                                          auxiliary-I':-]]
          <VP option> = 8aSpeechPPCP

rule {VP option 8aSpeechCP - V initial, speech_PP verb with CP +/-root complement}
VP = V CP
          <VP head> = <V head>
          <V head embedded> = <CP>
          <V head type speech_PP> = +
          <V head type motion> = -
          <CP head type relative> = -
          <V head type comma> = -
          <VP head type comma> <= <CP head type comma>
          <VP head type suffix> <= <CP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <CP head subject head type> == [noN:+] -> [pronoun:+] 
          <CP head> == [type:[auxiliary-VP:+]] -> ~[type:[auxiliary-C':-
                                                          auxiliary-I':-]]
          <VP option> = 8aSpeechCP

rule {VP option 8aSpeechPPGreet - V initial, speech verb with PP and Greet complement}
VP = V PP Greet (DP)
          <VP head> = <V head>
          <V head object> = <PP>
          <V head embedded> = <Greet>
          <V head type speech_PP> = +
          <PP head case> = dative
          <PP head type locative> = -  
          <PP head type stand-alone> = -    
          <V head type motion> = -
          <V head type comma> = -
          <PP head type comma> = -
          <VP head type comma> <= <Greet head type comma>
          <VP head type suffix> <= <Greet head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 8aSpeechPPGreet

rule {VP option 8aSpeechGreet - V initial, speech_PP verb with Greet complement}
VP = V Greet (DP)
          <VP head> = <V head>
          <V head embedded> = <Greet>
          <V head type speech_PP> = +
          <V head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <Greet head type comma>
          <VP head type suffix> <= <Greet head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 8aSpeechGreet

rule {VP option 8aSpeechPPExcl - V initial, speech verb with PP and Excl complement}
VP = V PP (DP) Excl Adj (IP)
          <VP head> = <V head>
          <V head object> = <PP>
          <V head embedded> = <Excl>
          <V head type speech_PP> = +
          <IP head fronted> = <Adj> 
          <PP head case> = dative
          <PP head type locative> = -      
          <PP head type stand-alone> = -     
          <V head type motion> = -
          <V head type comma> = -
          <PP head type comma> = -
          <VP head type comma> <= <Excl head type comma>
          <VP head type suffix> <= <Excl head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 8aSpeechPPExcl

rule {VP option 8aSpeechExcl - V initial, speech_PP verb with Excl complement}
VP = V (DP) Excl Adj (IP)
          <VP head> = <V head>
          <V head embedded> = <Excl>
          <V head type speech_PP> = +
          <V head type motion> = -
          <IP head fronted> = <Adj>
          <V head type comma> = -
          <VP head type comma> <= <Excl head type comma>
          <VP head type suffix> <= <Excl head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 8aSpeechExcl

rule {VP option 8aSpeechPPIntj - V initial, speech verb with PP and Intj complement}
VP = V PP Intj
          <VP head> = <V head>
          <V head object> = <PP>
          <V head embedded> = <Intj>
          <V head type speech_PP> = +
          <PP head case> = dative
          <PP head type locative> = -  
          <PP head type stand-alone> = -    
          <V head type motion> = -
          <V head type comma> = -
          <PP head type comma> = -
          <VP head type comma> <= <Intj head type comma>
          <VP head type suffix> <= <Intj head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 8aSpeechPPIntj

rule {VP option 8aSpeechIntj - V initial, speech_PP verb with Intj complement}
VP = V Intj
          <VP head> = <V head>
          <V head embedded> = <Intj>
          <V head type speech_PP> = +
          <V head type motion> = -
          <V head type comma> = -
          <VP head type comma> <= <Intj head type comma>
          <VP head type suffix> <= <Intj head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 8aSpeechIntj

rule {VP option 8aSpeechDPIPNegObjVerbRequired - V initial, indirect speech verb with accusative DP, IP complement}
VP = V DP IP
          <VP head> = <V head>
          <V head object> = <DP>
          <V head embedded> = <IP>
          <V head type speech_DP> = +
          <DP head case> = accusative
          <V head type motion> = -
          <IP head fronted> = none 
          <IP head type relative> = -
          <IP head type auxiliary-C'> = -
          <IP head type verbheaded> = +  
          <IP head type prefix comp> = -             | uses CP
          <IP head type suffix comp> = -
          <IP head type root> = -
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <IP head type comma>
          <VP head type suffix> <= <IP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <DP head type> == [noN:+] -> [pronoun:+]  
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]] 
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 8aSpeechDPIPNegObjVerbRequired

rule {VP option 8aSpeechDPCPNegObjVerbRequired - V initial, indirect speech verb with accusative DP, CP complement}
VP = V DP CP
          <VP head> = <V head>
          <V head object> = <DP>
          <V head embedded> = <CP>
          <V head type speech_DP> = +
          <DP head case> = accusative
          <DP head type relative> = -  
          <V head type motion> = -
          <CP head type relative> = -
          <CP head type root> = -    
          <CP head type verbheaded> = + 
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <CP head type comma>
          <VP head type suffix> <= <CP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <DP head type> == [noN:+] -> [pronoun:+] 
          <CP head> == [type:[auxiliary-VP:+]] -> ~[type:[auxiliary-C':-  
                                                          auxiliary-I':-]]  
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 8aSpeechDPCPNegObjVerbRequired

rule {VP option 9a - V initial/final, passive, no Agent phrase, no passive aux}
VP = V 
          <VP head> = <V head>
          <V head infl valence> = passive
          <V head type ditransitive> = -
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 9a

rule {VP option 9aPPNegObjVerbRequired - V initial, passive, with PP Agent, not ditrans, no passive Aux}
VP = V PP
          <VP head> = <V head>
          <V head object> = <PP head object>
          <V head type ditransitive> = -
          <V head infl valence> = passive
          <PP head infl valence> = passive
          <PP head type sentential> = -
          <PP head type stand-alone> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 9aPPNegObjVerbRequired

rule {VP option 9aAgentPPQ - V initial/final, passive, PP Agent phrase questioned, no passive aux}
VP = V 
          <VP head> = <V head>
          <V head infl valence> = passive
          <V head fronted head infl valence> = passive
          <V head type ditransitive> = -
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = PP
          <VP option> = 9aAgentPPQ

rule {VP option 9aAgentInitPQ - V initial, passive, PP Agent phrase questioned, stranded, no passive aux}
VP = V P
          <VP head> = <V head>
          <V head infl valence> = passive
          <P head infl valence> = passive
          <V head type ditransitive> = -
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = DP
          <VP head type comma> <= <P head type comma>
          <VP head type suffix> <= <P head type suffix>
          <VP option> = 9aInitAgentPQ

rule {VP option 9bNegObjVerbRequired - V initial, passive, no Agent but PP ditrans, no passive aux}
VP = V PP
          <VP head> = <V head>
          <V head indirectobject> = <PP head object>
          <V head infl valence> = passive
          <V head type ditransitive> = +
          <PP head infl valence> = active
          <PP head type sentential> = -
          <PP head type locative> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->  
                             [infl:[polarity:negative]]  | if indirectobject negative, VP must be
          <VP head fronted> == ~[cat:FocusP]
          <VP option> = 9bNegObjVerbRequired

rule {VP option 9bDPNegObjVerbRequired - V initial, passive, no Agent but DP ditrans, no passive aux}
VP = V DP
          <VP head> = <V head>
          <V head indirectobject> = <DP>
          <V head infl valence> = passive
          <V head type ditransitive> = +
          <DP head type locative> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->  
                             [infl:[polarity:negative]]  | if indirectobject negative, VP must be
          <VP option> = 9bDPNegObjVerbRequired

rule {VP option 9bDitransPPQ - V initial, passive, no Agent, PP ditrans questioned, no passive aux}
VP = V
          <VP head> = <V head>
          <V head indirectobject> = <V head fronted>
          <V head infl valence> = passive
          <V head fronted head infl valence> = active
          <V head type ditransitive> = +
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = PP
          <VP option> = 9bDitransPPQ

rule {VP option 9bDitransPQ - V initial, passive, no Agent, PP ditrans questioned, stranded, no passive aux}
VP = V P
          <VP head> = <V head>
          <V head indirectobject> = <V head fronted>
          <V head infl valence> = passive
          <P head infl valence> = active
          <V head type ditransitive> = +
          <P head type locative> = -
          <V head type comma> = -
          <VP head type comma> <= <P head type comma>
          <VP head type suffix> <= <P head type suffix>
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = DP
          <VP option> = 9bDitransPQ

rule {VP option 9bDitransDPQ - V initial, passive, no Agent, DP ditrans questioned, no passive aux}
VP = V
          <VP head> = <V head>
          <V head indirectobject> = <V head fronted>
          <V head infl valence> = passive
          <V head fronted head infl valence> = active
          <V head type ditransitive> = +
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = DP
          <VP option> = 9bDitransDPQ

rule {VP option 9ginitNegObjVerbRequired - V initial, passive, with PP Agent, PP ditrans, no passive Aux}
VP = V PP_1 PP
          <VP head> = <V head>
          <V head object> = <PP head object>
          <V head indirectobject> = <PP_1 head object>
          <V head type ditransitive> = +
          <V head infl valence> = passive
          <PP head infl valence> = passive
          <PP_1 head infl valence> = active
          <PP head type stand-alone> = -
          <PP head type sentential> = -
          <PP_1 head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <PP_1 head type locative> = -
          <PP_1 head type suffix poss> = -       | only in possessor position
          <PP_1 head type prefix poss> = -
          <V head type comma> = -
          <PP_1 head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 9ginitNegObjVerbRequired

rule {VP option 9gfinNegObjVerbRequired - V initial, passive, with PP Agent, PP ditrans, no passive Aux}
VP = V PP PP_2
          <VP head> = <V head>
          <V head object> = <PP head object>
          <V head indirectobject> = <PP_2 head object>
          <V head type ditransitive> = +
          <V head infl valence> = passive
          <PP head infl valence> = passive
          <PP_2 head infl valence> = active
          <PP head type stand-alone> = -
          <PP head type sentential> = -
          <PP_2 head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <PP_2 head type locative> = -
          <PP_2 head type suffix poss> = -       | only in possessor position
          <PP_2 head type prefix poss> = -
          <V head type comma> = -
          <PP head type comma> = -
          <VP head type comma> <= <PP_2 head type comma>
          <VP head type suffix> <= <PP_2 head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 9gfinNegObjVerbRequired

rule {VP option 9gAgentPPQNegObjVerbRequired - V initial, passive, with PP Agent questioned, PP ditrans, no passive Aux}
VP = V PP_1
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head indirectobject> = <PP_1 head object>
          <V head type ditransitive> = +
          <V head infl valence> = passive
          <V head fronted head infl valence> = passive
          <PP_1 head infl valence> = active
          <PP_1 head type sentential> = -
          <PP_1 head type locative> = -
          <PP_1 head type suffix poss> = -       | only in possessor position
          <PP_1 head type prefix poss> = -
          <V head type comma> = -
          <VP head type comma> <= <PP_1 head type comma>
          <VP head type suffix> <= <PP_1 head type suffix>
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = PP
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 9gAgentPPQNegObjVerbRequired

rule {VP option 9gAgentPQNegObjVerbRequired - V initial, passive, with PP Agent questioned, stranded, PP ditrans, no passive Aux}
VP = V PP_1 P
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head indirectobject> = <PP_1 head object>
          <V head type ditransitive> = +
          <V head infl valence> = passive
          <P head infl valence> = passive
          <PP_1 head infl valence> = active
          <PP_1 head type sentential> = -
          <PP_1 head type locative> = -
          <PP_1 head type suffix poss> = -       | only in possessor position
          <PP_1 head type prefix poss> = -
          <V head type comma> = -
          <PP_1 head type comma> = -
          <VP head type comma> <= <P head type comma>
          <VP head type suffix> <= <P head type suffix>
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = DP
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 9gAgentPQNegObjVerbRequired

rule {VP option 9gDitransPPQNegObjVerbRequired - V initial, passive, with PP Agent, PP ditrans questioned, no passive Aux}
VP = V PP
          <VP head> = <V head>
          <V head object> = <PP head object>
          <V head indirectobject> = <VP head fronted head object>
          <V head type ditransitive> = +
          <V head infl valence> = passive
          <PP head infl valence> = passive
          <PP head type sentential> = -
          <PP head type suffix poss> = -       | only in possessor position
          <PP head type prefix poss> = -
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = PP
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 9gDitransPPQNegObjVerbRequired

rule {VP option 9gDitransPQNegObjVerbRequired - V initial, passive, with PP Agent, PP ditrans questioned, stranded, no passive Aux}
VP = V PP P
          <VP head> = <V head>
          <V head object> = <PP head object>
          <V head indirectobject> = <VP head fronted>
          <V head type ditransitive> = +
          <V head infl valence> = passive
          <PP head infl valence> = passive
          <P head infl valence> = active
          <P head type locative> = -
          <PP head type sentential> = -
          <PP head type suffix poss> = -       | only in possessor position
          <PP head type prefix poss> = -
          <V head type comma> = -
          <PP head type comma> = -
          <VP head type comma> <= <P head type comma>
          <VP head type suffix> <= <P head type suffix>
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = DP
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 9gDitransPQNegObjVerbRequired

rule {VP option 9oinitNegObjVerbRequired - V initial, passive, with PP Agent, DP ditrans, no passive Aux}
VP = V DP PP
          <VP head> = <V head>
          <V head object> = <PP head object>
          <V head indirectobject> = <DP>
          <V head type ditransitive> = +
          <V head infl valence> = passive
          <PP head infl valence> = passive
          <PP head type stand-alone> = -
          <PP head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 9oinitNegObjVerbRequired

rule {VP option 9ofinNegObjVerbRequired - V initial, passive, with PP Agent, DP ditrans, no passive Aux}
VP = V PP DP
          <VP head> = <V head>
          <V head object> = <PP head object>
          <V head indirectobject> = <DP>
          <V head type ditransitive> = +
          <V head infl valence> = passive
          <PP head infl valence> = passive
          <PP head type stand-alone> = -
          <PP head type sentential> = -
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <V head type comma> = -
          <PP head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head fronted> == ~[cat:FocusP]
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 9ofinNegObjVerbRequired

rule {VP option 9oAgentPPQNegObjVerbRequired - V initial, passive, with PP Agent questioned, DP ditrans, no passive Aux}
VP = V DP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head indirectobject> = <DP>
          <V head type ditransitive> = +
          <V head infl valence> = passive
          <V head fronted head infl valence> = passive
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <V head type comma> = -
          <VP head type comma> <= <DP head type comma>
          <VP head type suffix> <= <DP head type suffix>
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = PP
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 9oAgentPPQNegObjVerbRequired

rule {VP option 9oAgentPQNegObjVerbRequired - V initial, passive, with PP Agent questioned, stranded, DP ditrans, no passive Aux}
VP = V DP P
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head indirectobject> = <DP>
          <V head type ditransitive> = +
          <V head infl valence> = passive
          <P head infl valence> = passive
          <DP head type suffix poss> = -         | only in possessor position
          <DP head type prefix poss> = -
          <DP head type prefix copular> = -      | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <V head type comma> = -
          <DP head type comma> = -
          <VP head type comma> <= <P head type comma>
          <VP head type suffix> <= <P head type suffix>
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = DP
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 9oAgentPQNegObjVerbRequired

rule {VP option 9oDitransDPQNegObjVerbRequired - V initial, passive, with PP Agent, DP ditrans questioned, no passive Aux}
VP = V PP
          <VP head> = <V head>
          <V head object> = <PP head object>
          <V head indirectobject> = <VP head fronted>
          <V head type ditransitive> = +
          <V head infl valence> = passive
          <PP head infl valence> = passive
          <PP head type sentential> = -
          <PP head type suffix poss> = -       | only in possessor position
          <PP head type prefix poss> = -
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = DP
          <VP head> == [object:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if object negative, VP must be
          <VP option> = 9oDitransDPQNegObjVerbRequired

rule {VP option 9sAgentDPQNegObjVerbRequired - V initial, passive, with DP Agent questioned, PP ditrans, no passive Aux}
VP = V PP
          <VP head> = <V head>
          <V head object> = <VP head fronted>
          <V head indirectobject> = <PP head bject>
          <V head infl valence> = passive
          <PP head infl valence> = active
          <V head type ditransitive> = +
          <PP head type suffix poss> = -         | only in possessor position
          <PP head type prefix poss> = -
          <PP head type stand-alone> = -
          <PP head type sentential> = -
          <V head type comma> = -
          <VP head type comma> <= <PP head type comma>
          <VP head type suffix> <= <PP head type suffix>
          <VP head type question> = +
          <VP head fronted head type wh> = +
          <VP head fronted cat> = DP
          <VP head> == [indirectobject:[head:[infl:[polarity:negative]]]] ->   
                       [infl:[polarity:negative]] | if indirectobject negative, VP must be
          <VP option> = 9sAgentDPQNegObjVerbRequired

rule {DP option CaseI - initial Case marker on DP, remaining DP instead of PP}
DP = Case DP_1
          <DP head> = <DP_1 head>
          <Case head type comma> = -
          <Case head type DP-initial> = +
          <DP_1 head type pronoun> = -  
          <DP_1 head type case-marked> = -  
          <DP head case> <= <Case head case>  
          <DP head type relative> <=  -  
          <DP head type case-marked> <= +  
          <DP option> = CaseI

rule {DP option NegI}
DP = Neg DP_1
          <DP head> = <DP_1 head>
          <DP head modifier> = <Neg>
          <Neg head type DP-initial> = +
          <Neg head type comma> = -
          <DP head infl polarity> <= negative
          <DP head type prefix> <= <Neg head type prefix>
          <DP option> = NegI

rule {DP option conj - conjoined DPs}
DP = (InitConj) DP_1 Conj DP_2
          <DP head> = <DP_2 head>
          <DP conjoined> = +
          <DP_1 conjoined> = -  |limit recursion
          <DP_1 head case> = <DP_2 head case>  
          <DP_2 head type relative> = -  
          <DP head infl polarity> <= <Conj head infl polarity>  
          <DP head agr number> <= <Conj head agr number>  
          <DP head type prefix> <= <InitConj head type prefix>
          <DP head type prefix> <= <DP_1 head type prefix>
          <DP option> = conj

rule {DP option conjPrefix - conjoined DPs}
DP = DP_1  DP_2
          <DP head> = <DP_2 head>
          <DP conjoined> = +
          <DP_1 conjoined> = -  |limit recursion
          <DP_2 head type prefix conj> = +
          <DP_1 head case> = <DP_2 head case>  
          <DP_2 head type relative> = -  
          <DP head infl polarity> <= <DP_2 head conj head infl polarity>  
          <DP head agr number> <= <DP_2 head conj head agr number>  
          <DP head type prefix> <= <DP_1 head type prefix>
          <DP option> = conjPrefix

rule {DP option conjSuffix - conjoined DPs}
DP = DP_1  DP_2
          <DP head> = <DP_2 head>
          <DP conjoined> = +
          <DP_1 conjoined> = -  |limit recursion
          <DP_1 head type suffix conj> = +
          <DP_1 head case> = <DP_2 head case>  
          <DP_2 head type relative> = -  
          <DP head infl polarity> <= <DP_1 head conj head infl polarity>  
          <DP head agr number> <= <DP_1 head conj head agr number>  
          <DP head type prefix> <= <DP_1 head type prefix>
          <DP option> = conjSuffix

rule {DP option conjListAppos - conjoined DPs, lists and appositives}
DP = DP_1  DP_2
          <DP head> = <DP_2 head>
          <DP conjoined> = +
          <DP_1 conjoined> = -                |limit recursion
          <DP_1 head type noN> = -
          <DP_2 head type noN> = -
          <DP_1 head type gerund> = -         | rule out gerunds 
          <DP_2 head type gerund> = -         | rule out gerunds
          <DP_1 head type verbheaded> = -     | rule out relative clauses 
          <DP_2 head type verbheaded> = -     | rule out relative clauses
          <DP_1 head type possessive> = -     | rule out possessors
          <DP_2 head type possessive> = -     | rule out possessors
          <DP_1 head type prefix poss> = -    | rule out possessors
          <DP_2 head type prefix poss> = -    | rule out possessors
          <DP_1 head type suffix poss> = -    | rule out possessors
          <DP_2 head type suffix poss> = -    | rule out possessors
          <DP_2 head type prefix conj> = -
          <DP_1 head type suffix conj> = -
|         <DP_1 head type comma> = +          | activate this constraint if/when you make comma a word-formation character
                                              | until then you will get ambiguity if you also have DP option conjNone, so deactivate one rule
          <DP_1 head case> = <DP_2 head case>  
          <DP head type prefix> <= <DP_1 head type prefix>
          <DP head type topic> <= <DP_1 head type topic>
          <DP option> = conjListAppos

rule {DP option RelCP - headless relative CP}
DP = CP
          <DP head> = <CP head>
          <DP head type case-marked> = -  
          <CP head type relative> = +
          <CP head type question> = -
          <CP head type wh> = +                  | only wh relative clauses
          <CP head type verbheaded> = +          | to restrict recursion
          <CP head fronted head type locative> = -
          <CP head embedded head fronted head type locative> = -
          <CP head infl> == ~[mood:imperative]
          <CP head> == [type:[auxiliary-VP:+]] -> ~[type:[auxiliary-C':-
                                                          auxiliary-I':-]]
          <DP option> = RelCP

rule {DP option RelIPAffixes - headless relative IP with relative affixes}
DP = IP
          <DP head> = <IP head>
          <DP head type case-marked> = -  
          <IP head type relative> = +
          <IP head type suffix relative> = +
          <IP head type prefix relative> = +
          <IP head type question> = -
          <IP head type verbheaded> = +          | to restrict recursion
          <IP head fronted head type locative> = -
          <IP head embedded head fronted head type locative> = -
          <IP head infl> == ~[mood:imperative]
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]]
          <DP option> = RelIPAffixes

rule {DP option IndefCP - indefinite clause}
DP = CP
          <DP head> = <CP head>
          <CP head type root> = -  
          <CP head type relative> = -
          <CP head type proper> = -
          <CP head type question> = -
          <CP head type verbheaded> = +          | to restrict recursion
          <CP head type wh> = -                  | only wh relative clauses
          <CP head fronted head type definite> = -
          <CP head fronted head type pronoun> = +
          <CP head infl> == ~[mood:imperative]
          <CP head> == [type:[auxiliary-VP:+]] -> ~[type:[auxiliary-C':-
                                                          auxiliary-I':-]]
          <DP option> = IndefCP

rule {DP option Gerund - gerund (phrase) as DP}
DP = VP
          <DP head> = <VP head>
          <VP head type gerund> = +  
          <VP head fronted> = none       | gerunds do not include fronting
          <DP head type wh> <= -      | gerunds are not wh
          <DP head type proper> <= -  | gerunds are not vocatives
          <DP head type verbheaded> <= + 
          <DP option> = Gerund

rule {DP option IndefPronF - interrogative indef phrase, final}
DP = Indef Pron
          <DP head> = <Indef head>
          <DP head type case-marked> = -  
          <Pron head type wh> = +
          <Pron head type DP-final> = +
          <DP head type suffix> <= <Pron head type suffix> 
          <DP head infl polarity> <= <Pron head infl polarity> 
          <DP head type definite> <= -
          <DP option> = IndefPronF

rule {DP option QPronF - quantifier indef phrase, final}
DP = N Q
          <DP head> = <N head>
          <DP head type case-marked> = -  
          <N head type generic> = +
          <Q head type DP-final> = +
          <Q head type suffix negative> = -
          <DP head type suffix> <= <Q head type suffix> 
          <DP head type definite> <= -
          <DP option> = QPronF

rule {DP option QPronFNeg - quantifier indef phrase, final}
DP = N Q
          <DP head> = <N head>
          <DP head type case-marked> = -  
          <N head type generic> = +
          <Q head type DP-final> = +
          <Q head type suffix negative> = +
          <DP head type suffix> <= <Q head type suffix> 
          <DP head infl polarity> <= negative
          <DP head type definite> <= -
          <DP option> = QPronFNeg

rule {DP option Pron - possessives, reflexives and reciprocals}
DP = Pron
          <DP head> = <Pron head>
          <DP head type case-marked> = -  
         {<Pron head type possessive> = +
         /<Pron head type reflexive> = +
         /<Pron head type reciprocal> = +
         }
          <DP option> = Pron

rule {DP option 0 - no Deg modifiers, not case-marked - or just on head}
DP = D'  
          <DP head> = <D' head>
          <DP head type case-marked> = -  
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <DP head type prefix negative> = -  
          <DP head type suffix negative> = -  
          <DP option> = 0

rule {DP option 0negI - no Deg modifiers, not case-marked - or just on head}
DP = D'  
          <DP head> = <D' head>
          <DP head type case-marked> = -  
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <DP head type prefix negative> = +  
          <DP head type suffix negative> = -  
          <DP head infl polarity> <= negative
          <DP option> = 0negI

rule {DP option 0negF - no Deg modifiers, not case-marked - or just on head}
DP = D'  
          <DP head> = <D' head>
          <DP head type case-marked> = -  
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <DP head type prefix negative> = -  
          <DP head type suffix negative> = +  
          <DP head infl polarity> <= negative
          <DP option> = 0negF

rule {DP option 0negBoth - no Deg modifiers, not case-marked - or just on head}
DP = D'  
          <DP head> = <D' head>
          <DP head type case-marked> = -  
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <DP head type prefix negative> = +  
          <DP head type suffix negative> = +  
          <DP head infl polarity> <= negative
          <DP option> = 0negBoth

rule {DP option 0clp - no Deg modifiers, proclitic case-marked}
DP = D'
          <DP head> = <D' head>
          <DP head type case-marked> <= +  
          <DP head type prefix negative> = -  
          <DP head type suffix negative> = -  
          <DP head type suffix case> = none  
          <DP head case> <= <D' head type prefix case>  | promote clitic case to phrase
          <DP head type prefix> == ~[case:none]  
          <DP option> = 0clp

rule {DP option 0clpNegI - no Deg modifiers, proclitic case-marked}
DP = D'
          <DP head> = <D' head>
          <DP head type case-marked> <= +  
          <DP head type prefix negative> = +  
          <DP head type suffix negative> = -  
          <DP head type suffix case> = none  
          <DP head case> <= <D' head type prefix case>  | promote clitic case to phrase
          <DP head infl polarity> <= negative
          <DP head type prefix> == ~[case:none]  
          <DP option> = 0clpNegI

rule {DP option 0clpNegF - no Deg modifiers, proclitic case-marked}
DP = D'
          <DP head> = <D' head>
          <DP head type case-marked> <= +  
          <DP head type prefix negative> = -  
          <DP head type suffix negative> = +  
          <DP head type suffix case> = none  
          <DP head case> <= <D' head type prefix case>  | promote clitic case to phrase
          <DP head infl polarity> <= negative
          <DP head type prefix> == ~[case:none]  
          <DP option> = 0clpNegF

rule {DP option 0clpNegBoth - no Deg modifiers, proclitic case-marked}
DP = D'
          <DP head> = <D' head>
          <DP head type case-marked> <= +  
          <DP head type prefix negative> = +  
          <DP head type suffix negative> = +  
          <DP head type suffix case> = none  
          <DP head case> <= <D' head type prefix case>  | promote clitic case to phrase
          <DP head infl polarity> <= negative
          <DP head type prefix> == ~[case:none]  
          <DP option> = 0clpNegBoth

rule {DP option 0cle - no Deg modifiers, enclitic case-marked}
DP = D'
          <DP head> = <D' head>
          <DP head type case-marked> <= +  
          <DP head type prefix negative> = -  
          <DP head type suffix negative> = -  
          <DP head type prefix case> = none  
          <DP head case> <= <D' head type suffix case>  | promote clitic case to phrase
          <DP head type suffix> == ~[case:none]  
          <DP option> = 0cle

rule {DP option 0cleNegI - no Deg modifiers, enclitic case-marked}
DP = D'
          <DP head> = <D' head>
          <DP head type case-marked> <= +  
          <DP head type prefix negative> = +  
          <DP head type suffix negative> = -  
          <DP head type prefix case> = none  
          <DP head case> <= <D' head type suffix case>  | promote clitic case to phrase
          <DP head infl polarity> <= negative
          <DP head type suffix> == ~[case:none]  
          <DP option> = 0cleNegI

rule {DP option 0cleNegF - no Deg modifiers, enclitic case-marked}
DP = D'
          <DP head> = <D' head>
          <DP head type case-marked> <= +  
          <DP head type prefix negative> = -  
          <DP head type suffix negative> = +  
          <DP head type prefix case> = none  
          <DP head case> <= <D' head type suffix case>  | promote clitic case to phrase
          <DP head infl polarity> <= negative
          <DP head type suffix> == ~[case:none]  
          <DP option> = 0cleNegF

rule {DP option 0cleNegBoth - no Deg modifiers, enclitic case-marked}
DP = D'
          <DP head> = <D' head>
          <DP head type case-marked> <= +  
          <DP head type prefix negative> = +  
          <DP head type suffix negative> = +  
          <DP head type prefix case> = none  
          <DP head case> <= <D' head type suffix case>  | promote clitic case to phrase
          <DP head infl polarity> <= negative
          <DP head type suffix> == ~[case:none]  
          <DP option> = 0cleNegBoth

rule {DP option 0clBoth - no Deg modifiers, pro and enclitic case-marked}
DP = D'
          <DP head> = <D' head>
          <DP head type case-marked> <= +  
          <DP head type prefix negative> = -  
          <DP head type suffix negative> = -  
          <D' head type prefix case> = <D' head type suffix case>  | case clitics unify
          <DP head case> <= <D' head type prefix case>  | promote clitic case to phrase
          <DP head type prefix> == ~[case:none]  
          <DP head type suffix> == ~[case:none]  
          <DP option> = 0clBoth

rule {DP option 0clBothNegI - no Deg modifiers, pro and enclitic case-marked}
DP = D'
          <DP head> = <D' head>
          <DP head type case-marked> <= +  
          <DP head type prefix negative> = +  
          <DP head type suffix negative> = -  
          <D' head type prefix case> = <D' head type suffix case>  | case clitics unify
          <DP head case> <= <D' head type prefix case>  | promote clitic case to phrase
          <DP head type prefix> == ~[case:none]  
          <DP head type suffix> == ~[case:none]  
          <DP head infl polarity> <= negative
          <DP option> = 0clBothNegI

rule {DP option 0clBothNegF - no Deg modifiers, pro and enclitic case-marked}
DP = D'
          <DP head> = <D' head>
          <DP head type case-marked> <= +  
          <DP head type prefix negative> = -  
          <DP head type suffix negative> = +  
          <D' head type prefix case> = <D' head type suffix case>  | case clitics unify
          <DP head case> <= <D' head type prefix case>  | promote clitic case to phrase
          <DP head type prefix> == ~[case:none]  
          <DP head type suffix> == ~[case:none]  
          <DP head infl polarity> <= negative
          <DP option> = 0clBothNegF

rule {DP option 0clBothNegBoth - no Deg modifiers, pro and enclitic case-marked}
DP = D'
          <DP head> = <D' head>
          <DP head type case-marked> <= +  
          <DP head type prefix negative> = +  
          <DP head type suffix negative> = +  
          <D' head type prefix case> = <D' head type suffix case>  | case clitics unify
          <DP head case> <= <D' head type prefix case>  | promote clitic case to phrase
          <DP head type prefix> == ~[case:none]  
          <DP head type suffix> == ~[case:none]  
          <DP head infl polarity> <= negative
          <DP option> = 0clBothNegBoth

rule {DP option 1 - degree modifier initial, not case-marked or just head marked}
DP = Deg D' 
          <DP head> = <D' head>
          <Deg head type modifies_NP> = +
          <Deg head type DP-initial> = +
          <Deg head type prefix negative> = -  
          <Deg head agr> = <DP head agr>
          <Deg head case> = <DP head case>
          <Deg head type comma> = -
          <DP head type case-marked> = - 
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <DP head type prefix> <= <Deg head type prefix>
          <DP option> = 1

rule {DP option 1NegI - degree modifier initial, not case-marked or just head marked}
DP = Deg D' 
          <DP head> = <D' head>
          <Deg head type modifies_NP> = +
          <Deg head type DP-initial> = +
          <Deg head type prefix negative> = +  
          <Deg head agr> = <DP head agr>
          <Deg head case> = <DP head case>
          <Deg head type comma> = -
          <DP head type case-marked> = - 
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <DP head type prefix> <= <Deg head type prefix>
          <DP head infl polarity> <= negative
          <DP option> = 1NegI

rule {DP option 1cl - degree modifier initial, proclitic case-marked}
DP = Deg D' 
          <DP head> = <D' head>
          <Deg head type modifies_NP> = +
          <Deg head type DP-initial> = +
          <Deg head type prefix negative> = -  
          <Deg head agr> = <DP head agr>
          <Deg head type comma> = -
          <DP head type prefix> <= <Deg head type prefix>
          <DP head type case-marked> <= +  
          <DP head case> <= <Deg head type prefix case>    |promote clitic case to phrase
          <Deg head type prefix> == ~[case:none]  
          <DP option> = 1cl

rule {DP option 1clNegI - degree modifier initial, proclitic case-marked}
DP = Deg D' 
          <DP head> = <D' head>
          <Deg head type modifies_NP> = +
          <Deg head type DP-initial> = +
          <Deg head type prefix negative> = +  
          <Deg head agr> = <DP head agr>
          <Deg head type comma> = -
          <DP head type prefix> <= <Deg head type prefix>
          <DP head type case-marked> <= +  
          <DP head case> <= <Deg head type prefix case>    |promote clitic case to phrase
          <DP head infl polarity> <= negative
          <Deg head type prefix> == ~[case:none]  
          <DP option> = 1clNegI

rule {DP option 1q - QP modifier initial, not case-marked or just on head}
DP = QP D'
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = -  
          <QP head agr> = <DP head agr>
          <QP head case> = <DP head case>
          <QP head type comma> = -
          <DP head type case-marked> = - 
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <DP head type prefix> <= <QP head type prefix>
          <DP option> = 1q

rule {DP option 1qNegI - QP modifier initial, not case-marked or just on head}
DP = QP D'
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = +  
          <QP head agr> = <DP head agr>
          <QP head case> = <DP head case>
          <QP head type comma> = -
          <DP head type case-marked> = - 
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <DP head type prefix> <= <QP head type prefix>
          <DP head infl polarity> <= negative
          <DP option> = 1qNegI

rule {DP option 1qcl - QP modifier initial, proclitic case-marked}
DP = QP D'
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = -  
          <QP head agr> = <DP head agr>
          <QP head type comma> = -
          <DP head type prefix> <= <QP head type prefix>
          <DP head case> <= <QP head type prefix case>  | promote clitic case
          <DP head type case-marked> <= +  
          <QP head type prefix> == ~[case:none]  
          <DP option> = 1qcl

rule {DP option 1qclNegI - QP modifier initial, proclitic case-marked}
DP = QP D'
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = +  
          <QP head agr> = <DP head agr>
          <QP head type comma> = -
          <DP head type prefix> <= <QP head type prefix>
          <DP head case> <= <QP head type prefix case>  | promote clitic case
          <DP head type case-marked> <= +  
          <DP head infl polarity> <= negative
          <QP head type prefix> == ~[case:none]  
          <DP option> = 1qclNegI

rule {DP option 1qCL - Classifier QP initial, not case-marked or just head}
DP = Class QP D'
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head case> = <DP head case>
          <DP head type case-marked> = -  
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <Class head type prefix negative> = -  
          <QP head type comma> = -
          <Class head type comma> = -
          <DP head type prefix> <= <Class head type prefix>
          <DP option> = 1qCL

rule {DP option 1qCLNegI - Classifier QP initial, not case-marked or just head}
DP = Class QP D'
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head case> = <DP head case>
          <DP head type case-marked> = -  
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <Class head type prefix negative> = +  
          <QP head type comma> = -
          <Class head type comma> = -
          <DP head type prefix> <= <Class head type prefix>
          <DP head infl polarity> <= negative
          <DP option> = 1qCLNegI

rule {DP option 1qCLo - QP initial, Classifier final, not case-marked or just head}
DP = QP D' Class
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = -  
          <Class head type suffix negative> = -  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head case> = <DP head case>
          <DP head type case-marked> = -  
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <QP head type comma> = -
          <D' head type comma> = -
          <DP head type comma> <= <Class head type comma>
          <DP head type prefix> <= <QP head type prefix>
          <DP head type suffix> <= <Class head type suffix>
          <DP option> = 1qCLo

rule {DP option 1qCLoNegI - QP initial, Classifier final, not case-marked or just head}
DP = QP D' Class
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = +  
          <Class head type suffix negative> = -  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head case> = <DP head case>
          <DP head type case-marked> = -  
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <QP head type comma> = -
          <D' head type comma> = -
          <DP head type comma> <= <Class head type comma>
          <DP head type prefix> <= <QP head type prefix>
          <DP head type suffix> <= <Class head type suffix>
          <DP head infl polarity> <= negative
          <DP option> = 1qCLoNegI

rule {DP option 1qCLoNegF - QP initial, Classifier final, not case-marked or just head}
DP = QP D' Class
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = -  
          <Class head type suffix negative> = +  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head case> = <DP head case>
          <DP head type case-marked> = -  
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <QP head type comma> = -
          <D' head type comma> = -
          <DP head type comma> <= <Class head type comma>
          <DP head type prefix> <= <QP head type prefix>
          <DP head type suffix> <= <Class head type suffix>
          <DP head infl polarity> <= negative
          <DP head type case-marked> = -  
          <DP option> = 1qCLoNegF

rule {DP option 1qCLoNegBoth - QP initial, Classifier final, not case-marked or just head}
DP = QP D' Class
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = +  
          <Class head type suffix negative> = +  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head case> = <DP head case>
          <DP head type case-marked> = -  
          <DP head type prefix case> = none  
          <DP head type suffix case> = none  
          <QP head type comma> = -
          <D' head type comma> = -
          <DP head type comma> <= <Class head type comma>
          <DP head type prefix> <= <QP head type prefix>
          <DP head type suffix> <= <Class head type suffix>
          <DP head infl polarity> <= negative
          <DP head type case-marked> = -  
          <DP option> = 1qCLoNegBoth

rule {DP option 1qclCL - Classifier QP initial, proclitic case-marked}
DP = Class QP D'
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <Class head type prefix negative> = -  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head type comma> = -
          <Class head type comma> = -
          <DP head type prefix> <= <Class head type prefix>
          <Class head type prefix> == ~[case:none]  
          <DP head case> <= <Class head type prefix case>  |promote clitic case to phrase  ????
          <DP head type case-marked> <= +  
          <DP option> = 1qclCL

rule {DP option 1qclCLNegI - Classifier QP initial, proclitic case-marked}
DP = Class QP D'
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <Class head type prefix negative> = +  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head type comma> = -
          <Class head type comma> = -
          <DP head type prefix> <= <Class head type prefix>
          <Class head type prefix> == ~[case:none]  
          <DP head case> <= <Class head type prefix case>  |promote clitic case to phrase  ????
          <DP head type case-marked> <= +  
          <DP head infl polarity> <= negative
          <DP option> = 1qclCLNegI

rule {DP option 1qclCLop - QP initial, Classifier final, proclitic case-marked}
DP = QP D' Class
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = -  
          <Class head type prefix negative> = -  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head type comma> = -
          <D' head type comma> = -
          <DP head type comma> <= <Class head type comma>
          <DP head type prefix> <= <QP head type prefix>
          <DP head type suffix> <= <Class head type suffix>
          <QP head type prefix> == ~[case:none]  
          <DP head case>  <= <QP head type prefix case>  |promote clitic case to phrase
          <DP head type case-marked> <= +  
          <DP option> = 1qclCLop

rule {DP option 1qclCLopNegI - QP initial, Classifier final, proclitic case-marked}
DP = QP D' Class
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = +  
          <Class head type prefix negative> = -  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head type comma> = -
          <D' head type comma> = -
          <DP head type comma> <= <Class head type comma>
          <DP head type prefix> <= <QP head type prefix>
          <DP head type suffix> <= <Class head type suffix>
          <QP head type prefix> == ~[case:none]  
          <DP head case>  <= <QP head type prefix case>  |promote clitic case to phrase
          <DP head type case-marked> <= +  
          <DP head infl polarity> <= negative
          <DP option> = 1qclCLopNegI

rule {DP option 1qclCLopNegF - QP initial, Classifier final, proclitic case-marked}
DP = QP D' Class
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = -  
          <Class head type prefix negative> = +  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head type comma> = -
          <D' head type comma> = -
          <DP head type comma> <= <Class head type comma>
          <DP head type prefix> <= <QP head type prefix>
          <DP head type suffix> <= <Class head type suffix>
          <QP head type prefix> == ~[case:none]  
          <DP head case>  <= <QP head type prefix case>  |promote clitic case to phrase
          <DP head type case-marked> <= +  
          <DP head infl polarity> <= negative
          <DP option> = 1qclCLopNegF

rule {DP option 1qclCLopNegBoth - QP initial, Classifier final, proclitic case-marked}
DP = QP D' Class
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = +  
          <Class head type prefix negative> = +  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head type comma> = -
          <D' head type comma> = -
          <DP head type comma> <= <Class head type comma>
          <DP head type prefix> <= <QP head type prefix>
          <DP head type suffix> <= <Class head type suffix>
          <QP head type prefix> == ~[case:none]  
          <DP head case>  <= <QP head type prefix case>  |promote clitic case to phrase
          <DP head type case-marked> <= +  
          <DP head infl polarity> <= negative
          <DP option> = 1qclCLopNegBoth

rule {DP option 1qclCLoe - QP initial, Classifier final, enclitic case-marked}
DP = QP D' Class
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = -  
          <Class head type suffix negative> = -  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head type comma> = -
          <D' head type comma> = -
          <DP head type comma> <= <Class head type comma>
          <DP head type prefix> <= <QP head type prefix>
          <DP head type suffix> <= <Class head type suffix>
          <Class head type suffix> == ~[case:none]  
          <DP head case>  <= <Class head type suffix case>  |promote clitic case to phrase
          <DP head type case-marked> <= +  
          <DP option> = 1qclCLoe

rule {DP option 1qclCLoeNegI - QP initial, Classifier final, enclitic case-marked}
DP = QP D' Class
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = +  
          <Class head type suffix negative> = -  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head type comma> = -
          <D' head type comma> = -
          <DP head type comma> <= <Class head type comma>
          <DP head type prefix> <= <QP head type prefix>
          <DP head type suffix> <= <Class head type suffix>
          <Class head type suffix> == ~[case:none]  
          <DP head case>  <= <Class head type suffix case>  |promote clitic case to phrase
          <DP head type case-marked> <= +  
          <DP head infl polarity> <= negative
          <DP option> = 1qclCLoeNegI

rule {DP option 1qclCLoeNegF - QP initial, Classifier final, enclitic case-marked}
DP = QP D' Class
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = -  
          <Class head type suffix negative> = +  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head type comma> = -
          <D' head type comma> = -
          <DP head type comma> <= <Class head type comma>
          <DP head type prefix> <= <QP head type prefix>
          <DP head type suffix> <= <Class head type suffix>
          <Class head type suffix> == ~[case:none]  
          <DP head case>  <= <Class head type suffix case>  |promote clitic case to phrase
          <DP head type case-marked> <= +  
          <DP head infl polarity> <= negative
          <DP option> = 1qclCLoeNegF

rule {DP option 1qclCLoeNegBoth - QP initial, Classifier final, enclitic case-marked}
DP = QP D' Class
          <DP head> = <D' head>
          <QP head type modifies_NP> = +
          <QP head type DP-initial> = +
          <QP head type prefix negative> = +  
          <Class head type suffix negative> = +  
          <QP head agr> = <DP head agr>
          <QP head agr class> = <Class head agr class>
          <QP head type comma> = -
          <D' head type comma> = -
          <DP head type comma> <= <Class head type comma>
          <DP head type prefix> <= <QP head type prefix>
          <DP head type suffix> <= <Class head type suffix>
          <Class head type suffix> == ~[case:none]  
          <DP head case>  <= <Class head type suffix case>  |promote clitic case to phrase
          <DP head type case-marked> <= +  
          <DP head infl polarity> <= negative
          <DP option> = 1qclCLoeNegBoth

rule {DBar option noNRel - pronoun,dem,quantifiers which can be modified by Rel Cl only (or partitive also with NP rules}
D' = {Pron / Dem / Q / Num / Deg}
          <D' head> = <Pron head>
          <D' head type case-marked> = -  
          <D' head type noN> = +  
          <Pron head type possessive> = -    | these use DP rule "Pron"
          <Pron head type reflexive> = -
          <Pron head type reciprocal> = - 
          <D' head> = <Pron head>
          <D' head> = <Dem head>
          <D' head> = <Q head>
          <D' head> = <Num head>
          <D' head> = <Deg head>
          <Deg head type quantifier> = +
          <Dem head type wh > = -             | so "which" not separate 
          <D' head type prefix poss> = -      | can't be possessors 
          <D' head type suffix poss> = -      | can't be possessors
          <Pron head> == ~[case:genitive]     | to stop split of possessor and N
          <D' option> = noNRel

rule {DBar option QuantDetInitial  - quantifier determiners initial}
D' = Det N'
          <D' head> = <N' head>
          <Det head type DP-initial> = +
          <Det head agr> = <N' head agr>
          <Det head type comma> = -
          <D' head type negative-polarity> <= <Det head type negative-polarity>
          <D' head type wh> <= <Det head type wh>
          <D' head type prefix> <= <Det head type prefix>
          <D' option> = QuantDetInitial

rule {DBar option 1frel - relative clause CP final}
D' = D'_1 CP
          <D' head> = <D'_1 head>
          <D'_1 head type proper> = -  | not proper noun
          <D'_1 head type pronoun> = -  | not pronoun
          <CP head type relative> = +
          <CP head type root> = -
          <CP head type verbheaded> = +          | to restrict recursion
          <CP head type question> = -
          <CP head fronted head type locative> = -
          <CP head embedded head fronted head type locative> = -
          <D' head agr animacy> = <CP head agr animacy>
          <D'_1 head type comma> = -
          <D' head type comma> <= <CP head type comma>
          <D' head type suffix> <= <CP head type suffix>
          <D' head type relative> <= +  | restrict rel cl in subjects/copulars
          <CP head> == [type:[auxiliary-VP:+]] -> ~[type:[auxiliary-C':-  
                                                          auxiliary-I':-]]
          <D' option> = 1frel

rule {DBar option 3relAffixesObj - relative clause IP final with affixes for object relative}
D' = D'_1 IP
          <D' head> = <D'_1 head>
          <D'_1 head type proper> = -  | not proper noun
          <D'_1 head type pronoun> = -  | not pronoun
          <IP head type suffix relative> = +
          <IP head type prefix relative> = +
          <IP head type root> = -
          <IP head type verbheaded> = +          | to restrict recursion
          <IP head type question> = -
          <IP head fronted head type locative> = -
          <IP head embedded head fronted head type locative> = -
          <D' head agr animacy> = <IP head object head agr animacy>
          <D'_1 head type comma> = -
          <D' head type comma> <= <IP head type comma>
          <D' head type suffix> <= <IP head type suffix>
          <D' head type relative> <= +  | restrict rel cl in subjects/copulars
          <IP head fronted> == ~[cat:FocusP]
          <IP head infl> == ~[mood:imperative] 
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]]    
          <D' option> = 3relAffixesObj

rule {DBar option 6aCL - article or demonstrative, Classifier with Dem, optional}
D' = NP
          <D' head> = <NP head>
          <D' option> = 6aCL

rule {DBar option 7a - article or demonstrative, Art initial, required}
D' = Art  NP
          <D' head> = <NP head>
          <Art head agr> = <NP head agr>
          <Art head case> = <NP head case>
          <Art head type comma> = -
          <NP head type comma> = -
          <D' head type wh> <= <Art head type wh>
          <D' head type definite> <= <Art head type definite>
          <D' head type prefix> <= <Art head type prefix>
          <D' option> = 7a

rule {DBar option 7aDem - article or demonstrative, Dem initial, required}
D' = Dem NP
          <D' head> = <NP head>
          <Dem head agr> =  <NP head agr>
          <Dem head case> = <NP head case>
          <Dem head type comma> = -
          <NP head type comma> = -
          <D' head type wh> <= <Dem head type wh>
          <D' head type prefix> <= <Dem head type prefix>
          <D' option> = 7aDem

rule {DBar option 7aCLf - article or demonstrative, Dem Class initial, required}
D' = Dem Class NP
          <D' head> = <NP head>
          <Dem head agr> =  <NP head agr>
          <Dem head agr class> =  <Class head agr class>
          <Dem head case> = <NP head case>
          <Class head type comma> = -
          <Dem head type comma> = -
          <NP head type comma> = -
          <D' head type wh> <= <Dem head type wh>
          <D' head type prefix> <= <Dem head type prefix>
          <D' option> = 7aCLf

rule {DBar option 7aCLo - article or demonstrative, Dem initial, Class final, required}
D' = Dem NP Class
          <D' head> = <NP head>
          <Dem head agr> =  <NP head agr>
          <Dem head agr class> =  <Class head agr class>
          <Dem head case> = <NP head case>
          <Dem head type comma> = -
          <NP head type comma> = -
          <D' head type wh> <= <Dem head type wh>
          <D' head type comma> <= <Class head type comma>
          <D' head type prefix> <= <Dem head type prefix>
          <D' head type suffix> <= <Class head type suffix>
          <D' option> = 7aCLo

rule {NP option 0 - not possessed}
NP = {N'' / N'}
          <NP head> = <N'' head>
          <NP head> = <N' head>
          <NP head type possessed> = -    
          <NP head possessor head agr person> = none
          <NP option> = 0

rule {NP option 6as - poss_suffix, possessor initial}
NP = {DP / Pron} {N'' / N'}
          <NP head> = <N'' head>
          <NP head> = <N' head>
          <NP head possessor> <= <DP>
          <NP head possessor> <= <Pron>
          <NP head type possessed> <= +    
          <NP head type genitive_PP> = -  | to restrict possessor w/ gen PP
          <DP head type quantifier> = -
          <DP head type noN> = -
          <DP head type verbheaded> = -
          <DP head type relative> = -
          <DP   head case> = genitive
          <Pron head case> = genitive
          <Pron head type possessive> = -    | not stand alone possessive
          <DP head type suffix poss> = +
          <DP head type comma> = -
          <Pron head type comma> = -
          <NP head type wh> <= <Pron head type wh>
          <NP head type prefix> <= <DP head type prefix>
          <NP head type prefix> <= <Pron head type prefix>
          <NP option> = 6as

rule {NBarBar option 1 - QPs initial}
N'' = QP N'
          <N'' head> = <N' head>
          <N'' head agr number> = <QP head agr number>
          <QP head type DP-initial> = -   | not quantifier like "all"
          <QP head type comma> = -
          <N'' head type prefix> <= <QP head type prefix>
          <N'' head type wh> <= <QP head type wh>
          <N'' option> = 1

rule {NBarBar option 1CL - Class QP initial}
N'' = Class QP N'
          <N'' head> = <N' head>
          <N'' head agr number> = <QP head agr number>
          <QP head type DP-initial> = -   | not quantifier like "all"
          <QP head type comma> = -
          <Class head type comma> = -
          <N'' head type prefix> <= <Class head type prefix>
          <N'' head type wh> <= <QP head type wh>
          <N'' option> = 1CL

rule {NBarBar option 1CLf - QP Class initial}
N'' = QP Class N'
          <N'' head> = <N' head>
          <N'' head agr number> = <QP head agr number>
          <QP head type DP-initial> = -   | not quantifier like "all"
          <QP head type comma> = -
          <Class head type comma> = -
          <N'' head type prefix> <= <QP head type prefix>
          <N'' head type wh> <= <QP head type wh>
          <N'' option> = 1CLf

rule {NBar option 1a - AdjP initial, recursive}
N'_1 = AdjP N'_2
          <N'_1 head> = <N'_2 head>
          <AdjP head agr> = <N'_2 head agr>
          <AdjP head case> = <N'_2 head case>
          <AdjP head type DP-initial> = +
          <AdjP head type prefix copular> = -      | only in no V/Aux copulars
          <AdjP head type suffix copular> = -
          <AdjP head type clausal-comp> = -
          <AdjP head type comma> = -
          <N'_1 head type prefix> <= <AdjP head type prefix> | N case marking can be overridden by AdjP, if AdjP also marked then another modifier required.
          <N'_1 option> = 1a

rule {NBar option 1aCL - Class AdjP initial, recursive}
N'_1 = Class AdjP N'_2
          <N'_1 head> = <N'_2 head>
          <AdjP head agr> = <N'_2 head agr>
          <AdjP head agr class> = <Class head agr class>
          <AdjP head case> = <N'_2 head case>
          <AdjP head type DP-initial> = +
          <AdjP head type prefix copular> = -      | only in no V/Aux copulars
          <AdjP head type suffix copular> = -
          <AdjP head type clausal-comp> = -
          <AdjP head type comma> = -
          <Class head type comma> = -
          <N'_1 head type prefix> <= <AdjP head type prefix>
          <N'_1 head type prefix> <= <AdjP head type prefix> | N case marking can be overridden by AdjP, if AdjP also marked then another modifier required.
          <N'_1 option> = 1aCL

rule {NBar option 1aCLf - AdjP Class initial, recursive}
N'_1 = AdjP Class N'_2
          <N'_1 head> = <N'_2 head>
          <AdjP head agr> = <N'_2 head agr>
          <AdjP head agr class> = <Class head agr class>
          <AdjP head case> = <N'_2 head case>
          <AdjP head type DP-initial> = +
          <AdjP head type prefix copular> = -      | only in no V/Aux copulars
          <AdjP head type suffix copular> = -
          <AdjP head type clausal-comp> = -
          <AdjP head type comma> = -
          <Class head type comma> = -
          <N'_1 head type prefix> <= <AdjP head type prefix> | N case marking can be overridden by AdjP, if AdjP also marked then another modifier required.
          <N'_1 option> = 1aCLf

rule {NBar option 4a - no compounds}
N' = N
          <N' head> = <N head>
          <N' option> = 4a

rule {NBar option 4e - no compounds, PP final}
N' = N PP
          <N' head> = <N head>
          <PP head type stranded> = -  | P must have overt complement
          <PP head type stand-alone> = -  | P must have overt complement
          <PP head infl valence> = active  | passive by-phrase not within NP
          <PP head type sentential> = -  | sentential not within NP
          <PP head type locative> = -  
          <N head type comma> = -
          <N' head type comma> <= <PP head type comma>
          <N' head type suffix> <= <PP head type suffix>
          <N' option> = 4e

rule {NBar option 4egen - no compounds, genitive PP final}
N' = N PP
          <N' head> = <N head>
          <PP head type stranded> = -  | P must have overt complement
          <PP head type stand-alone> = -  | P must have overt complement
          <PP head infl valence> = active  | passive by-phrase not within NP
          <PP head type sentential> = -  | sentential not within NP
          <PP head type locative> = -  
          <PP head case> = genitive
          <N' head type genitive_PP> = +  | to restrict cooccurrence w/ possessor
          <N head type comma> = -
          <N' head type comma> <= <PP head type comma>
          <N' head type suffix> <= <PP head type suffix>
          <N' option> = 4egen

rule {PP option conj - conjoined PPs}
PP = (InitConj) PP_1 Conj PP_2
          <PP head> = <PP_2 head>
          <PP conjoined> = +
          <PP_1 conjoined> = -  |limit recursion
          <PP option> = conj

rule {PP option conjPrefix - conjoined PPs}
PP = PP_1  PP_2
          <PP head> = <PP_2 head>
          <PP conjoined> = +
          <PP_1 conjoined> = -  |limit recursion
          <PP_2 head type prefix conj> = +
          <PP option> = conjPrefix

rule {PP option conjSuffix - conjoined PPs}
PP = PP_1  PP_2
          <PP head> = <PP_2 head>
          <PP conjoined> = +
          <PP_1 conjoined> = -  |limit recursion
          <PP_1 head type suffix conj> = +
          <PP option> = conjSuffix

rule {PP option 0 - no modifiers}
PP = P'
          <PP head> = <P' head>
          <PP option> = 0

rule {PP option 1a - degree word before}
PP = Deg P'
          <PP head> = <P' head>
          <Deg head type modifies_PP> = +
          <Deg head type PP-initial> = +
          <Deg head type comma> = -
          <PP option> = 1a

rule {PP option 2b - adverbial after}
PP = P' AdvP
          <PP head> = <P' head>
          <AdvP head type manner> = +
          <AdvP head type PP-final> = +
          <P' head type comma> = -
          <PP head type comma> <= <AdvP head type comma>
          <PP option> = 2b

rule {PP option 2bLoc - locative adverbial after}
PP = P' AdvP
          <PP head> = <P' head>
          <AdvP head type locative> = +
          <AdvP head type PP-final> = +
          <P' head type comma> = -
          <PP head type comma> <= <AdvP head type comma>
          <PP option> = 2bLoc

rule {PP option 2cLoc - locative adverbial both sides}
PP = AdvP_1 P' AdvP_2
          <PP head> = <P' head>
          <AdvP_1 head type locative> = +
          <AdvP_1 head type PP-initial> = +
          <AdvP_2 head type manner> = +
          <AdvP_2 head type PP-final> = +
          <AdvP_1 head type comma> = -
          <P' head type comma> = -
          <PP head type comma> <= <AdvP_2 head type comma>
          <PP option> = 2cLoc

rule {PP option 3a - ordinal before}
PP = AdjP P'
          <PP head> = <P' head>
          <AdjP head type ordinal> = +
          <AdjP head type PP-initial> = +
          <AdjP head type comma> = -
          <PP option> = 3a

rule {PBar option 1aNoCase - prepositions, P marks case, no case on DP complement}
P' = P DP
          <P' head> = <P head>
          <P' head object> = <DP>
          <P head type PP-initial> = +
          <DP head type case-marked> = -
          <DP head type relative> = -    | no relative clauses, use IP rule
          <P' head type stranded> = -    | not missing a complement
          <P' head type wh> <= <DP head type wh>  | wh for pied-piping
          <DP head type prefix copular> = -    | only in no V/Aux copulars
          <DP head type suffix copular> = -
          <P head type comma> = -
          <P' head type comma> <= <DP head type comma>
          <P' head type suffix> <= <DP head type suffix>
          <P' option> = 1aNoCase

rule {PBar option 2a - prepositions, locative AdvP complement}
P' = P AdvP
          <P' head> = <P head>
          <P head type PP-initial> = +
          <P head type locative> = +
          <AdvP head type locative> = +
          <P' head type stranded> = -    | not missing a complement
          <P head type comma> = -
          <P' head type comma> <= <AdvP head type comma>
          <P' head type suffix poss> <= <AdvP head type suffix poss>
          <P' head type temporal> <= <AdvP head type temporal>
          <P' head type locative> <= <AdvP head type locative>
          <P' head type sentential> <= -
          <P' option> = 2a

rule {PBar option 2c - prepositions, temporal AdvP complement}
P' = P AdvP
          <P' head> = <P head>
          <P head type PP-initial> = +
          <P head type temporal> = +
          <AdvP head type temporal> = +
          <P' head type stranded> = -    | not missing a complement
          <P head type comma> = -
          <P' head type comma> <= <AdvP head type comma>
          <P' head type suffix poss> <= <AdvP head type suffix poss>
          <P' head type temporal> <= <AdvP head type temporal>
          <P' head type locative> <= <AdvP head type locative>
          <P' head type sentential> <= -
          <P' option> = 2c

rule {PBar option 3a - prepositions, locative PP complement}
P' = P PP
          <P' head> = <P head>
          <P head type PP-initial> = +
          <P head type locative> = +
          <PP head type locative> = +
          <P' head type stranded> = -    | not missing a complement
          <P head type comma> = -
          <P' head type comma> <= <PP head type comma>
          <P' head type suffix poss> <= <PP head type suffix poss>
          <P' head type sentential> <= -
          <P' option> = 3a

rule {PBar option 4a - prepositions, gerund complement }
P' = P VP
          <P' head> = <P head>
          <P head type PP-initial> = +
          <VP head type gerund> = +
          <P' head type stranded> = -    | not missing a complement
          <P head type temporal> = +           | assuming only temporals take gerunds
          <P head type comma> = -
          <P' head type comma> <= <VP head type comma>
          <P' option> = 4a

rule {PBar option 5aN - PP affix on N}
P' = DP
          <P' head> = <DP head>
          <DP head type PP> = +
          <DP head type verbheaded> = -
          <P' head type stranded> = -
          <P' option> = 5aN

rule {AdjP option conj - conjoined AdjPs}
AdjP = (InitConj) AdjP_1 Conj AdjP_2
          <AdjP head> = <AdjP_2 head>
          <AdjP conjoined> = +
          <AdjP_1 conjoined> = -  |limit recursion
          <AdjP head type clausal-comp> = -
          <AdjP head type prefix> <= <AdjP_1 head type prefix>
          <AdjP option> = conj

rule {AdjP option conjPrefix - conjoined AdjPs}
AdjP = AdjP_1  AdjP_2
          <AdjP head> = <AdjP_2 head>
          <AdjP conjoined> = +
          <AdjP_1 conjoined> = -  |limit recursion
          <AdjP head type clausal-comp> = -
          <AdjP_2 head type prefix conj> = +
          <AdjP head type prefix> <= <AdjP_1 head type prefix>
          <AdjP option> = conjPrefix

rule {AdjP option conjSuffix - conjoined AdjPs}
AdjP = AdjP_1  AdjP_2
          <AdjP head> = <AdjP_2 head>
          <AdjP conjoined> = +
          <AdjP_1 conjoined> = -  |limit recursion
          <AdjP head type clausal-comp> = -
          <AdjP_1 head type suffix conj> = +
          <AdjP head type prefix> <= <AdjP_1 head type prefix>
          <AdjP option> = conjSuffix

rule {AdjP option 0 - no modifiers}
AdjP = Adj'
          <AdjP head> = <Adj' head>
          <AdjP option> = 0

rule {AdjP option 1d - degree modifiers initial}
AdjP = Deg Adj'
          <AdjP head> = <Adj' head>
          <Deg head type modifies_Adj> = +
          <Deg head type AdjP-initial>   = +
          <Deg head type comma> = -
          <AdjP head type prefix> <= <Deg head type prefix>
          <AdjP option> = 1d

rule {AdjP option 1m - manner modifiers initial}
AdjP = AdvP Adj'
          <AdjP head> = <Adj' head>
          <AdvP head type modifies_Adj> = +
          <AdvP head type AdjP-initial>   = +
          <AdvP head type comma> = -
          <AdjP head type prefix> <= <AdvP head type prefix>
          <AdjP option> = 1m

rule {Adj' option 0 - no complements}
Adj' = Adj
          <Adj' head> = <Adj head>
          <Adj' head type clausal-comp> = -
          <Adj' option> = 0

rule {Adj' option part - participles}
Adj' = V
          <Adj' head> = <V head> 
          <V head type participle> = +
          <V head fronted> = none           | not focus or question
          <V conjoined> = -                 | conjoined use AdjP conjoined rule
          <Adj' option> = part            

rule {Adj' option 1a - Adj initial, sentential complement}
Adj' = Adj {CP / IP}
          <Adj' head> = <Adj head>
          <Adj head embedded> = <CP>
          <Adj head embedded> = <IP>
          <CP head type root> = -
          <CP head type relative> = -
          <IP head type relative> = -
          <IP head type comp> = -
          <IP head type prefix comp> = - | uses CP
          <IP head type suffix comp> = -
          <IP head type root> = -
          <IP head type question> = -
          <Adj head type sentential> = +
          <Adj' head type clausal-comp> <= +
          <Adj head type comma> = -
          <Adj' head type comma> <= <CP head type comma>
          <Adj' head type comma> <= <IP head type comma>
          <Adj' head type suffix> <= <CP head type suffix>
          <Adj' head type suffix> <= <IP head type suffix>
          <Adj' head embedded head fronted> == ~[cat:FocusP]   | rule out FocusP
          <Adj' head embedded head fronted> == ~[cat:Adv]        | rule out AdvP 
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]]    
          <CP head> == [type:[auxiliary-VP:+]] -> ~[type:[auxiliary-C':-  
                                                          auxiliary-I':-]]    
          <Adj' option> = 1a

rule {AdvP option NegI}
AdvP = Neg AdvP_1
          <AdvP head> = <AdvP_1 head>
          <AdvP head modifier> = <Neg>
          <Neg head type AdvP-initial> = +
          <Neg head type comma> = -
          <AdvP head infl polarity> <= negative
          <AdvP head type prefix> <= <Neg head type prefix>
          <AdvP head> == [type:[manner:+]] -> [modifier:[head:[type:[modifies_Adv:[manner:+]]]]]
          <AdvP head> == [type:[temporal:+]] -> [modifier:[head:[type:[modifies_Adv:[temporal:+]]]]]
          <AdvP head> == [type:[locative:+]] -> [modifier:[head:[type:[modifies_Adv:[locative:+]]]]]
          <AdvP option> = NegI

rule {AdvP option NegF}
AdvP =  AdvP_1 Neg
          <AdvP head> = <AdvP_1 head>
          <AdvP head modifier> = <Neg>
          <Neg head type AdvP-final> = +
          <AdvP_1 head type comma> = -
          <AdvP head infl polarity> <= negative
          <AdvP head type suffix> <= <Neg head type suffix>
          <AdvP head type comma> <= <Neg head type comma>
          <AdvP head> == [type:[manner:+]] -> [modifier:[head:[type:[modifies_Adv:[manner:+]]]]]
          <AdvP head> == [type:[temporal:+]] -> [modifier:[head:[type:[modifies_Adv:[temporal:+]]]]]
          <AdvP head> == [type:[locative:+]] -> [modifier:[head:[type:[modifies_Adv:[locative:+]]]]]
         <AdvP option> = NegF

rule {AdvP option IndefI - interrogative indef phrase, initial}
AdvP = Adv Indef
          <AdvP head> = <Indef head>
          <Adv head type wh> = +
          <Adv head type AdvP-initial> = +
          <AdvP head type prefix> <= <Adv head type prefix> 
          <AdvP head type suffix> <= <Indef head type suffix> 
          <AdvP head type definite> <= -
          <AdvP option> = IndefI

rule {AdvP option IndefF - interrogative indef phrase, final}
AdvP = Indef Adv
          <AdvP head> = <Indef head>
          <Adv head type wh> = +
          <Adv head type AdvP-final> = +
          <AdvP head type prefix> <= <Indef head type prefix> 
          <AdvP head type suffix> <= <Adv head type suffix> 
          <AdvP head type definite> <= -
          <AdvP option> = IndefF

rule {AdvP option QI - quantifier indef phrase, initial}
AdvP = Q N
          <AdvP head> = <N head>
          <N head type generic> = +
         {<N head type temporal> = +
         /<N head type locative> = + } 
          <Q head type AdvP-initial> = +
          <AdvP head type prefix> <= <Q head type prefix> 
          <AdvP head type suffix> <= <N head type suffix> 
          <AdvP head type definite> <= -
          <AdvP option> = QI

rule {AdvP option QF - quantifier indef phrase, final}
AdvP = N Q
          <AdvP head> = <N head>
          <N head type generic> = +
         {<N head type temporal> = +
         /<N head type locative> = + } 
          <Q head type AdvP-final> = +
          <AdvP head type prefix> <= <N head type prefix> 
          <AdvP head type suffix> <= <Q head type suffix> 
          <AdvP head type definite> <= -
          <AdvP option> = QF

rule {AdvP option 0 - no modifiers}
AdvP = Adv'
          <AdvP head> = <Adv' head>
          <AdvP option> = 0

rule {AdvP option 2 - modifiers final}
AdvP = Adv' Deg
          <AdvP head> = <Adv' head>
          <AdvP head modifier> = <Deg head>
          <Deg head type AdvP-final> = +
          <Adv' head type comma> = -
          <AdvP head type comma> <= <Deg head type comma>
          <AdvP head type suffix> <= <Deg head type suffix>
          <AdvP head> == [type:[manner:+]] -> [modifier:[head:[type:[modifies_Adv:[manner:+]]]]]
          <AdvP head> == [type:[temporal:+]] -> [modifier:[head:[type:[modifies_Adv:[temporal:+]]]]]
          <AdvP head> == [type:[locative:+]] -> [modifier:[head:[type:[modifies_Adv:[locative:+]]]]]
          <AdvP option> = 2

rule {AdvP option 3 - modifiers both sides}
AdvP = Deg_1 Adv' Deg_2
          <AdvP head> = <Adv' head>
          <AdvP head modifier> = <Deg_1 head>
          <Deg_1 head type AdvP-initial> = +
          <Deg_2 head type AdvP-final> = +
          <Deg_1 head type comma> = -
          <Adv' head type comma> = -
          <AdvP head type comma> <= <Deg_2 head type comma>
          <AdvP head type prefix> <= <Deg_1 head type prefix>
          <AdvP head type suffix> <= <Deg_2 head type suffix>
          <AdvP head> == [type:[manner:+]] -> [modifier:[head:[type:[modifies_Adv:[manner:+]]]]]
          <AdvP head> == [type:[temporal:+]] -> [modifier:[head:[type:[modifies_Adv:[temporal:+]]]]]
          <AdvP head> == [type:[locative:+]] -> [modifier:[head:[type:[modifies_Adv:[locative:+]]]]]
          <AdvP option> = 3

rule {AdvBar option 0 - no complements}
Adv' = Adv
          <Adv' head> = <Adv head>
          <Adv' option> = 0

rule {AdvBar option 1f - Adv complements final}
Adv' = Adv Adv_1
          <Adv' head> = <Adv head>
          <Adv head type temporal> = +
          <Adv_1 head type temporal> = +
          <Adv head type takes_Adv> = +
          <Adv head type comma> = -
          <Adv' head type comma> <= <Adv_1 head type comma>
          <Adv' head type suffix> <= <Adv_1 head type suffix>
          <Adv' option> = 1f

rule {AdvBar option 1i - Adv complements initial}
Adv' = Adv_1 Adv
          <Adv' head> = <Adv head>
          <Adv head type temporal> = +
          <Adv_1 head type temporal> = +
          <Adv head type takes_Adv> = +
          <Adv_1 head type comma> = -
          <Adv' head type prefix> <= <Adv_1 head type prefix>
          <Adv' option> = 1i

rule {AdvBar option 2f - DP complements final}
Adv' = Adv DP
          <Adv' head> = <Adv head>
          <Adv head type takes_DP> = +
          <Adv head type comma> = -
          <Adv' head type comma> <= <DP head type comma>
          <Adv' head type suffix> <= <DP head type suffix>
          <Adv' option> = 2f

rule {AdvBar option 2i - DP complements initial}
Adv' = DP Adv
          <Adv' head> = <Adv head>
          <Adv head type takes_DP> = +
          <DP head type comma> = -
          <Adv' head type prefix> <= <DP head type prefix>
          <Adv' option> = 2i

rule {AdvBar option 3f - IP complements final}
Adv' = Adv IP
          <Adv' head> = <Adv head>
          <Adv head type sentential> = +
          <Adv head embedded> = <IP>
          <IP head fronted> = none
          <IP head type auxiliary-C'> = -
          <IP head type question> = -
          <IP head type relative> = -
|         <IP head type verbheaded> = +
          <IP head type root> = -
          <Adv head type comma> = -
          <Adv' head type comma> <= <IP head type comma>
          <Adv' head type suffix> <= <IP head type suffix>
          <Adv' head type motion> <= <IP head type motion>  |keep locative with motion V
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]]
          <Adv' option> = 3f

rule {AdvBar option 3fIndef - Indefinite with IP complements final}
Adv' = Adv IP
          <Adv' head> = <Adv head>
          <Adv head type definite> = -
          <IP head fronted> = <Adv>
          <IP head type auxiliary-C'> = -
          <IP head type question> = -
          <IP head type relative> = -
|         <IP head type verbheaded> = +
          <IP head type root> = -
          <Adv head type comma> = -
          <Adv' head type comma> <= <IP head type comma>
          <Adv' head type suffix> <= <IP head type suffix>
          <Adv' head type motion> <= <IP head type motion>  |keep locative with motion V
          <IP head> == [type:[auxiliary-VP:+]] -> [type:[auxiliary-I':+]]
          <Adv' option> = 3fIndef

rule {AdvBar option 4f - CP complements final}
Adv' = Adv CP
          <Adv' head> = <Adv head>
          <Adv head type sentential> = +
          <Adv head embedded> = <CP>
          <CP head type question> = -
          <CP head type relative> = -
          <CP head type root> = -
          <CP head fronted> = none
          <Adv head type comma> = -
          <Adv' head type comma> <= <CP head type comma>
          <Adv' head type suffix> <= <CP head type suffix>
          <CP head> == [type:[auxiliary-VP:+]] -> ~[type:[auxiliary-C':-  
                                                          auxiliary-I':-]] 
          <Adv' option> = 4f

rule {QP option 0 - no modifiers}
QP = Q
          <QP head> = <Q head>
          <QP option> = 0

rule {QP option 1 - modifiers initial}
QP = Deg Q
          <QP head> = <Q head>
          <Deg head type modifies_Q> = +
          <Deg head type QP-initial> = +
          <Deg head type comma> = -
          <QP head type prefix> <= <Deg head type prefix>
          <QP option> = 1

rule {QP option Num0f - no modifiers, head final}
QP = (Num_5 (Conj_4) (Num_4 (Conj_3) (Num_3 (Conj_2) (Num_2 (Conj_1) (Num_1 (Conj)))))) Num
          <QP head> = <Num head>
          <Num head type quantifier> = +
          <Conj head type conjoins_DP> = +
          <Conj_1 head type conjoins_DP> = +
          <Conj_2 head type conjoins_DP> = +
          <Conj_3 head type conjoins_DP> = +
          <Conj_4 head type conjoins_DP> = +
          <QP option> = Num0f

rule {QP option Num1f - modifiers initial, head final}
QP = Num_6 (Num_5 (Conj_4) (Num_4 (Conj_3) (Num_3 (Conj_2) (Num_2 (Conj_1) (Num_1 (Conj)))))) Num
          <QP head> = <Num head>
          <Num head type quantifier> = +
          <Num_6 head type ordinal> = +
          <Num_6 head type QP-initial> = +
          <Num_6 head type comma> = -
          <Conj head type conjoins_DP> = +
          <Conj_1 head type conjoins_DP> = +
          <Conj_2 head type conjoins_DP> = +
          <Conj_3 head type conjoins_DP> = +
          <Conj_4 head type conjoins_DP> = +
          <QP option> = Num1f
