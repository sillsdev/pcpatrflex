
| DO NOT EDIT THIS FILE DIRECTLY!
|

| ------------------------------------------------------------
|                TOP-LEVEL WORD
| ------------------------------------------------------------
rule {Top-level cliticless word}
  OrthographicWord = Word
								| percolation
		<OrthographicWord synCat>       = <Word synCat>
		<OrthographicWord morphoSyntax> = <Word morphoSyntax>

rule {Top-level word with one or more proclitics and enclitics}
  OrthographicWord = Proclitics Word Enclitics
								| percolation
		<OrthographicWord synCat>       = <Word synCat>
		<OrthographicWord morphoSyntax> = <Word morphoSyntax>
		<OrthographicWord proclitics morphoSyntax> = <Proclitics morphoSyntax>
		<OrthographicWord enclitics morphoSyntax> = <Enclitics morphoSyntax>
								| drip (pass down)
		<Word synCat>       = <Proclitics synCat>
		<Word synCat>       = <Enclitics synCat>

rule {Top-level word with one or more proclitics}
  OrthographicWord = Proclitics Word
								| percolation
		<OrthographicWord synCat>       = <Word synCat>
		<OrthographicWord morphoSyntax> = <Word morphoSyntax>
		<OrthographicWord proclitics morphoSyntax> = <Proclitics morphoSyntax>
								| drip (pass down)
		<Word synCat>       = <Proclitics synCat>

rule {Top-level word with one or more enclitics}
  OrthographicWord =            Word Enclitics
								| percolation
		<OrthographicWord synCat>       = <Word synCat>
		<OrthographicWord morphoSyntax> = <Word morphoSyntax>
		<OrthographicWord enclitics morphoSyntax> = <Enclitics morphoSyntax>
								| drip (pass down)
		<Word synCat>       = <Enclitics synCat>


| ------------------------------------------------------------
|                CLITICS
| ------------------------------------------------------------
rule {One or more proclitics}
  Proclitics_1 = proclitic (Proclitics_2)
								| percolation
		<Proclitics_1 morphoSyntax> = <proclitic morphoSyntax>
								| drip (pass down)
		<Proclitics_1 synCat>       = <Proclitics_2 synCat>
								| constraints
		<Proclitics_2 morphoSyntax> = <proclitic morphoSyntax>
		<Proclitics_1 synCat>       = <proclitic fromCat>

rule {One or more enclitics}
  Enclitics_1  = (Enclitics_2) enclitic
								| percolation
		<Enclitics_1 morphoSyntax> = <enclitic morphoSyntax>
								| drip (pass down)
		<Enclitics_1 synCat>       = <Enclitics_2 synCat>
								| constraints
		<Enclitics_2 morphoSyntax> = <enclitic morphoSyntax>
		<Enclitics_1 synCat>       = <enclitic fromCat>


| ------------------------------------------------------------
|                WORD
| ------------------------------------------------------------
rule {clitic word}
  Word = clitic
								| percolation
		<Word synCat>       = <clitic rootCat>
		<Word morphoSyntax> = <clitic morphoSyntax>

rule {Fully analyzed word}
  Word = Full
								| percolation
		<Word synCat>       = <Full synCat>
		<Word morphoSyntax> = <Full morphoSyntax>
		<Full> == [requiresInflection : -] /  | doesn't require inflection or
				  [inflected : +]             | is inflected

rule {Partially analyzed word}
  Word = Partial
								| percolation
		<Word synCat>       = <Partial synCat>
		<Word morphoSyntax> = <Partial morphoSyntax>

| ------------------------------------------------------------
|                FULLY ANALYZED WORD PORTION
| ------------------------------------------------------------

rule {Fully analyzed stem with no inflectional template}
  Full = Stem
								| percolation
		<Full synCat>       = <Stem synCat>
		<Full morphoSyntax> = <Stem morphoSyntax>
		<Full stratum>      = <Stem stratum>
		<Full requiresInflection> = <Stem requiresInflection>
						  | constraint
		<Full inflected>    = -  | this Full word category is not inflected
		<Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding

rule {Fully analyzed stem with a final inflectional template 8811}
  Full =  3783_0 Stem 2191_0
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
  <Stem  synCat>       = 5394
  <Stem morphoSyntax>    = <3783_0 morphoSyntax>
  <Stem synCat>          = <3783_0 envCat>   | allomorph
  <Stem exception>       = <3783_0 fromException>
  <Stem inflectionClass> = <3783_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <3783_0 morphoSyntax>
  <Stem morphoSyntax>    = <2191_0 morphoSyntax>
  <Stem synCat>          = <2191_0 envCat>   | allomorph
  <Stem exception>       = <2191_0 fromException>
  <Stem inflectionClass> = <2191_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <2191_0 morphoSyntax>
rule {Fully analyzed stem with a final inflectional template 6920}
  Full =  Stem (7818_0)
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
{
  <Stem  synCat>       = 8060 /
  <Stem  synCat>       =  1877 /
  <Stem  synCat>       =  6700 /
  <Stem  synCat>       =  6452
}
  <Stem morphoSyntax>    = <7818_0 morphoSyntax>
  <Stem synCat>          = <7818_0 envCat>   | allomorph
  <Stem exception>       = <7818_0 fromException>
  <Stem inflectionClass> = <7818_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <7818_0 morphoSyntax>
rule {Fully analyzed stem with a final inflectional template 822}
  Full =  Stem (6865_0) (7818_1)
														 | percolation
  <Full synCat>       = <Stem synCat>
  <Full morphoSyntax> = <Stem morphoSyntax>
  <Full inflected>    = +
  <Full requiresInflection> = -
						  | constraints
  <Stem blocksInflection> = - | prevent a non-final template from immediately being inflected without any intervening derivation or compounding
  <Stem  synCat>       = 6700
  <Stem morphoSyntax>    = <6865_0 morphoSyntax>
  <Stem synCat>          = <6865_0 envCat>   | allomorph
  <Stem exception>       = <6865_0 fromException>
  <Stem inflectionClass> = <6865_0 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <6865_0 morphoSyntax>
  <Stem morphoSyntax>    = <7818_1 morphoSyntax>
  <Stem synCat>          = <7818_1 envCat>   | allomorph
  <Stem exception>       = <7818_1 fromException>
  <Stem inflectionClass> = <7818_1 inflectionClass>
  <Full stemNameInfo morphoSyntax> = <7818_1 morphoSyntax>
| ------------------------------------------------------------
|                STEM
| ------------------------------------------------------------

rule {Stem consisting of a single root}
  Stem = root
					| percolation
		<Stem synCat>          = <root rootCat>
		<Stem morphoSyntax>    = <root morphoSyntax>
		<Stem inflectionClass> = <root inflectionClass>
		<Stem stratum>         = <root stratum>
		<Stem requiresInflection> = <root requiresInflection>
		<Stem stemName>   = <root stemName>
		<Stem exception>       = <root exception>
		<root> == ~[rootCat : unknown]  | root category has to be overt


rule {Stem with a derivational prefix}
  Stem_1 = derivPfx Stem_2
								| percolation
		<Stem_1 synCat>           = <Stem_2 synCat> | default to Stem 2 (in case deriv prefix has no category)
		<Stem_1 synCat>           <= <derivPfx toCat> | use priority union to override anything in Stem_2
		<Stem_1 morphoSyntax>     = <Stem_2 morphoSyntax>
		<Stem_1 stratum>          = <derivPfx stratum>
		<Stem_1 requiresInflection> = <Stem_2 requiresInflection> | default to stem 2 (in case deriv prefix has no to category)
		<Stem_1 requiresInflection> <= <derivPfx requiresInflection> | use deriv prefix when it has a category
		<Stem_1 exception>        = <Stem_2 exception>
		<Stem_1 stemName>         = <Stem_2 stemName>
		<Stem_1 morphoSyntax>    <= <derivPfx toMorphoSyntax>
		<Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		<Stem_1 inflectionClass> <= <derivPfx toInflectionClass>
		<Stem_1 exception>       <= <derivPfx toException>
		<Stem_1 blocksInflection> = - | This stem can now be inflected
								| constraints
		<Stem_2 morphoSyntax>     = <derivPfx fromMorphoSyntax>
		<Stem_2 inflectionClass>  = <derivPfx fromInflectionClass>
		<Stem_2 stemName>         = <derivPfx stemName>
		<Stem_2 exception>        = <derivPfx fromException>
		{
		
		<Stem_2 synCat>           = <derivPfx fromCat>
		<Stem_2 synCat>           = <derivPfx envCat>
		/
		<derivPfx fromCat>        = 8060
		<derivPfx envCat>         = 8060
{
	  
		<Stem_2 synCat>           = 8060 /
		<Stem_2 synCat>           = 1877 /
		<Stem_2 synCat>           = 6700 /
		<Stem_2 synCat>           = 6452
}

	  }

rule {Stem with a derivational suffix}
  Stem_1 =          Stem_2 derivSfx
								| percolation
		<Stem_1 synCat>           = <Stem_2 synCat> | default to Stem 2 (in case deriv suffix has no to category)
		<Stem_1 synCat>           <= <derivSfx toCat> | use priority union to override anything in Stem_2
		<Stem_1 morphoSyntax>     = <Stem_2 morphoSyntax>
		<Stem_1 stratum>          = <derivSfx stratum>
		<Stem_1 requiresInflection> = <Stem_2 requiresInflection> | default to stem 2 (in case deriv suffix has no to category)
		<Stem_1 requiresInflection> <= <derivSfx requiresInflection> | use deriv suffix when it has a category
		<Stem_1 exception>        = <Stem_2 exception>
		<Stem_1 stemName>         = <Stem_2 stemName>
		<Stem_1 morphoSyntax>    <= <derivSfx toMorphoSyntax>
		<Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		<Stem_1 inflectionClass> <= <derivSfx toInflectionClass>
		<Stem_1 exception>       <= <derivSfx toException>
		<Stem_1 blocksInflection> = - | This stem can now be inflected
								| constraints
		<Stem_2 morphoSyntax>     = <derivSfx fromMorphoSyntax>
		<Stem_2 inflectionClass>  = <derivSfx fromInflectionClass>
		<Stem_2 stemName>         = <derivSfx stemName>
		<Stem_2 exception>        = <derivSfx fromException>
		{
		
		<Stem_2 synCat>           = <derivSfx fromCat>
		<Stem_2 synCat>           = <derivSfx envCat>
		/
		<derivSfx fromCat>        = 8060
		<derivSfx envCat>         = 8060
{
	  
		<Stem_2 synCat>           = 8060 /
		<Stem_2 synCat>           = 1877 /
		<Stem_2 synCat>           = 6700 /
		<Stem_2 synCat>           = 6452
}

	  }
rule {Stem with a derivational circumfix}
		 Stem_1 = derivCircumPfx Stem_2 derivCircumSfx
		 | percolation
		 <Stem_1 synCat>           = <Stem_2 synCat> | default to Stem 2 (in case deriv circumfixes have no to category)
		 <Stem_1 synCat>           <= <derivCircumPfx toCat> | use priority union to override anything in Stem_2
		 <Stem_1 synCat>           <= <derivCircumSfx toCat>
		 <Stem_1 morphoSyntax>     = <Stem_2 morphoSyntax>
		 <Stem_1 stratum>          = <derivCircumPfx stratum>
		 <Stem_1 stratum>          = <derivCircumSfx stratum>
		 <Stem_1 requiresInflection> = <Stem_2 requiresInflection> | default to stem 2 (in case deriv prefix has no category)
		 <Stem_1 requiresInflection> <= <derivCircumPfx requiresInflection> | use deriv prefix when it has a category
		 <Stem_1 requiresInflection> <= <derivCircumSfx requiresInflection> | use deriv suffix when it has a category
		 <Stem_1 exception>        = <Stem_2 exception>
		 <Stem_1 stemName>         = <Stem_2 stemName>
		 <Stem_1 morphoSyntax>    <= <derivCircumPfx toMorphoSyntax>
		 <Stem_1 morphoSyntax>    <= <derivCircumSfx toMorphoSyntax>
		 <Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		 <Stem_1 inflectionClass> <= <derivCircumPfx toInflectionClass>
		 <Stem_1 inflectionClass> <= <derivCircumSfx toInflectionClass>
		 <Stem_1 exception>       <= <derivCircumPfx toException>
		 <Stem_1 exception>       <= <derivCircumSfx toException>
		 <Stem_1 blocksInflection> = - | This stem can now be inflected
		 | constraints
		 <Stem_2 morphoSyntax>     = <derivCircumPfx fromMorphoSyntax>
		 <Stem_2 morphoSyntax>     = <derivCircumSfx fromMorphoSyntax>
		 <Stem_2 inflectionClass>  = <derivCircumPfx fromInflectionClass>
		 <Stem_2 inflectionClass>  = <derivCircumSfx fromInflectionClass>
		 <Stem_2 stemName>         = <derivCircumPfx stemName>
		 <Stem_2 stemName>         = <derivCircumSfx stemName>
		 <Stem_2 exception>        = <derivCircumPfx fromException>
		 <Stem_2 exception>        = <derivCircumSfx fromException>
	  {
	  
		<Stem_2 synCat>           = <derivCircumPfx fromCat>
		<Stem_2 synCat>           = <derivCircumPfx envCat>
		<Stem_2 synCat>           = <derivCircumSfx fromCat>
		<Stem_2 synCat>           = <derivCircumSfx envCat>
		/
		<derivCircumPfx fromCat>        = 8060
		<derivCircumPfx envCat>         = 8060
		<derivCircumSfx fromCat>        = 8060
		<derivCircumSfx envCat>         = 8060
{
	  
		<Stem_2 synCat>           = 8060 /
		<Stem_2 synCat>           = 1877 /
		<Stem_2 synCat>           = 6700 /
		<Stem_2 synCat>           = 6452
}

	  }
	  
rule {Stem with a derivational circumfix where the rightmost part is an infix (and so may end up as a prefix}
		 Stem_1 = derivCircumPfx_1 derivCircumPfx_2 Stem_2
		 | percolation
		 <Stem_1 synCat>           = <Stem_2 synCat> | default to Stem 2 (in case deriv circumfixes have no to category)
		 <Stem_1 synCat>           <= <derivCircumPfx_1 toCat> | use priority union to override anything in Stem_2
		 <Stem_1 synCat>           <= <derivCircumPfx_2 toCat>
		 <Stem_1 morphoSyntax>     = <Stem_2 morphoSyntax>
		 <Stem_1 stratum>          = <derivCircumPfx_1 stratum>
		 <Stem_1 stratum>          = <derivCircumPfx_2 stratum>
		 <Stem_1 requiresInflection> = <Stem_2 requiresInflection> | default to stem 2 (in case deriv prefix has no category)
		 <Stem_1 requiresInflection> <= <derivCircumPfx_1 requiresInflection> | use deriv prefix when it has a category
		 <Stem_1 requiresInflection> <= <derivCircumPfx_2 requiresInflection> | use deriv suffix when it has a category
		 <Stem_1 exception>        = <Stem_2 exception>
		 <Stem_1 stemName>         = <Stem_2 stemName>
		 <Stem_1 morphoSyntax>    <= <derivCircumPfx_1 toMorphoSyntax>
		 <Stem_1 morphoSyntax>    <= <derivCircumPfx_2 toMorphoSyntax>
		 <Stem_1 inflectionClass> = <Stem_2 inflectionClass>
		 <Stem_1 inflectionClass> <= <derivCircumPfx_1 toInflectionClass>
		 <Stem_1 inflectionClass> <= <derivCircumPfx_2 toInflectionClass>
		 <Stem_1 exception>       <= <derivCircumPfx_1 toException>
		 <Stem_1 exception>       <= <derivCircumPfx_2 toException>
		 <Stem_1 blocksInflection> = - | This stem can now be inflected
		 | constraints
		 <Stem_2 morphoSyntax>     = <derivCircumPfx_1 fromMorphoSyntax>
		 <Stem_2 morphoSyntax>     = <derivCircumPfx_2 fromMorphoSyntax>
		 <Stem_2 inflectionClass>  = <derivCircumPfx_1 fromInflectionClass>
		 <Stem_2 inflectionClass>  = <derivCircumPfx_2 fromInflectionClass>
		 <Stem_2 stemName>         = <derivCircumPfx_1 stemName>
		 <Stem_2 stemName>         = <derivCircumPfx_2 stemName>
		 <Stem_2 exception>        = <derivCircumPfx_1 fromException>
		 <Stem_2 exception>        = <derivCircumPfx_2 fromException>
		 | rightmost "prefix" must be an infix
		 <derivCircumPfx_2> == [morphType : infix]
	  {
	  
		<Stem_2 synCat>           = <derivCircumPfx_1 fromCat>
		<Stem_2 synCat>           = <derivCircumPfx_1 envCat>
		<Stem_2 synCat>           = <derivCircumPfx_2 fromCat>
		<Stem_2 synCat>           = <derivCircumPfx_2 envCat>
		/
		<derivCircumPfx_1 fromCat>        = 8060
		<derivCircumPfx_1 envCat>         = 8060
		<derivCircumPfx_2 fromCat>        = 8060
		<derivCircumPfx_2 envCat>         = 8060
{
	  
		<Stem_2 synCat>           = 8060 /
		<Stem_2 synCat>           = 1877 /
		<Stem_2 synCat>           = 6700 /
		<Stem_2 synCat>           = 6452
}

	  }
	  
| ------------------------------------------------------------
|                PARTIALLY ANALYZED WORD PORTION
| ------------------------------------------------------------

			  | an unmarked root
rule {A root unmarked for category is a partial analysis}
Partial = root
								| percolation
  <Partial synCat> = <root rootCat>
								| constraint
  <root rootCat> = unknown

			  | affixes on an unmarked root
rule {One or more prefixes and suffixes on an unmarked stem}
Partial_1 = Prefs Partial_2 Suffs
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown

			  | prefixes on an unmarked root
rule {One or more prefixes on an unmarked stem}
Partial_1 = Prefs Partial_2
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown

			  | suffixes on an unmarked root
rule {One or more suffixes on an unmarked stem}
Partial_1 = Partial_2 Suffs
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown

rule {Derivational circumfix on an unmarked stem}
Partial_1 = derivCircumPfx Partial_2 derivCircumSfx
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown
rule {Derivational circumfix on an unmarked stem where second is an infix}
Partial_1 = derivCircumPfx_1 derivCircumPfx_2 Partial_2
								 | percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								 | constraint
  <Partial_2 synCat> = unknown
								 | rightmost "prefix" must be an infix
  <derivCircumPfx_2> == [morphType : infix]

rule {Unclassifed circumfix on an unmarked stem}
Partial_1 = circumPfx Partial_2 circumSfx
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown
  rule {Unclassifed circumfix on an unmarked stem where second is an infix}
  Partial_1 = circumPfx_1 circumPfx_2 Partial_2
								| percolation
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraint
  <Partial_2 synCat> = unknown
								| rightmost "prefix" must be an infix
  <circumPfx_2> == [morphType : infix]

rule {An unanalyzed prefix added to a sequence of prefixes; no compound rules}
  Prefs_1 = prefix (Prefs_2)
				| no percolation or constraints

rule {A derivational prefix added to a sequence of prefixes; the derivational prefix may be next to the stem}
  Prefs_1 = derivPfx (Prefs_2)
				| no percolation or constraints

rule {An unanalyzed suffix added to a sequence of suffixes; no compound rules}
  Suffs_1 = (Suffs_2) suffix
				| no percolation or constraints

rule {A derivational suffix added to a sequence of suffixes; the derivational suffix may be next to the stem}
  Suffs_1 = (Suffs_2) derivSfx
				| no percolation or constraints

			  | affixes on otherwise fully analyzed
			  | these never allow derivational affixes next to the stem
rule {One or more unanalyzed prefixes and suffixes on a fully analyzed stem}
  Partial = Prefixes Full Suffixes
								| percolation
  <Partial inflected> = <Full inflected>
  <Partial synCat> = <Full synCat>
								| constraints
  
  {
  
		<Full synCat>           = <Prefixes synCat>
		<Full synCat>           = <Prefixes envCat>
		<Full synCat>           = <Suffixes synCat>
		<Full synCat>           = <Suffixes envCat>
		/
		<Prefixes synCat>        = 8060
		<Prefixes envCat>         = 8060
		<Suffixes synCat>        = 8060
		<Suffixes envCat>         = 8060
{
	  
		<Full synCat>           = 8060 /
		<Full synCat>           = 1877 /
		<Full synCat>           = 6700 /
		<Full synCat>           = 6452
}

  }

rule {One or more unanalyzed prefixes on a fully analyzed stem}
  Partial = Prefixes Full
								| percolation
  <Partial inflected> = <Full inflected>
  <Partial synCat> = <Full synCat>
								| constraints
  
  {
  
		<Full synCat>           = <Prefixes synCat>
		<Full synCat>           = <Prefixes envCat>
		/
		<Prefixes synCat>        = 8060
		<Prefixes envCat>         = 8060
{
	  
		<Full synCat>           = 8060 /
		<Full synCat>           = 1877 /
		<Full synCat>           = 6700 /
		<Full synCat>           = 6452
}

  }

rule {One or more unanalyzed suffixes on a fully analyzed stem}
  Partial =          Full Suffixes
								| percolation
  <Partial inflected> = <Full inflected>
  <Partial synCat> = <Full synCat>
								| constraints
  
  {
  
		<Full synCat>           = <Suffixes synCat>
		<Full synCat>           = <Suffixes envCat>
		/
		<Suffixes synCat>        = 8060
		<Suffixes envCat>         = 8060
{
	  
		<Full synCat>           = 8060 /
		<Full synCat>           = 1877 /
		<Full synCat>           = 6700 /
		<Full synCat>           = 6452
}

  }

rule {Unanalyzed circumfix on a fully analyzed stem}
  Partial = circumPfx Full circumSfx
								| percolation
  <Partial inflected> = <Full inflected>
  <Partial synCat> = <Full synCat>
								| constraints
  
  {
  
		<Full synCat>           = <circumPfx synCat>
		<Full synCat>           = <circumPfx envCat>
		<Full synCat>           = <circumSfx synCat>
		<Full synCat>           = <circumSfx envCat>
		/
		<circumPfx synCat>        = 8060
		<circumPfx envCat>         = 8060
		<circumSfx synCat>        = 8060
		<circumSfx envCat>         = 8060
{
	  
		<Full synCat>           = 8060 /
		<Full synCat>           = 1877 /
		<Full synCat>           = 6700 /
		<Full synCat>           = 6452
}

  }
	| (Note: we do not allow for a derivational circumfix to attach to a Full in order to produce a partial - that would be an error.)
rule {Unanalyzed circumfix on a fully analyzed stem where second is an infix}
 Partial = circumPfx_1 circumPfx_2 Full
								 | percolation
	<Partial inflected> = <Full inflected>
	<Partial synCat> = <Full synCat>
								 | constraints
								 | rightmost "prefix" must be an infix
	<circumPfx_2> == [morphType : infix]
	  
	  {
	  
		<Full synCat>           = <circumPfx_1 synCat>
		<Full synCat>           = <circumPfx_1 envCat>
		<Full synCat>           = <circumPfx_2 synCat>
		<Full synCat>           = <circumPfx_2 envCat>
		/
		<circumPfx_1 synCat>        = 8060
		<circumPfx_1 envCat>         = 8060
		<circumPfx_2 synCat>        = 8060
		<circumPfx_2 envCat>         = 8060
{
	  
		<Full synCat>           = 8060 /
		<Full synCat>           = 1877 /
		<Full synCat>           = 6700 /
		<Full synCat>           = 6452
}

	  }
	  | (Note: we do not allow for a derivational circumfix to attach to a Full in order to produce a partial - that would be an error.)

			  | affixes on partial with non-final inflection
rule {One or more unanalyzed prefixes and suffixes on partial}
  Partial_1 = Prefs Partial_2 Suffs
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]

rule {One or more unanalyzed prefixes on partial}
  Partial_1 = Prefs Partial_2
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]

rule {One or more unanalyzed suffixes on partial}
  Partial_1 =          Partial_2 Suffs
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]

rule {Unanalyzed circumfix on partial}
  Partial_1 = circumPfx Partial_2 circumSfx
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]
rule {Unanalyzed circumfix on partial, where second part is an infix}
  Partial_1 = circumPfx_1 circumPfx_2 Partial_2
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]
								| rightmost "prefix" must be an infix
  <circumPfx_2> == [morphType : infix]

rule {Derivational circumfix on partial}
  Partial_1 = derivCircumPfx Partial_2 derivCircumSfx
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]
rule {Derivational circumfix on partial, where second part is an infix}
  Partial_1 = derivCircumPfx_1 derivCircumPfx_2 Partial_2
								| percolation
  <Partial_1 inflected> = <Partial_2 inflected>
  <Partial_1 synCat> = <Partial_2 synCat>
								| constraints
  <Partial_2> == ~[synCat:unknown]
								| rightmost "prefix" must be an infix
   <derivCircumPfx_2> == [morphType : infix]

rule {An unanalyzed prefix added to a sequence of prefixes}
  Prefixes_1 = prefix (Prefixes_2)
								| percolation
  <Prefixes_1 synCat> = <prefix fromCat>  | keep the same category
								| constraints
  
  {
  
		<Prefixes_2 synCat>           = <prefix fromCat>
		/
		<prefix fromCat>        = 8060
{
	  
		<Prefixes_2 synCat>           = 8060 /
		<Prefixes_2 synCat>           = 1877 /
		<Prefixes_2 synCat>           = 6700 /
		<Prefixes_2 synCat>           = 6452
}

  }

rule {A derivational prefix added to a sequence of prefixes; the derivational cannot be next to the stem}
  Prefixes_1 = derivPfx Prefixes_2
								| percolation
  <Prefixes_1 synCat> = <derivPfx toCat>
								| constraints
  {
  
		<Prefixes_2 synCat>           = <derivPfx fromCat>
		/
		<derivPfx fromCat>        = 8060
{
	  
		<Prefixes_2 synCat>           = 8060 /
		<Prefixes_2 synCat>           = 1877 /
		<Prefixes_2 synCat>           = 6700 /
		<Prefixes_2 synCat>           = 6452
}

  }

rule {A derivational prefix added to a partial analysis}
Partial_1 = derivPfx Partial_2
								| percolation
<Partial_1 synCat> = <derivPfx toCat>
								| constraints
{
  
		<Partial_2 synCat>           = <derivPfx fromCat>
		<Partial_2 synCat>           = <derivPfx envCat>
		/
		<derivPfx fromCat>        = 8060
		<derivPfx envCat>         = 8060
{
	  
		<Partial_2 synCat>           = 8060 /
		<Partial_2 synCat>           = 1877 /
		<Partial_2 synCat>           = 6700 /
		<Partial_2 synCat>           = 6452
}

  }

rule {An unanalyzed suffix added to a sequence of suffixes}
  Suffixes_1 = (Suffixes_2) suffix
								| percolation
  <Suffixes_1 synCat> = <suffix fromCat>  | keep the same category
								| constraints
  
  {
  
		<Suffixes_2 synCat>           = <suffix fromCat>
		/
		<suffix fromCat>        = 8060
{
	  
		<Suffixes_2 synCat>           = 8060 /
		<Suffixes_2 synCat>           = 1877 /
		<Suffixes_2 synCat>           = 6700 /
		<Suffixes_2 synCat>           = 6452
}

  }

rule {A derivational suffix added to a sequence of suffixes; the derivational cannot be next to the stem}
  Suffixes_1 = Suffixes_2 derivSfx
								| percolation
  <Suffixes_1 synCat> = <derivSfx toCat>
								| constraints
  {
  
		<Suffixes_2 synCat>           = <derivSfx fromCat>
		/
		<derivSfx fromCat>        = 8060
{
	  
		<Suffixes_2 synCat>           = 8060 /
		<Suffixes_2 synCat>           = 1877 /
		<Suffixes_2 synCat>           = 6700 /
		<Suffixes_2 synCat>           = 6452
}

  }

rule {A derivational suffix added to a partial analysis}
Partial_1 = Partial_2 derivSfx
								| percolation
<Partial_1 synCat> = <derivSfx toCat>
								| constraints
{
  
		<Partial_2 synCat>           = <derivSfx fromCat>
		<Partial_2 synCat>           = <derivSfx envCat>
		/
		<derivSfx fromCat>        = 8060
		<derivSfx envCat>         = 8060
{
	  
		<Partial_2 synCat>           = 8060 /
		<Partial_2 synCat>           = 1877 /
		<Partial_2 synCat>           = 6700 /
		<Partial_2 synCat>           = 6452
}

  }


rule {Partially analyzed stem that's been inflected with empty template}
	Partial = PartialInflected
								| percolation
	<Partial synCat> = <PartialInflected synCat>
								| constraints
	<Partial synCat> = <PartialInflected synCat>
	<Partial morphoSyntax> = <PartialInflected morphoSyntax>

	<Partial inflected> = +
	<PartialInflected inflected> = +

	
rule {Partially analyzed stem with inflectional template  8811}
		Partial_1 =   3783_0 Partial_2 2191_0  :
														 | percolation
  <Partial_1 synCat>       = <Partial_2 synCat>
														 | constraints
  <Partial_2 synCat>       = 5394 

  <Partial_1 morphoSyntax>    = <3783_0 morphoSyntax>
  <Partial_1 morphoSyntax>    = <2191_0 morphoSyntax>
														 | constraint
  <Partial_1 inflected> = +
  <Partial_2 inflected> = -
		
rule {Partially analyzed stem with inflectional template  6920}
		PartialInflected =   Partial (7818_0)  :
														 | percolation
  <PartialInflected synCat>       = <Partial synCat>
														 | constraints
{
  <Partial synCat>       = 8060 /
				  <Partial_2 synCat>       =  1877 /
				  <Partial_2 synCat>       =  6700 /
				  <Partial_2 synCat>       =  6452
} 

  <Partial_1 morphoSyntax>    = <7818_0 morphoSyntax>
														 | constraint
  <PartialInflected inflected> = +
  <Partial inflected> = -
		
rule {Partially analyzed stem with inflectional template  822}
		PartialInflected =   Partial (6865_0) (7818_1)  :
														 | percolation
  <PartialInflected synCat>       = <Partial synCat>
														 | constraints
  <Partial synCat>       = 6700 

  <Partial_1 morphoSyntax>    = <6865_0 morphoSyntax>
  <Partial_1 morphoSyntax>    = <7818_1 morphoSyntax>
														 | constraint
  <PartialInflected inflected> = +
  <Partial inflected> = -
		
		| if there are no compound rules, use the remaining rules:
			| these allow derivational affixes next to the stem
rule {Totally unanalyzed form with one or more prefixes and suffixes; no compound rules}
  Partial = Prefs Roots Suffs
				| percolation
	<Partial synCat> = <Roots synCat>
	<Partial morphoSyntax> = <Roots morphoSyntax>
	<Partial inflectionClass> = <Roots inflectionClass>

rule {Totally unanalyzed form with one or more prefixes; no compound rules}
  Partial = Prefs Roots
				| percolation
	<Partial synCat> = <Roots synCat>
	<Partial morphoSyntax> = <Roots morphoSyntax>
	<Partial inflectionClass> = <Roots inflectionClass>

rule {Totally unanalyzed form with one or more suffixes; no compound rules}
  Partial =       Roots Suffs
				| percolation
	<Partial synCat> = <Roots synCat>
	<Partial morphoSyntax> = <Roots morphoSyntax>
	<Partial inflectionClass> = <Roots inflectionClass>


rule {Totally unanalyzed sequence of roots; no compound rules}
  Partial =       Roots
				| percolation
	<Partial synCat> = <Roots synCat>
	<Partial morphoSyntax> = <Roots morphoSyntax>
	<Partial inflectionClass> = <Roots inflectionClass>

rule {A root added to a sequence of roots; no compound rules}
  Roots_1 = Roots_2 root
				| percolation
	<Roots_1 synCat>      = <Roots_2 synCat>      | arbitrarily use 1st
	<Roots_1 morphoSyntax> = <Roots_2 morphoSyntax> | arbitrarily use 1st
	<Roots_1 inflectionClass> = <Roots_2 inflectionClass> | arbitrarily use 1st

rule {A sequence of two roots; no compound rules}
  Roots = root_1 root_2
				| percolation
	<Roots synCat>      = <root_1 rootCat>      | arbitrarily use 1st
	<Roots morphoSyntax> = <root_1 morphoSyntax> | arbitrarily use 1st
	<Roots inflectionClass> = <root_1 inflectionClass> | arbitrarily use 1st

rule {A sequence of two roots with one or more interfixes; no compound rules}
  Roots = root_1 Interfixes root_2
				| percolation
	<Roots synCat>      = <root_1 synCat>      | arbitrarily use 1st
	<Roots morphoSyntax> = <root_1 morphoSyntax> | arbitrarily use 1st
	<Roots inflectionClass> = <root_1 inflectionClass> | arbitrarily use 1st

rule {A sequence of two or more interfixes; no compound rules}
  Interfixes_1 = Interfixes_2 interfix

rule {An interfix; no compound rules}
  Interfixes = interfix
  
| ------------------------------------------------------------
|                TEMPLATES
| ------------------------------------------------------------
Let W be []
Let W/W be []
Let Prt be []
Let Linker be []
Let Proclitic be []
Let Enclitic be []
Let Bound be []

Let RootPOS0 be [rootCat:unknown] 
Let CliticPOS0 be [rootCat:unknown] 
Let RootPOS2800 be [rootCat:2800
	requiresInflection : -]
Let MSEnvPOS2800 be {[envCat:2800]}
Let FromPOS2800 be [fromCat:2800]

Let ToPOS2800 be [toCat:2800
	requiresInflection : -]
Let CliticPOS2800 be {[rootCat:2800]}
Let CFP2800 be {[fromCat:2800]}
Let RootPOS5394 be [rootCat:5394
	requiresInflection : +]
Let MSEnvPOS5394 be {[envCat:5394]}
Let FromPOS5394 be [fromCat:5394]

Let ToPOS5394 be [toCat:5394
	requiresInflection : +]
Let CliticPOS5394 be {[rootCat:5394]}
Let CFP5394 be {[fromCat:5394]}
Let RootPOS4333 be [rootCat:4333
	requiresInflection : -]
Let MSEnvPOS4333 be {[envCat:4333]}
Let FromPOS4333 be [fromCat:4333]

Let ToPOS4333 be [toCat:4333
	requiresInflection : -]
Let CliticPOS4333 be {[rootCat:4333]}
Let CFP4333 be {[fromCat:4333]}
Let RootPOS8060 be [rootCat:8060
	requiresInflection : +]
Let MSEnvPOS8060 be {[envCat:8060][envCat:1877][envCat:6700][envCat:6452]}
Let FromPOS8060 be [fromCat:8060]

Let ToPOS8060 be [toCat:8060
	requiresInflection : +]
Let CliticPOS8060 be {[rootCat:8060][rootCat:1877][rootCat:6700][rootCat:6452]}
Let CFP8060 be {[fromCat:8060][fromCat:1877][fromCat:6700][fromCat:6452]}
Let RootPOS1877 be [rootCat:1877
	requiresInflection : +]
Let MSEnvPOS1877 be {[envCat:1877]}
Let FromPOS1877 be [fromCat:1877]

Let ToPOS1877 be [toCat:1877
	requiresInflection : +]
Let CliticPOS1877 be {[rootCat:1877]}
Let CFP1877 be {[fromCat:1877]}
Let RootPOS6700 be [rootCat:6700
	requiresInflection : +]
Let MSEnvPOS6700 be {[envCat:6700]}
Let FromPOS6700 be [fromCat:6700]

Let ToPOS6700 be [toCat:6700
	requiresInflection : +]
Let CliticPOS6700 be {[rootCat:6700]}
Let CFP6700 be {[fromCat:6700]}
Let RootPOS6452 be [rootCat:6452
	requiresInflection : +]
Let MSEnvPOS6452 be {[envCat:6452]}
Let FromPOS6452 be [fromCat:6452]

Let ToPOS6452 be [toCat:6452
	requiresInflection : +]
Let CliticPOS6452 be {[rootCat:6452]}
Let CFP6452 be {[fromCat:6452]} 
 
 
 

Let IrregInflForm79 be []
Let IrregInflForm5238 be []
Let IrregInflForm6456 be []
Let Infix be [morphType:infix]
Let prefixinginterfix be {[cat:prefix]
						  [cat:interfix]}
Let suffixinginterfix be {[cat:suffix]
						  [cat:interfix]}
